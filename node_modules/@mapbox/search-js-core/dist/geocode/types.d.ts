import { LngLatLike } from '../LngLat';
import { LngLatBoundsLike } from '../LngLatBounds';
/**
 * Geographic feature data types for the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/).
 *
 * @typedef DataTypes
 * @see https://docs.mapbox.com/api/search/geocoding/#data-types
 */
export declare type DataTypes = 'country' | 'region' | 'postcode' | 'district' | 'place' | 'locality' | 'neighborhood' | 'address' | 'poi';
/**
 * Raw [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) feature properties
 * from the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/).
 *
 * Reference:
 * https://docs.mapbox.com/api/search/geocoding/#geocoding-response-object
 *
 * @typedef GeocodingFeatureProperties
 */
export interface GeocodingFeatureProperties {
    /**
     * A point accuracy metric for the returned address feature. Can be one of `rooftop`, `parcel`, `point`, `interpolated`, `intersection`, `street`.
     * @see [Point accuracy for address features](https://docs.mapbox.com/api/search/geocoding/#point-accuracy-for-address-features)
     */
    accuracy?: string;
    /**
     * The full street address for the returned `poi` feature.
     */
    address?: string;
    /**
     * Comma-separated categories for the returned `poi` feature.
     */
    category?: string;
    /**
     * The name of a suggested [Maki](https://www.mapbox.com/maki-icons/) icon to visualize a `poi` feature based on its `category`.
     */
    maki?: string;
    /**
     * The [Wikidata](https://wikidata.org/) identifier for the returned feature.
     */
    wikidata?: string;
    /**
     * The [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country and [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) region code for the returned feature.
     */
    short_code?: string;
}
/**
 * Object representing one level of hierarcy among encompassing parent features for a given {@link GeocodingFeature}.
 *
 * @typedef GeocodingFeatureContext
 */
export declare type GeocodingFeatureContext = Partial<GeocodingFeatureProperties> & {
    /**
     * A feature ID in the format `{type}.{id}`.
     */
    id: string;
    /**
     * A string representing the feature in the requested language, if specified.
     */
    text: string;
};
/**
 * A `GeocodingFeature` object represents a [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) feature result from the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/).
 *
 * **Legal terms:**
 *
 * Due to legal terms from our data sources, results from the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/) should come from the `permanentForward` & `permanentReverse`
 * methods if the results are to be cached/stored in a customer database. Otherwise, results should be used ephemerally and not persisted.
 *
 * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply
 * may result in modified or discontinued service.
 *
 * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion
 * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).
 *
 * **Disclaimer:**
 *
 * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.
 *
 * @typedef GeocodingFeature
 * @see [Geocoding response object](https://docs.mapbox.com/api/search/geocoding/#geocoding-response-object)
 */
export declare type GeocodingFeature = GeoJSON.Feature<GeoJSON.Point, GeocodingFeatureProperties> & {
    /**
     * A feature ID in the format `{type}.{id}` where `{type}` is the lowest hierarchy feature in the `place_type` field.
     */
    id: string;
    /**
     * An array of {@link DataTypes} describing the feature.
     */
    place_type: string[];
    /**
     * Indicates how well the returned feature matches the user's query on a scale from `0` to `1`, with `1` meaning the result fully matches the query text.
     */
    relevance: number;
    /**
     * The house number for the returned `address` feature.
     */
    address?: string;
    /**
     * A string representing the feature in the requested language, if specified.
     */
    text: string;
    /**
     * A string representing the feature in the requested language, if specified, and its full result hierarchy.
     */
    place_name: string;
    /**
     * A string analogous to the text field that more closely matches the query than results in the specified language.
     */
    matching_text?: string;
    /**
     * A string analogous to the `place_name` field that more closely matches the query than results in the specified language.
     */
    matching_place_name?: string;
    /**
     * A string of the [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the query’s primary language.
     */
    language?: string;
    /**
     * A bounding box for the feature. This may be significantly
     * larger than the geometry.
     */
    bbox?: LngLatBoundsLike;
    /**
     * The coordinates of the feature’s center in the form `[longitude,latitude]`.
     */
    center: LngLatLike;
    /**
     * An array representing the hierarchy of encompassing parent features. Each parent feature may include any of the above properties.
     */
    context: GeocodingFeatureContext[];
};
