{
  "version": 3,
  "sources": ["../src/index.ts", "../src/autofill/constants.ts", "../src/LngLat.ts", "../src/LngLatBounds.ts", "../src/utils/uuid.ts", "../src/SessionToken.ts", "../src/MapboxError.ts", "../src/fetch.ts", "../src/utils/queryParams.ts", "../src/autofill/AddressAutofillCore.ts", "../src/searchbox/constants.ts", "../src/searchbox/SearchBoxCore.ts", "../src/validate/constants.ts", "../src/validate/ValidationCore.ts", "../src/geocode/constants.ts", "../src/geocode/GeocodingCore.ts", "../src/types.ts", "../src/utils/Evented.ts", "../src/utils/debounce.ts", "../src/SearchSession.ts", "../src/featureToSuggestion.ts"],
  "sourcesContent": ["import {\n  AddressAutofillOptions,\n  AddressAutofillCore,\n  AddressAutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse\n} from './autofill/AddressAutofillCore';\nimport {\n  AddressAutofillSuggestion,\n  AddressAutofillFeatureSuggestion\n} from './autofill/types';\n\nimport {\n  SearchBoxOptions,\n  SearchBoxCore,\n  SearchBoxSuggestionResponse,\n  SearchBoxRetrieveResponse,\n  SearchBoxCategoryResponse,\n  SearchBoxReverseResponse\n} from './searchbox/SearchBoxCore';\nimport {\n  SearchBoxAdministrativeUnitTypes,\n  SearchBoxSuggestion,\n  SearchBoxFeatureSuggestion,\n  SearchBoxCategorySuggestion\n} from './searchbox/types';\n\nimport {\n  ValidationOptions,\n  ValidationCore,\n  ValidationResponse\n} from './validate/ValidationCore';\nimport { ValidationFeature } from './validate/types';\n\nimport {\n  GeocodingOptions,\n  GeocodingCore,\n  GeocodingResponse\n} from './geocode/GeocodingCore';\nimport {\n  GeocodingFeatureProperties,\n  GeocodingFeatureContext,\n  GeocodingFeature,\n  DataTypes\n} from './geocode/types';\n\nimport { MatchCodeConfidence, MatchCode } from './types';\n\nimport { SearchSession } from './SearchSession';\nimport { SessionToken, SessionTokenLike } from './SessionToken';\nimport { MapboxError } from './MapboxError';\n\nimport { LngLat, LngLatLike } from './LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from './LngLatBounds';\n\nimport { polyfillFetch } from './fetch';\nimport { featureToSuggestion } from './featureToSuggestion';\n\nimport { Evented } from './utils/Evented';\nimport { debounce } from './utils/debounce';\n\nexport {\n  SearchBoxOptions,\n  SearchBoxCore,\n  SearchBoxSuggestionResponse,\n  SearchBoxRetrieveResponse,\n  SearchBoxAdministrativeUnitTypes,\n  SearchBoxSuggestion,\n  SearchBoxFeatureSuggestion,\n  SearchBoxCategoryResponse,\n  SearchBoxReverseResponse,\n  SearchBoxCategorySuggestion,\n  AddressAutofillOptions,\n  AddressAutofillCore,\n  AddressAutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse,\n  AddressAutofillSuggestion,\n  AddressAutofillFeatureSuggestion,\n  MatchCode,\n  MatchCodeConfidence,\n  SearchSession,\n  SessionToken,\n  SessionTokenLike,\n  MapboxError,\n  LngLat,\n  LngLatLike,\n  LngLatBounds,\n  LngLatBoundsLike,\n  polyfillFetch,\n  featureToSuggestion,\n  Evented,\n  debounce,\n  ValidationOptions,\n  ValidationCore,\n  ValidationResponse,\n  ValidationFeature,\n  GeocodingOptions,\n  GeocodingCore,\n  GeocodingResponse,\n  GeocodingFeatureProperties,\n  GeocodingFeatureContext,\n  GeocodingFeature,\n  DataTypes,\n  // ALIASES FOR BACKWARD COMPATIBILITY\n  AddressAutofillOptions as AutofillOptions,\n  AddressAutofillCore as MapboxAutofill,\n  AddressAutofillSuggestionResponse as AutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse as AutofillRetrieveResponse,\n  AddressAutofillSuggestion as AutofillSuggestion,\n  AddressAutofillFeatureSuggestion as AutofillFeatureSuggestion,\n  ValidationOptions as ValidateOptions,\n  ValidationCore as MapboxValidate,\n  ValidationResponse as ValidateResponse,\n  ValidationFeature as ValidateFeature,\n  GeocodingOptions as GeocodeOptions,\n  GeocodingCore as MapboxGeocode,\n  GeocodingResponse as GeocodeResponse,\n  GeocodingFeatureProperties as GeocodeFeatureProperties,\n  GeocodingFeatureContext as GeocodeFeatureContext,\n  GeocodingFeature as GeocodeFeature\n};\n", "export const SEARCH_URL = `https://api.mapbox.com/autofill/v1`;\n\nexport const ENDPOINT_SUGGEST = 'suggest';\nexport const ENDPOINT_RETRIEVE = 'retrieve';\n\nexport const SUGGEST_URL = `${SEARCH_URL}/${ENDPOINT_SUGGEST}`;\nexport const RETRIEVE_URL = `${SEARCH_URL}/${ENDPOINT_RETRIEVE}`;\n", "/**\n * A `LngLat` object represents a given longitude and latitude coordinate, measured in degrees.\n * These coordinates use longitude, latitude coordinate order (as opposed to latitude, longitude)\n * to match the [GeoJSON specification](https://datatracker.ietf.org/doc/html/rfc7946#section-4),\n * which is equivalent to the OGC:CRS84 coordinate reference system.\n *\n * Note that any method that accepts a `LngLat` object as an argument or option\n * can also accept an `Array` of two numbers and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatLike}.\n *\n * @class LngLat\n * @param lng - Longitude, measured in degrees.\n * @param lat - Latitude, measured in degrees.\n * @example\n * ```typescript\n * const ll = new LngLat(-123.9749, 40.7736);\n * console.log(ll.lng); // = -123.9749\n * ```\n */\nexport class LngLat {\n  /**\n   * @name lng\n   * @instance\n   * @memberof LngLat\n   */\n  readonly lng: number;\n  /**\n   * @name lat\n   * @instance\n   * @memberof LngLat\n   */\n  readonly lat: number;\n\n  constructor(lng: number, lat: number) {\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error(`Invalid LngLat object: (${lng}, ${lat})`);\n    }\n    this.lng = +lng;\n    this.lat = +lat;\n    if (this.lat > 90 || this.lat < -90) {\n      throw new Error(\n        'Invalid LngLat latitude value: must be between -90 and 90'\n      );\n    }\n    if (this.lng > 180 || this.lng < -180) {\n      throw new Error(\n        'Invalid LngLat longitude value: must be between -180 and 180'\n      );\n    }\n  }\n\n  /**\n   * Returns the coordinates represented as an array of two numbers.\n   *\n   * @returns The coordinates represeted as an array of longitude and latitude.\n   * @example\n   * ```typescript\n   * const ll = new LngLat(-73.9749, 40.7736);\n   * ll.toArray(); // = [-73.9749, 40.7736]\n   * ```\n   */\n  toArray(): [number, number] {\n    return [this.lng, this.lat];\n  }\n\n  /**\n   * Returns the coordinates represent as a string.\n   *\n   * @returns The coordinates represented as a string of the format `'LngLat(lng, lat)'`.\n   * @example\n   * ```typescript\n   * const ll = new LngLat(-73.9749, 40.7736);\n   * ll.toString(); // = \"LngLat(-73.9749, 40.7736)\"\n   * ```\n   */\n  toString(): string {\n    return `LngLat(${this.lng}, ${this.lat})`;\n  }\n\n  /**\n   * Converts an array of two numbers or an object with `lng` and `lat` or `lon` and `lat` properties\n   * to a `LngLat` object.\n   *\n   * If a `LngLat` object is passed in, the function returns a copy.\n   *\n   * @param input - An array of two numbers or object to convert, or a `LngLat` object to return.\n   * @returns A new `LngLat` object, if a conversion occurred, or the original `LngLat` object.\n   * @example\n   * ```typescript\n   * const arr = [-73.9749, 40.7736];\n   * const ll = LngLat.convert(arr);\n   * console.log(ll);   // = LngLat {lng: -73.9749, lat: 40.7736}\n   * ```\n   */\n  static convert(\n    input:\n      | LngLat\n      | { lng: number; lat: number }\n      | { lon: number; lat: number }\n      | [number, number]\n  ): LngLat {\n    // Make a copy if already an LngLat.\n    if (input instanceof LngLat) {\n      return new LngLat(input.lng, input.lat);\n    }\n\n    if (Array.isArray(input) && input.length === 2) {\n      return new LngLat(Number(input[0]), Number(input[1]));\n    }\n\n    if (\n      !Array.isArray(input) &&\n      typeof input == 'object' &&\n      input !== null &&\n      ('lng' in input || 'lon' in input) &&\n      'lat' in input\n    ) {\n      return new LngLat(\n        Number('lng' in input ? input.lng : input.lon),\n        Number(input.lat)\n      );\n    }\n\n    throw new Error(\n      '`LngLatLike` argument must be specified as an object {lng: <lng>, lat: <lat>}, an object {lon: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]'\n    );\n  }\n}\n\n/**\n * A {@link LngLat} object, an array of two numbers representing longitude and latitude,\n * or an object with `lng` and `lat` or `lon` and `lat` properties.\n *\n * @typedef LngLatLike\n * @type {LngLat | [number, number] | { lng: number, lat: number } | { lon: number, lat: number }}\n * @example\n * ```typescript\n * const v1 = new LngLat(-122.420679, 37.772537);\n * const v2 = [-122.420679, 37.772537];\n * const v3 = {lon: -122.420679, lat: 37.772537};\n * ```\n */\nexport type LngLatLike =\n  | LngLat\n  | { lng: number; lat: number }\n  | { lon: number; lat: number }\n  | [number, number];\n", "import { LngLat, LngLatLike } from './LngLat';\n\n/**\n * A `LngLatBounds` object represents a geographical bounding box,\n * defined by its southwest and northeast points in longitude and latitude.\n *\n * Note that any method that accepts a `LngLatBounds` object as an argument or option\n * can also accept an `Array` of two {@link LngLatLike} constructs and will perform an implicit conversion.\n * This flexible type is documented as {@link LngLatBoundsLike}.\n *\n * @class LngLatBounds\n */\nexport class LngLatBounds {\n  private _ne: LngLat;\n  private _sw: LngLat;\n\n  /**\n   * @param sw - The southwest corner of the bounding box.\n   * @param ne - The northeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const sw = new LngLat(-73.9876, 40.7661);\n   * const ne = new LngLat(-73.9397, 40.8002);\n   * const llb = new LngLatBounds(sw, ne);\n   * ```\n   */\n  constructor(sw: LngLatLike, ne: LngLatLike) {\n    this._sw = LngLat.convert(sw);\n    this._ne = LngLat.convert(ne);\n  }\n\n  /**\n   * Returns the southwest corner of the bounding box.\n   *\n   * @returns The southwest corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouthWest(); // LngLat {lng: -73.9876, lat: 40.7661}\n   * ```\n   */\n  getSouthWest(): LngLat {\n    return this._sw;\n  }\n\n  /**\n   * Returns the northeast corner of the bounding box.\n   *\n   * @returns The northeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorthEast(); // LngLat {lng: -73.9397, lat: 40.8002}\n   * ```\n   */\n  getNorthEast(): LngLat {\n    return this._ne;\n  }\n\n  /**\n   * Returns the northwest corner of the bounding box. This is commonly used\n   * as the 'min' point in the bounding box.\n   *\n   * @returns The northwest corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorthWest(); // LngLat {lng: -73.9876, lat: 40.8002}\n   * ```\n   */\n  getNorthWest(): LngLat {\n    return new LngLat(this.getWest(), this.getNorth());\n  }\n\n  /**\n   * Returns the southeast corner of the bounding box. This is commonly used\n   * as the 'max' point in the bounding box.\n   *\n   * @returns The southeast corner of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouthEast(); // LngLat {lng: -73.9397, lat: 40.7661}\n   * ```\n   */\n  getSouthEast(): LngLat {\n    return new LngLat(this.getEast(), this.getSouth());\n  }\n\n  /**\n   * Returns the west edge of the bounding box.\n   *\n   * @returns The west edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getWest(); // -73.9876\n   * ```\n   */\n  getWest(): number {\n    return this._sw.lng;\n  }\n\n  /**\n   * Returns the south edge of the bounding box.\n   *\n   * @returns The south edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getSouth(); // 40.7661\n   * ```\n   */\n  getSouth(): number {\n    return this._sw.lat;\n  }\n\n  /**\n   * Returns the east edge of the bounding box.\n   *\n   * @returns The east edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getEast(); // -73.9397\n   * ```\n   */\n  getEast(): number {\n    return this._ne.lng;\n  }\n\n  /**\n   * Returns the north edge of the bounding box.\n   *\n   * @returns The north edge of the bounding box.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.getNorth(); // 40.8002\n   * ```\n   */\n  getNorth(): number {\n    return this._ne.lat;\n  }\n\n  /**\n   * Returns the bounding box represented as an array.\n   *\n   * @returns The bounding box represented as an array, consisting of the\n   *   southwest and northeast coordinates of the bounding represented as arrays of numbers.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toArray(); // = [[-73.9876, 40.7661], [-73.9397, 40.8002]]\n   * ```\n   */\n  toArray(): [[number, number], [number, number]] {\n    return [this._sw.toArray(), this._ne.toArray()];\n  }\n\n  /**\n   * Returns the bounding box represented as a flattened array.\n   *\n   * @returns The bounding box represented as an array of numbers in [west, south, east, north] order.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toFlatArray(); // = [-73.9876, 40.7661, -73.9397, 40.8002]\n   * ```\n   */\n  toFlatArray(): [number, number, number, number] {\n    return [this._sw.lng, this._sw.lat, this._ne.lng, this._ne.lat];\n  }\n\n  /**\n   * Return the bounding box represented as a string.\n   *\n   * @returns The bounding box represents as a string of the format\n   *   `'LngLatBounds(LngLat(lng, lat), LngLat(lng, lat))'`.\n   * @example\n   * ```typescript\n   * const llb = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n   * llb.toString(); // = \"LngLatBounds(LngLat(-73.9876, 40.7661), LngLat(-73.9397, 40.8002))\"\n   * ```\n   */\n  toString(): string {\n    return `LngLatBounds(${this._sw.toString()}, ${this._ne.toString()})`;\n  }\n\n  /**\n   * Converts an array to a `LngLatBounds` object.\n   *\n   * If a `LngLatBounds` object is passed in, the function returns a copy.\n   *\n   * Internally, the function calls `LngLat#convert` to convert arrays to `LngLat` values.\n   *\n   * @param input - An array of two coordinates to convert, or a `LngLatBounds` object to return.\n   * @returns A new `LngLatBounds` object, if a conversion occurred, or the original `LngLatBounds` object.\n   * @example\n   * ```typescript\n   * const arr = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n   * const llb = LngLatBounds.convert(arr);\n   * console.log(llb);   // = LngLatBounds {_sw: LngLat {lng: -73.9876, lat: 40.7661}, _ne: LngLat {lng: -73.9397, lat: 40.8002}}\n   * ```\n   */\n  static convert(\n    input:\n      | LngLatBounds\n      | [LngLatLike, LngLatLike]\n      | [number, number, number, number]\n  ): LngLatBounds {\n    if (!input) {\n      throw new Error('Invalid LngLatBounds convert value: falsy');\n    }\n\n    // Make a copy if already an LngLatBounds.\n    if (input instanceof LngLatBounds) {\n      return new LngLatBounds(input.getSouthWest(), input.getNorthEast());\n    }\n\n    if (Array.isArray(input) && input.length === 2) {\n      return new LngLatBounds(\n        LngLat.convert(input[0]),\n        LngLat.convert(input[1])\n      );\n    }\n\n    if (Array.isArray(input) && input.length === 4) {\n      return new LngLatBounds(\n        LngLat.convert([input[0], input[1]]),\n        LngLat.convert([input[2], input[3]])\n      );\n    }\n\n    throw new Error(\n      '`LngLatBoundsLike` argument must be specified as an array [<LngLatLike>, <LngLatLike>] or an array [<west>, <south>, <east>, <north>]'\n    );\n  }\n}\n\n/**\n * A {@link LngLatBounds} object, an array of {@link LngLatLike} objects in [sw, ne] order,\n * or an array of numbers in [west, south, east, north] order.\n *\n * @typedef LngLatBoundsLike\n * @type {LngLatBounds | [LngLatLike, LngLatLike] | [number, number, number, number]}\n * @example\n * ```typescript\n * const v1 = new LngLatBounds(\n *   new LngLat(-73.9876, 40.7661),\n *   new LngLat(-73.9397, 40.8002)\n * );\n * const v2 = new LngLatBounds([-73.9876, 40.7661], [-73.9397, 40.8002]);\n * const v3 = [[-73.9876, 40.7661], [-73.9397, 40.8002]];\n * ```\n */\nexport type LngLatBoundsLike =\n  | LngLatBounds\n  | [LngLatLike, LngLatLike]\n  | [number, number, number, number];\n", "const UUID_RE =\n  /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n/**\n * Validates the UUID v4.\n * @param id - UUID value.\n */\nexport function validateUUID(id: string): boolean {\n  return UUID_RE.test(id);\n}\n\n/**\n * Generates a RFC4122 v4 UUID (pseudo-randomly-based)\n *\n * IMPORTANT: THIS IS NOT CRYPTO-GRAPHICALLY SECURE!\n *\n * Since we're using this to generate a random UUID, essentially as an SKU,\n * we don't need to worry about the randomness of the values as much.\n */\nexport function generateUUID(): string {\n  const randomString =\n    Math.random().toString(16) +\n    Date.now().toString(16) +\n    Math.random().toString(16);\n\n  const uuidString = randomString.replace(/\\./g, '');\n\n  const uuid = [\n    uuidString.slice(0, 8),\n    uuidString.slice(8, 12),\n    '4' + uuidString.slice(12, 15) + '-8' + uuidString.slice(15, 18),\n    uuidString.slice(18, 30)\n  ].join('-');\n\n  return uuid;\n}\n", "import { generateUUID } from './utils/uuid';\n\n/**\n * A `SessionToken` object is a unique identifier that groups together `suggest` / `retrieve` calls as part of the\n * [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/#retrieve-a-suggested-feature).\n *\n * Session tokens are used for [billing](https://docs.mapbox.com/api/search/search-box/#search-box-api-pricing) and\n * customer-accessible analytics.\n *\n * A [UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) value is recommended,\n * and is generated if an `id` is not provided.\n *\n * Note that any method that accepts a `SessionToken` object as an argument or option\n * can also accept a unique `string` and will perform an implicit conversion.\n * This flexible type is documented as {@link SessionTokenLike}.\n *\n * @name SessionToken\n * @example\n * ```typescript\n * const token = new SessionToken();\n * console.log(token.id); // = I am a UUIDv4 value!\n * ```\n */\nexport class SessionToken {\n  /**\n   * The session token in string format.\n   */\n  readonly id: string;\n\n  constructor(id?: string) {\n    this.id = id ?? generateUUID();\n  }\n\n  /**\n   * Returns the session token in string format.\n   *\n   * This is the same as calling `token.id`, and is okay to be used for serialization.\n   */\n  toString(): string {\n    return this.id;\n  }\n\n  /**\n   * Converts a string to a `SessionToken` object.\n   *\n   * If a `SessionToken` object is passed in, the function returns a copy.\n   */\n  static convert(token: SessionToken | string): SessionToken {\n    return new SessionToken(\n      token instanceof SessionToken ? token.id : token.toString()\n    );\n  }\n}\n\n/**\n * A {@link SessionToken} object or string representing a Mapbox Search Box API session token.\n *\n * It's recommended this value is a [UUIDv4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)) value.\n *\n * @typedef SessionTokenLike\n * @type {SessionToken | string}\n * @example\n * const v1 = new SessionToken();\n * const v2 = new SessionToken('f06e7531-6373-4d5a-8614-b6f313488050');\n * const v3 = 'f06e7531-6373-4d5a-8614-b6f313488050';\n */\nexport type SessionTokenLike = string | SessionToken;\n", "export const UNKNOWN_ERROR = 'Unknown error';\n\n/**\n * Thrown from Search JS Core functions when a network request fails.\n *\n * See common errors here:\n * - [SearchBoxCore](https://docs.mapbox.com/api/search/search-box/#search-box-api-errors)\n * - [AddressAutofillCore](https://docs.mapbox.com/api/search/geocoding/#geocoding-api-errors)\n */\nexport class MapboxError extends Error {\n  readonly statusCode: number;\n\n  constructor(json: Record<string, unknown>, statusCode: number) {\n    super(String(json.message || json.error || UNKNOWN_ERROR));\n    this.name = 'MapboxError';\n    this.statusCode = statusCode;\n  }\n\n  /**\n   * Modified Error toString() method to include the status code.\n   */\n  toString(): string {\n    return `${this.name} (${this.statusCode}): ${this.message}`;\n  }\n}\n\n/**\n * Utility function to see if the result is \"ok\" (in 200 range).\n *\n * If not, throw a {@link MapboxError} filled out by the\n * [JSON error format](https://docs.mapbox.com/api/search/search-box/#search-box-api-errors).\n */\nexport async function handleNonOkRes(res: Response): Promise<void> {\n  if (!res.ok) {\n    const json = await res.json();\n    throw new MapboxError(json, res.status);\n  }\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// GLOBALS\nlet _fetchImpl: typeof fetch = globalThis.fetch;\nlet _abortControllerImpl: typeof AbortController = globalThis.AbortController;\n\ninterface FetchImplementation {\n  fetch: typeof fetch;\n  AbortController: typeof AbortController;\n}\n\n/**\n * Polyfills {@link fetch} implementation used in Search JS Core.\n *\n * If a `fetch` implementation is already available, the polyfill will be\n * silently ignored.\n *\n * When running Search JS Core in a Node.js environment, fetch must be either\n * polyfilled globally or passed into this function before usage of\n * internal library functionality.\n *\n * @param opts Options for the polyfill.\n * @param {fetch} opts.fetch Required. A custom `fetch` implementation.\n * @param {AbortController} opts.AbortController Required. A custom `AbortController` implementation.\n * @param {boolean} force If `true`, the polyfill will be forced to load. Otherwise, it will only load if `fetch` is not available.\n */\nexport function polyfillFetch(\n  { fetch, AbortController }: FetchImplementation,\n  force = false\n): void {\n  if (!fetch) {\n    throw new Error(\n      'Fetch implementation must include implementations of `fetch`.'\n    );\n  }\n\n  if (_fetchImpl && !force) {\n    return;\n  }\n  _fetchImpl = fetch;\n  _abortControllerImpl = AbortController;\n}\n\n/**\n * Returns the {@link FetchImplementation} used by Search JS Core.\n */\nexport function getFetch(): FetchImplementation {\n  if (!_fetchImpl) {\n    throw new Error(\n      'Fetch implementation not found. Please include a fetch polyfill in your application or use `polyfillFetch` from `@mapbox/search-js-core` to fix this issue.'\n    );\n  }\n\n  return {\n    fetch: _fetchImpl,\n    AbortController: _abortControllerImpl\n  };\n}\n", "type Primitive = string | number | boolean | null;\n\n/**\n * tl;dr - [classnames](https://www.npmjs.com/package/classnames) for query parameters.\n *\n * Encodes query parameters into a stringified form, good for use with {@link URL#search}.\n * Objects are key-value pairs, and if a falsy object is passed, it will be omitted.\n *\n * Null and undefined values are ignored.\n * Array values are encoded as comma-separated values.\n *\n * @example\n * ```typescript\n * const limit = 0;\n * const offset = null;\n * const params = queryParams(\n *  {\n *    q: 'pizza',\n *    c: null\n *  },\n *  (limit != null) && { limit },\n *  (offset != null) && { offset }\n * );\n * console.log(params); // = 'q=pizza&limit=0'\n * ```\n */\nexport function queryParams<T extends Record<string, Primitive>>(\n  ...objects: (T | false)[]\n): string {\n  const params = [];\n  for (const obj of objects) {\n    if (!obj) continue;\n\n    const entries = Object.entries(obj);\n    for (const [key, value] of entries) {\n      if (value == null) continue;\n      params.push(`${key}=${encodeURIComponent(String(value))}`);\n    }\n  }\n\n  return params.join('&');\n}\n", "import { RETRIEVE_URL, SUGGEST_URL } from './constants';\nimport {\n  AddressAutofillSuggestion,\n  AddressAutofillFeatureSuggestion\n} from './types';\n\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { SessionToken, SessionTokenLike } from '../SessionToken';\n\nimport { handleNonOkRes } from '../MapboxError';\nimport { getFetch } from '../fetch';\nimport { queryParams } from '../utils/queryParams';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism intentionally works in the same way as the\n   * [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\ninterface SessionTokenOptions {\n  /**\n   * A customer-provided session token value, which groups a series of requests together for [billing purposes](https://docs.mapbox.com/api/search/search-box/#search-box-api-pricing).\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search-box/#session-billing\n   */\n  sessionToken: SessionTokenLike;\n}\n\n/**\n * Options used by {@link AddressAutofillCore} and {@link useAddressAutofillCore} to control the location, language, country, and limit of results. All properties are optional.\n *\n * @typedef {Object} AddressAutofillOptions\n * @property {string} language The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) to be returned. If not specified, `en` will be used.\n * @property {string} country An [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to be returned. If not specified, results will not be filtered by country.\n * @property {string | LatLngBoundsLike} bbox Limit results to only those contained within the supplied bounding box.\n * @property {string | number} limit The number of results to return, up to `10`.\n * @property {string | LngLatLike} proximity Bias the response to favor results that are closer to this location. Provide a point coordinate provided as a{@link LngLatLike}, or use the string `ip` to use the requester's IP address.\n * @property {string | boolean} streets If enabled, street results may be returned in addition to addresses. Defaults to `true`.\n */\n\nexport interface AddressAutofillOptions {\n  language: string;\n  country: string;\n  bbox: string | LngLatBoundsLike;\n  limit: string | number;\n  proximity: string | LngLatLike;\n  streets: string | boolean;\n}\n\n/**\n * @typedef AddressAutofillSuggestionResponse\n */\nexport interface AddressAutofillSuggestionResponse {\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned suggestion objects.\n   *\n   * @see {@link Suggestion}\n   */\n  suggestions: AddressAutofillSuggestion[];\n  url: string;\n}\n\n/**\n * @typedef AddressAutofillRetrieveResponse\n */\nexport interface AddressAutofillRetrieveResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link FeatureSuggestion}\n   */\n  features: AddressAutofillFeatureSuggestion[];\n  url: string;\n}\n\n/**\n * A `AddressAutofillCore` object is an application's main entrypoint to the\n * Mapbox Address Autofill API. The Mapbox Address Autofill API is an API similar to {@link SearchBoxCore},\n * but targeted towards **address** autocomplete.\n *\n * Only address types are returned by the API.\n *\n * `AddressAutofillCore` is focused on the two-step, interactive search experience. These steps are:\n *   1. {@link AddressAutofillCore#suggest}: The user enters a search term, and a list of suggested results is returned with\n *     address data.\n *   2. {@link AddressAutofillCore#retrieve}: The user selects a result from the list of suggested results, and the\n *     corresponding geographic coordinates are returned.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `AddressAutofillCore`, and\n * other options may be specified either in the constructor or in the {@link AddressAutofillCore#suggest} call.\n *\n * @class AddressAutofillCore\n * @param {AddressAutofillOptions} [options]\n * @param {string} [options.accessToken]\n */\nexport class AddressAutofillCore {\n  static defaults: Partial<AddressAutofillOptions> = {\n    language: 'en',\n    proximity: 'ip',\n    streets: true\n  };\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link AddressAutofillOptions}) to be merged into options in the following methods:\n   * - {@link AddressAutofillCore#suggest}\n   *\n   * @type {AddressAutofillOptions}\n   */\n  defaults: Partial<AddressAutofillOptions>;\n\n  constructor(\n    options: Partial<AccessTokenOptions & AddressAutofillOptions> = {}\n  ) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...AddressAutofillCore.defaults,\n      ...defaults\n    };\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * {@link AddressAutofillCore#suggest} is \"part one\" of the two-step autofill experience, and includes\n   * autofill information.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link AddressAutofillCore#retrieve}.\n   *\n   * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same\n   * {@link SessionToken} as the original request.\n   *\n   * If you'd like session tokens to be handled automatically, see {@link SearchSession}.\n   *\n   * @param {AddressAutofillOptions} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async suggest(\n    searchText: string,\n    optionsArg: SessionTokenOptions &\n      Partial<FetchOptions & AddressAutofillOptions>\n  ): Promise<AddressAutofillSuggestionResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      sessionToken\n    };\n\n    const url = new URL(`${SUGGEST_URL}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as AddressAutofillSuggestionResponse;\n\n    // Add 'original_search_text' so we can retrieve.\n    return {\n      ...json,\n      suggestions: json.suggestions.map((suggestion) => {\n        return {\n          ...suggestion,\n          original_search_text: searchText\n        };\n      }),\n      url: url.toString()\n    };\n  }\n\n  /**\n   * {@link AddressAutofillCore#retrieve} is \"part two\" of the two-step autofill experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * {@link suggestion} is usually a {@link AddressAutofillSuggestion} returned from \"part one,\"\n   * {@link AddressAutofillCore#suggest}.\n   *\n   * **Legal terms:**\n   *\n   * Geographic coordinates should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {AddressAutofillOptions} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async retrieve(\n    suggestion: AddressAutofillSuggestion,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions>\n  ): Promise<AddressAutofillRetrieveResponse> {\n    if (!suggestion) {\n      throw new Error('suggestion is required');\n    }\n    if (!this.canRetrieve(suggestion)) {\n      throw new Error('suggestion cannot be retrieved');\n    }\n\n    const { sessionToken: sessionTokenLike, signal } = optionsArg;\n\n    const sessionToken = SessionToken.convert(sessionTokenLike);\n\n    const url = new URL(`${RETRIEVE_URL}/${suggestion.action.id}`);\n    url.search = queryParams({\n      access_token: this.accessToken,\n      session_token: sessionToken.id\n    });\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), { signal });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as AddressAutofillRetrieveResponse;\n    json.url = url.toString();\n    return json;\n  }\n\n  /**\n   * Returns the query parameters used by {@link AddressAutofillCore#suggest}\n   */\n  #getQueryParams(\n    options: Partial<AddressAutofillOptions & SessionTokenOptions>\n  ): string {\n    return queryParams(\n      {\n        types: 'address',\n        access_token: this.accessToken,\n        streets: options.streets,\n        language: options.language,\n        country: options.country,\n        limit: options.limit\n      },\n      options.sessionToken && {\n        session_token: SessionToken.convert(options.sessionToken).id\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      }\n    );\n  }\n\n  /**\n   * Returns true if {@link AddressAutofillCore#retrieve} can be called on this suggestion,\n   * false otherwise.\n   */\n  canRetrieve(suggestion: AddressAutofillSuggestion): boolean {\n    const action = suggestion.action;\n\n    return typeof action?.id === 'string';\n  }\n}\n", "export const SEARCH_URL = `https://api.mapbox.com/search/searchbox/v1`;\n\nexport const ENDPOINT_SUGGEST = 'suggest';\nexport const ENDPOINT_RETRIEVE = 'retrieve';\nexport const ENDPOINT_CATEGORY = 'category';\nexport const ENDPOINT_REVERSE = 'reverse';\n\nexport const SUGGEST_URL = `${SEARCH_URL}/${ENDPOINT_SUGGEST}`;\nexport const RETRIEVE_URL = `${SEARCH_URL}/${ENDPOINT_RETRIEVE}`;\nexport const CATEGORY_URL = `${SEARCH_URL}/${ENDPOINT_CATEGORY}`;\nexport const REVERSE_URL = `${SEARCH_URL}/${ENDPOINT_REVERSE}`;\n", "import {\n  CATEGORY_URL,\n  RETRIEVE_URL,\n  REVERSE_URL,\n  SUGGEST_URL\n} from './constants';\nimport {\n  SearchBoxAdministrativeUnitTypes,\n  SearchBoxSuggestion,\n  SearchBoxFeatureSuggestion,\n  SearchBoxCategorySuggestion\n} from './types';\n\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { SessionToken, SessionTokenLike } from '../SessionToken';\n\nimport { handleNonOkRes } from '../MapboxError';\nimport { getFetch } from '../fetch';\nimport { queryParams } from '../utils/queryParams';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism works in the same way as the [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\ninterface SessionTokenOptions {\n  /**\n   * A customer-provided session token value, which groups a series of requests\n   * together for [billing purposes](https://docs.mapbox.com/api/search/search-box/#search-box-api-pricing).\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search-box/#search-box-api-pricing\n   */\n  sessionToken: SessionTokenLike;\n}\n\ninterface SearchQueryOptions {\n  /**\n   * The user's query string. The query is limited to 256 characters.\n   */\n  q: string;\n}\n\n/**\n * @typedef SearchBoxOptions\n */\nexport interface SearchBoxOptions {\n  /**\n   * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) to be returned.\n   *\n   * If not specified, `en` will be used.\n   */\n  language: string;\n  /**\n   * The number of results to return, up to `10`.\n   */\n  limit: string | number;\n  /**\n   * Bias the response to favor results that are closer to this location.\n   *\n   * When both {@link SearchBoxOptions#proximity} and {@link SearchBoxOptions#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   */\n  proximity: string | LngLatLike;\n  /**\n   * The location from which to calculate distance. **This parameter may incur additional latency.**\n   *\n   * When both {@link SearchBoxOptions#proximity} and {@link SearchBoxOptions#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   *\n   * For distance calculations, both {@link SearchBoxOptions#navigation_profile} and\n   * {@link SearchBoxOptions#origin} must be specified.\n   *\n   * For ETA calculations: {@link SearchBoxOptions#navigation_profile},\n   * {@link SearchBoxOptions#origin}, and {@link SearchBoxOptions#eta_type} must be specified.\n   */\n  origin: string | LngLatLike;\n  /**\n   * Limit results to only those contained within the supplied bounding box.\n   */\n  bbox: string | LngLatBoundsLike;\n  /**\n   * The navigation routing profile to use for distance/eta calculations.\n   *\n   * For distance calculations, both {@link SearchBoxOptions#navigation_profile} and\n   * {@link SearchBoxOptions#origin} must be specified.\n   *\n   * For ETA calculations: {@link SearchBoxOptions#navigation_profile},\n   * {@link SearchBoxOptions#origin}, and {@link SearchBoxOptions#eta_type} must be specified.\n   */\n  navigation_profile?: 'driving' | 'walking' | 'cycling';\n  /**\n   * A polyline encoded linestring describing the route to be used for searching.\n   *\n   * Both polyline5 and polyline6 precision are accepted, but must be specified using the {@link SearchBoxOptions#route_geometry} parameter.\n   */\n  route?: string;\n  /**\n   * Passed in conjunction with a route polyline describing its precision. Options are polyline or polyline6. If this parameter is not provided with a {@link SearchBoxOptions#route}, the default is polyline.\n   *\n   * Accurate results depend on including the correct route_geometry for the {@link SearchBoxOptions#route} provided.\n   */\n  route_geometry?: string;\n  /**\n   * This indicates that the user intends to perform a higher cost search-along-route request.\n   *\n   * This should be included when {@link SearchBoxOptions#route} is included and should have a value of isochrone.\n   */\n  sar_type?: string;\n  /**\n   * Maximum detour in estimated minutes from route.\n   */\n  time_deviation?: string | number;\n  /**\n   * Used to estimate the time of arrival from the location specified in {@link SearchBoxOptions#origin}.\n   *\n   * The only allowed value for this parameter is navigation. This parameter, along with {@link SearchBoxOptions#origin} and {@link SearchBoxOptions#navigation_profile}, is required for ETA calculations.\n   *\n   * ETA calculations will incur additional latency.\n   */\n  eta_type?: 'navigation';\n  /**\n   * An [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to be returned.\n   *\n   * If not specified, results will not be filtered by country.\n   */\n  country: string;\n  /**\n   * Limit results to one or more types of features. If no types are specified, all possible types may be returned.\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search-box/#administrative-unit-types\n   */\n  types?: string | Set<SearchBoxAdministrativeUnitTypes>;\n  /**\n   * Limit results to those that belong to one or more categories, provided as a comma-separated list.\n   */\n  poi_category?: string;\n  /**\n   * Radius for the area to search within around a point.\n   */\n  radius?: string | number;\n  /**\n   * A customer provided user id.\n   */\n  user_id?: string;\n  /**\n   * A comma-separated list of rich metadata providers to include in a suggestion result.\n   */\n  rich_metadata_provider?: string;\n  /**\n   * A comma-separated list of canonical category names that limits POI results to those that are not part of the given categories.\n   */\n  poi_category_exclusions?: string;\n}\n\n/**\n * @typedef SearchBoxSuggestionResponse\n * Reference:\n * https://docs.mapbox.com/api/search/search-box/#response-get-suggested-results\n */\nexport interface SearchBoxSuggestionResponse {\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned suggestion objects.\n   *\n   * @see {@link SearchBoxSuggestion}\n   */\n  suggestions: SearchBoxSuggestion[];\n  url: string;\n}\n\n/**\n * @typedef SearchBoxRetrieveResponse\n * Reference:\n * https://docs.mapbox.com/api/search/search-box/#response-retrieve-a-suggested-feature\n */\nexport interface SearchBoxRetrieveResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link SearchBoxFeatureSuggestion}\n   */\n  features: SearchBoxFeatureSuggestion[];\n  url: string;\n}\n\n/**\n * @typedef SearchBoxReverseResponse\n * Reference:\n * https://docs.mapbox.com/api/search/search-box/#response-perform-a-reverse-lookup\n */\nexport interface SearchBoxReverseResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link SearchBoxFeatureSuggestion}\n   */\n  features: SearchBoxFeatureSuggestion[];\n  url: string;\n}\n\n/**\n * @typedef SearchBoxCategoryResponse\n * Reference:\n * https://docs.mapbox.com/api/search/search-box/#response-retrieve-pois-by-category\n */\nexport interface SearchBoxCategoryResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link SearchBoxCategorySuggestion}\n   */\n  features: SearchBoxCategorySuggestion[];\n  url: string;\n}\n\n/**\n * A `SearchBoxCore` object is an application's main entrypoint to the [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/).\n *\n * `SearchBoxCore` is focused on the two-step, interactive search experience. These steps are:\n *   1. {@link SearchBoxCore#suggest}: The user enters a search term, and a list of suggested results is returned with\n *      optional data such as: eta, distance calculations, etc.\n *   2. {@link SearchBoxCore#retrieve}: The user selects a result from the list of suggested results, and the\n *     corresponding geographic coordinates are returned for displaying on a map or otherwise manipulating.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `SearchBoxCore`, and\n * other options may be specified either in the constructor or in the {@link SearchBoxCore#suggest} call.\n *\n * @class SearchBoxCore\n * @param {SearchBoxOptions} [options]\n * @param {string} [options.accessToken]\n *\n * @example\n * ```typescript\n * const search = new SearchBoxCore({ accessToken: 'pk.my-mapbox-access-token' });\n *\n * const sessionToken = new SessionToken();\n * const result = await search.suggest('Washington D.C.', { sessionToken });\n * if (result.suggestions.length === 0) return;\n *\n * const suggestion = result.suggestions[0];\n * const { features } = await search.retrieve(suggestion, { sessionToken });\n * doSomethingWithCoordinates(features);\n * ```\n */\nexport class SearchBoxCore {\n  static defaults: Partial<SearchBoxOptions> = {\n    language: 'en'\n  };\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link SearchBoxOptions}) to be merged into options in the following methods:\n   * - {@link SearchBoxCore#suggest}\n   * - {@link SearchBoxCore#reverse}\n   */\n  defaults: Partial<SearchBoxOptions>;\n\n  constructor(options: Partial<AccessTokenOptions & SearchBoxOptions> = {}) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...SearchBoxCore.defaults,\n      ...defaults\n    };\n  }\n\n  /** @section {Interactive search} */\n\n  /**\n   * {@link SearchBoxCore#suggest} is \"part one\" of the two-step interactive search experience, and includes\n   * useful information such as: {@link SearchBoxSuggestion#name}, {@link SearchBoxSuggestion#place_formatted}, and {@link SearchBoxSuggestion#maki}.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link SearchBoxCore#retrieve}.\n   *\n   * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same\n   * {@link SessionToken} as the original request.\n   *\n   * If you'd like session tokens to be handled automatically, see {@link SearchSession}.\n   *\n   * @param {string} searchText\n   * @param {SearchBoxOptions} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async suggest(\n    searchText: string,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions & SearchBoxOptions>\n  ): Promise<SearchBoxSuggestionResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      q: searchText,\n      sessionToken\n    };\n\n    if (options.eta_type && (!options.origin || !options.navigation_profile)) {\n      throw new Error(\n        'to provide eta estimate: eta, navigation_profile, and origin are required'\n      );\n    }\n    if (options.origin && !options.navigation_profile) {\n      throw new Error(\n        'to provide distance estimate: both navigation_profile and origin are required'\n      );\n    }\n\n    const url = new URL(SUGGEST_URL);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as SearchBoxSuggestionResponse;\n    json.url = url.toString();\n    return json;\n  }\n\n  /**\n   * {@link SearchBoxCore#retrieve} is \"part two\" of the two-step interactive search experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * `suggestion` is usually a {@link SearchBoxSuggestion} returned from \"part one,\" {@link SearchBoxCore#suggest}.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * The [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {any} optionsArg\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async retrieve(\n    suggestion: SearchBoxSuggestion,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions>\n  ): Promise<SearchBoxRetrieveResponse> {\n    if (!suggestion) {\n      throw new Error('suggestion is required');\n    }\n\n    const { sessionToken: sessionTokenLike, signal } = optionsArg;\n\n    const sessionToken = SessionToken.convert(sessionTokenLike);\n\n    const url = new URL(\n      `${RETRIEVE_URL}/${encodeURIComponent(suggestion.mapbox_id)}`\n    );\n    url.search = queryParams({\n      access_token: this.accessToken,\n      session_token: sessionToken.id\n    });\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as SearchBoxRetrieveResponse;\n    json.url = url.toString();\n    return json;\n  }\n\n  /** @section {Programmatic search} */\n\n  /**\n   * {@link SearchBoxCore#category} makes it possible to browse entire categories of results,\n   * like coffee shops, hotels, and bookstores around a specific location or along a route and returns feature collection\n   * in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * **Legal terms:**\n   *\n   * The [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {Options} optionsArg\n   * @param {AbortSignal} [optionsArg.signal]\n   * @param {boolean} [optionsArg.permanent]\n   */\n  async category(\n    category: string,\n    optionsArg: Partial<FetchOptions & SearchBoxOptions> = {}\n  ): Promise<SearchBoxCategoryResponse> {\n    if (!category) {\n      throw new Error('category is required');\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const url = new URL(`${CATEGORY_URL}/${encodeURIComponent(category)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal: options.signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as SearchBoxCategoryResponse;\n    json.url = url.toString();\n\n    return json;\n  }\n\n  /**\n   * {@link SearchBoxCore#reverse} endpoint allows you to look up a single pair of coordinates and returns the geographic feature or features\n   * that exist at that location. The response to a request is a [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) FeatureCollection.\n   *\n   * Using the limit parameter, you can increase the maximum number of results up to 10. Pagination is not available, but this feature may be added in a later release.\n   * There is not an option to customize the order of search results.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * The [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param lngLat - Either a {@link LngLatLike} object or string in 'lng,lat' comma-separated format.\n   * @param {Options} optionsArg\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async reverse(\n    lngLat: string | LngLatLike,\n    optionsArg: Partial<FetchOptions & SearchBoxOptions> = {}\n  ): Promise<SearchBoxReverseResponse> {\n    if (!lngLat) {\n      throw new Error('lngLat is required');\n    }\n\n    const [lng, lat] =\n      typeof lngLat === 'string'\n        ? lngLat.split(',').map((x) => parseFloat(x))\n        : LngLat.convert(lngLat).toArray();\n\n    if (isNaN(lng) || isNaN(lat)) {\n      throw new Error('lngLat is required');\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const url = new URL(REVERSE_URL);\n\n    url.search = queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        limit: options.limit,\n        longitude: lng,\n        latitude: lat\n      },\n      options.types && {\n        types:\n          typeof options.types === 'string'\n            ? options.types\n            : [...options.types].join(',')\n      }\n    );\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal: options.signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as SearchBoxReverseResponse;\n    json.url = url.toString();\n\n    return json;\n  }\n\n  /**\n   * Returns the query parameters used by {@link SearchBoxCore#suggest}\n   */\n  #getQueryParams(\n    options: Partial<\n      SearchBoxOptions & SessionTokenOptions & SearchQueryOptions\n    >\n  ): string {\n    return queryParams(\n      {\n        q: options.q,\n        access_token: this.accessToken,\n        language: options.language,\n        limit: options.limit,\n        navigation_profile: options.navigation_profile,\n        route: options.route,\n        route_geometry: options.route_geometry,\n        sar_type: options.sar_type,\n        time_deviation: options.time_deviation,\n        eta_type: options.eta_type,\n        country: options.country,\n        poi_category: options.poi_category,\n        radius: options.radius,\n        user_id: options.user_id,\n        rich_metadata_provider: options.rich_metadata_provider,\n        poi_category_exclusions: options.poi_category_exclusions\n      },\n      options.sessionToken && {\n        session_token: SessionToken.convert(options.sessionToken).id\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.origin && {\n        origin:\n          typeof options.origin === 'string'\n            ? options.origin\n            : LngLat.convert(options.origin).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      },\n      options.types && {\n        types:\n          typeof options.types === 'string'\n            ? options.types\n            : [...options.types].join(',')\n      }\n    );\n  }\n}\n", "export const SEARCH_URL = `https://api.mapbox.com/autofill/v1`;\n\nexport const ENDPOINT_VALIDATE = 'retrieve';\n\nexport const VALIDATE_URL = `${SEARCH_URL}/${ENDPOINT_VALIDATE}`;\n", "import { VALIDATE_URL } from './constants';\nimport { ValidationFeature } from './types';\n\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { SessionToken, SessionTokenLike } from '../SessionToken';\n\nimport { handleNonOkRes } from '../MapboxError';\nimport { getFetch } from '../fetch';\nimport { queryParams } from '../utils/queryParams';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism intentionally works in the same way as the\n   * [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\ninterface SessionTokenOptions {\n  /**\n   * A customer-provided session token value, which groups a series of requests together for [billing purposes](https://docs.mapbox.com/api/search/search-box/#search-box-api-pricing).\n   *\n   * Reference:\n   * https://docs.mapbox.com/api/search/search-box/#session-billing\n   */\n  sessionToken: SessionTokenLike;\n}\n\n/**\n * @typedef ValidationOptions\n */\nexport interface ValidationOptions {\n  /**\n   * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) to be returned.\n   *\n   * If not specified, `en` will be used.\n   */\n  language: string;\n  /**\n   * An [ISO 3166 alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) to be returned.\n   *\n   * If not specified, results will not be filtered by country.\n   */\n  country: string;\n  /**\n   * Limit results to only those contained within the supplied bounding box.\n   */\n  bbox: string | LngLatBoundsLike;\n  /**\n   * Bias the response to favor results that are closer to this location.\n   *\n   * When both {@link ValidationOptions#proximity} and {@link ValidationOptions#origin} are specified, `origin` is interpreted as the\n   * target of a route, while `proximity` indicates the current user location.\n   */\n  proximity: string | LngLatLike;\n}\n\n/**\n * @typedef ValidationResponse\n */\nexport interface ValidationResponse {\n  type: 'FeatureCollection';\n  /**\n   * The attribution data for results.\n   */\n  attribution?: string;\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link FeatureSuggestion}\n   */\n  features: ValidationFeature[];\n  url: string;\n}\n\n/**\n * A `ValidationCore` object is an application's main entrypoint to the\n * Mapbox Validation API. The Mapbox Validation API is an API similar to {@link AddressAutofillCore},\n * but targeted at checking **address**.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `ValidationCore`, and\n * other options may be specified either in the constructor or in the {@link ValidationCore#validate} call.\n *\n * @class ValidationCore\n * @param {ValidationOptions} [options]\n * @param {string} [options.accessToken]\n */\nexport class ValidationCore {\n  static defaults: Partial<ValidationOptions> = {\n    language: 'en',\n    proximity: 'ip'\n  };\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link ValidationOptions}) to be merged into options in the following methods:\n   * - {@link ValidationOptions#validate}\n   *\n   * @type {ValidationOptions}\n   */\n  defaults: Partial<ValidationOptions>;\n\n  constructor(options: Partial<AccessTokenOptions & ValidationOptions> = {}) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...ValidationCore.defaults,\n      ...defaults\n    };\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * {@link ValidationCore#validate} allows you to validate an address\n   * and returns the feature(s) in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * **Legal terms:**\n   *\n   * Geographic coordinates should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {String} searchText\n   * @param {SessionTokenLike} optionsArg.sessionToken\n   * @param {AbortSignal} [optionsArg.signal]\n   */\n  async validate(\n    searchText: string,\n    optionsArg: SessionTokenOptions & Partial<FetchOptions>\n  ): Promise<ValidationResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n\n    const { sessionToken, signal } = optionsArg;\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg,\n      sessionToken\n    };\n\n    const url = new URL(`${VALIDATE_URL}/${encodeURIComponent(searchText)}`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const res = await fetch(url.toString(), {\n      signal\n    });\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as ValidationResponse;\n    json.url = url.toString();\n\n    if (json.features.length > 0) {\n      json.features = [json.features[0]];\n    }\n\n    return json;\n  }\n\n  /**\n   * Returns the query parameters used by {@link ValidationCore#validate}\n   */\n  #getQueryParams(\n    options: Partial<ValidationOptions & SessionTokenOptions>\n  ): string {\n    return queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        country: options.country\n      },\n      options.sessionToken && {\n        session_token: SessionToken.convert(options.sessionToken).id\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      }\n    );\n  }\n}\n", "export const SEARCH_URL = `https://api.mapbox.com/geocoding/v5`;\n\nexport const TEMP_URL = `${SEARCH_URL}/mapbox.places`;\nexport const PERMANENT_URL = `${SEARCH_URL}/mapbox.places-permanent`;\n", "import { getFetch } from '../fetch';\nimport { LngLat, LngLatLike } from '../LngLat';\nimport { LngLatBounds, LngLatBoundsLike } from '../LngLatBounds';\nimport { handleNonOkRes } from '../MapboxError';\nimport { queryParams } from '../utils/queryParams';\nimport { PERMANENT_URL, TEMP_URL } from './constants';\nimport { DataTypes, GeocodingFeature } from './types';\n\ninterface AccessTokenOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n}\n\ninterface FetchOptions {\n  /**\n   * If specified, the connected {@link AbortController} can be used to\n   * abort the current network request(s).\n   *\n   * This mechanism intentionally works in the same way as the\n   * [`fetch` API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#aborting_a_fetch).\n   *\n   * Reference:\n   * https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal#examples\n   */\n  signal?: AbortSignal;\n}\n\n/**\n * @typedef GeocodingOptions\n */\nexport interface GeocodingOptions {\n  /**\n   * When autocomplete is enabled, results will be included that start with the requested string, rather than just responses that match it exactly.\n   *\n   * Defaults to true.\n   */\n  autocomplete: boolean;\n  /**\n   * Limit results to only those contained within the supplied bounding box.\n   */\n  bbox: string | LngLatBoundsLike;\n  /**\n   * Limit results to one or more countries. Permitted values are [ISO 3166 alpha 2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country codes separated by commas.\n   */\n  country: string;\n  /**\n   * Specify whether the Geocoding API should attempt approximate, as well as exact, matching when performing searches.\n   *\n   * Defaults to true.\n   */\n  fuzzyMatch: boolean;\n  /**\n   * An [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) that controls the language of the text supplied in responses, and also affects result scoring.\n   */\n  language: string;\n  /**\n   * The number of results to return, up to `10`.\n   *\n   * Defaults to 5.\n   */\n  limit: number;\n  /**\n   * Bias the response to favor results that are closer to this location.\n   *\n   * Provided as two comma-separated coordinates in longitude,latitude order, or the string `ip` to bias based on reverse IP lookup.\n   */\n  proximity: string | LngLatLike;\n  /**\n   * Specify whether to request additional metadata about the recommended navigation destination corresponding to the feature (`true`) or not (`false`, default). Only applicable for address features.\n   */\n  routing: boolean;\n  /**\n   * Filter results to include only a subset (one or more) of the available feature types. Multiple options can be comma-separated.\n   */\n  types: string | Set<DataTypes>;\n  /**\n   * Available worldviews are: `cn`, `in`, `jp`, `us`. If a worldview is not set, `us` worldview boundaries will be returned.\n   */\n  worldview: string;\n}\n\ninterface PermanentOptions {\n  /**\n   * Permanent geocodes are used for use cases that require storing\n   * position data. If 'true', the permanent endpoints will be used, which are\n   * billed separately.\n   *\n   * If you're interested in using {@link PermanentOptions#permanent}, contact\n   * [Mapbox sales](https://www.mapbox.com/contact/sales/).\n   *\n   * It's important to speak with an Account Manager on the Sales team prior to making requests\n   * with {@link PermanentOptions#permanent} set to `true`, as unsuccessful requests\n   * made by an account that does not have access to the endpoint may be billable.\n   */\n  permanent: boolean;\n}\n\n/**\n * A `GeocodingResponse` object represents a returned data object from the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/#geocoding-response-object).\n *\n * @typedef GeocodingResponse\n */\nexport interface GeocodingResponse {\n  /**\n   * `\"FeatureCollection\"`, a GeoJSON type from the [GeoJSON specification](https://tools.ietf.org/html/rfc7946).\n   */\n  type: 'FeatureCollection';\n  /**\n   * Forward geocodes: An array of space and punctuation-separated strings from the original query.\n   *\n   * Reverse geocodes: An array containing the coordinates being queried.\n   */\n  query: string[];\n  /**\n   * The returned feature objects.\n   *\n   * @see {@link GeocodingFeature}\n   */\n  features: GeocodingFeature[];\n  /**\n   * Attributes the results of the Mapbox Geocoding API to Mapbox.\n   */\n  attribution: string;\n  url: string;\n}\n\n/**\n * A `GeocodingCore` object is an application's main entrypoint to the [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/).\n * The Geocoding API allows forward (location to coordinates) and reverse (coordinates to location) queries, enabled by corresponding\n * methods from the `GeocodingCore` object.\n *\n * A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) is required to use `GeocodingCore`, and\n * other options may be specified either in the constructor or in the {@link GeocodingCore#forward} or {@link GeocodingCore#reverse} calls.\n *\n * @class GeocodingCore\n *\n * @example\n * ```typescript\n * const geocode = new GeocodingCore({ accessToken: 'pk.my-mapbox-access-token' });\n *\n * const results = await geocode.forward('Washington D.C.');\n * if (results.features.length === 0) return;\n *\n * const feature = results.features[0];\n * doSomethingWithCoordinates(feature);\n * ```\n */\nexport class GeocodingCore {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken: string;\n\n  /**\n   * Any default options ({@link GeocodingOptions}) to be merged into options in the following methods:\n   * - {@link GeocodingCore#forward}\n   * - {@link GeocodingCore#reverse}\n   */\n  defaults: Partial<GeocodingOptions>;\n\n  constructor(options: Partial<AccessTokenOptions & GeocodingOptions> = {}) {\n    const { accessToken, ...defaults } = options;\n\n    this.accessToken = accessToken;\n\n    // Assign defaults to this.defaults.\n    this.defaults = {\n      ...defaults\n    };\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * {@link GeocodingCore#forward} allows you to look up a single location by name\n   * and returns the feature(s) and corresponding geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, geographic coordinates should be used ephemerally and not persisted.\n   * If the results are to be cached/stored in a customer database,\n   * calls to {@link GeocodingCore#forward} should specify `permanent: true` within the method options argument.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {String} searchText\n   * @param {GeocodingOptions} [optionsArg]\n   * @param {AbortSignal} [optionsArg.signal]\n   *\n   * @example\n   * ```typescript\n   * const results = await geocode.forward('Washington D.C.');\n   * if (results.features.length === 0) return;\n   *\n   * const feature = results.features[0];\n   * doSomethingWithCoordinates(feature);\n   * ```\n   */\n  async forward(\n    searchText: string,\n    optionsArg?: Partial<FetchOptions & GeocodingOptions & PermanentOptions>\n  ): Promise<GeocodingResponse> {\n    if (!searchText) {\n      throw new Error('searchText is required');\n    }\n\n    let signal: AbortSignal;\n    if (optionsArg) {\n      ({ signal } = optionsArg);\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const baseUrl = options.permanent ? PERMANENT_URL : TEMP_URL;\n    const url = new URL(`${baseUrl}/${encodeURIComponent(searchText)}.json`);\n    url.search = this.#getQueryParams(options);\n\n    const { fetch } = getFetch();\n    const fetchInit = signal ? { signal } : {};\n    const res = await fetch(url.toString(), fetchInit);\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as GeocodingResponse;\n    json.url = url.toString();\n    return json;\n  }\n\n  /**\n   * {@link GeocodingCore#reverse} allows you to look up a single pair of coordinates and returns the\n   * geographic feature or features that exist at that location in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, geographic coordinates should be used ephemerally and not persisted.\n   * If the results are to be cached/stored in a customer database,\n   * calls to {@link GeocodingCore#reverse} should specify `permanent: true` within the method options argument.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   *\n   * @param {String} searchText\n   * @param {GeocodingOptions} [optionsArg]\n   * @param {AbortSignal} [optionsArg.signal]\n   *\n   * @example\n   * ```typescript\n   * const results = await geocode.reverse({ lat: 40.7736, lng: -73.9749 });\n   * if (results.features.length === 0) return;\n   *\n   * const feature = results.features[0];\n   * doSomethingWithFeature(feature);\n   * ```\n   */\n  async reverse(\n    lngLat: string | LngLatLike,\n    optionsArg?: Partial<FetchOptions & GeocodingOptions & PermanentOptions>\n  ): Promise<GeocodingResponse> {\n    if (!lngLat) {\n      throw new Error('lngLat is required');\n    }\n\n    let signal: AbortSignal;\n    if (optionsArg) {\n      ({ signal } = optionsArg);\n    }\n\n    const options = {\n      ...this.defaults,\n      ...optionsArg\n    };\n\n    const searchText =\n      typeof lngLat === 'string'\n        ? lngLat\n        : LngLat.convert(lngLat).toArray().join(',');\n    const baseUrl = options.permanent ? PERMANENT_URL : TEMP_URL;\n    const url = new URL(`${baseUrl}/${encodeURIComponent(searchText)}.json`);\n    url.search = this.#getQueryParams(options, true);\n\n    const { fetch } = getFetch();\n    const fetchInit = signal ? { signal } : {};\n    const res = await fetch(url.toString(), fetchInit);\n\n    // Throw custom error if status code is not 200.\n    await handleNonOkRes(res);\n\n    const json = (await res.json()) as GeocodingResponse;\n    json.url = url.toString();\n    return json;\n  }\n\n  /**\n   * Returns the query parameters used by {@link <GeocodingCore>#forward} and {@link <GeocodingCore>#reverse}\n   */\n  #getQueryParams(\n    options: Partial<GeocodingOptions>,\n    isReverse = false\n  ): string {\n    // Remove query parameters that don't apply to forward or reverse\n    if (isReverse) {\n      ['proximity', 'autocomplete', 'fuzzyMatch', 'bbox'].forEach((key) => {\n        if (key in options) {\n          delete options[key];\n        }\n      });\n    }\n    return queryParams(\n      {\n        access_token: this.accessToken,\n        language: options.language,\n        country: options.country,\n        limit: options.limit,\n        autocomplete: options.autocomplete,\n        fuzzyMatch: options.fuzzyMatch,\n        routing: options.routing,\n        worldview: options.worldview\n      },\n      options.proximity && {\n        proximity:\n          typeof options.proximity === 'string'\n            ? options.proximity\n            : LngLat.convert(options.proximity).toArray().join(',')\n      },\n      options.bbox && {\n        bbox:\n          typeof options.bbox === 'string'\n            ? options.bbox\n            : LngLatBounds.convert(options.bbox).toFlatArray().join(',')\n      },\n      options.types && {\n        types:\n          typeof options.types === 'string'\n            ? options.types\n            : [...options.types].join(',')\n      }\n    );\n  }\n}\n", "/**\n * @typedef MatchCodeConfidence\n */\nexport const enum MatchCodeConfidence {\n  /**\n   * An exact match.\n   */\n  exact = 'exact',\n  /**\n   * High confidence of a match.\n   */\n  high = 'high',\n  /**\n   * Medium confidence of a match.\n   */\n  medium = 'medium',\n  /**\n   * Low confidence of a match.\n   */\n  low = 'low'\n}\n\n/**\n * An object describing the level of confidence that the given response feature matches the address intended by the request query.\n * Includes boolean flags denoting matches for each address sub-component.\n *\n * @typedef MatchCode\n */\nexport interface MatchCode {\n  /**\n   * A measure of confidence that the returned feature suggestion matches the intended address, based on the search text provided.\n   */\n  confidence: MatchCodeConfidence;\n  /**\n   * True if the confidence value is \"exact\".\n   */\n  exact_match: boolean;\n  /**\n   * True if the house number component was matched.\n   */\n  house_number: boolean;\n  /**\n   * True if the street component was matched.\n   */\n  street: boolean;\n  /**\n   * True if the postcode was matched.\n   */\n  postcode: boolean;\n  /**\n   * True if the place component was matched.\n   */\n  place: boolean;\n  /**\n   * True if the region component was matched.\n   */\n  region?: boolean;\n  /**\n   * True if the locality component was matched.\n   */\n  locality?: boolean;\n}\n", "/**\n * `Evented` mixes methods into other classes for event capabilities.\n *\n * If you are an end-user, you will most likely use these methods through\n * classes like {@link SearchSession}.\n *\n * For lists of events you can listen for, see API documentation for\n * specific classes.\n *\n * @class Evented\n */\nexport class Evented<T> {\n  #listeners: Partial<{\n    [key in keyof T]: ((arg0: T[key]) => void)[];\n  }> = {};\n\n  /**\n   * Adds a listener to a specified event type.\n   *\n   * @param type - The event type to add a listen for.\n   * @param listener - The function to be called when the event is fired.\n   */\n  addEventListener<K extends keyof T>(\n    type: K,\n    listener: (arg0: T[K]) => void\n  ): void {\n    const listenersArr = this.#listeners;\n\n    // Create listener if doesn't already exist.\n    if (!listenersArr[type]) {\n      listenersArr[type] = [];\n    }\n\n    listenersArr[type].push(listener);\n  }\n\n  /**\n   * Removes a previously registered event listener.\n   *\n   * @param type - The event type to remove listeners for.\n   * @param listener - The listener function to remove.\n   */\n  removeEventListener<K extends keyof T>(\n    type: K,\n    listener: (arg0: T[K]) => void\n  ): void {\n    const listenersArr = this.#listeners;\n\n    // If a type doesn't exist, return early.\n    if (!listenersArr[type]) {\n      return;\n    }\n\n    const listeners = listenersArr[type];\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  fire<K extends keyof T>(type: K, arg0: T[K]): void {\n    const listenersArr = this.#listeners;\n\n    // If a type doesn't exist, return early.\n    if (!listenersArr[type]) {\n      return;\n    }\n\n    const listeners = listenersArr[type];\n    for (const listener of listeners) {\n      listener(arg0);\n    }\n  }\n}\n", "/**\n * Version of the classic `debounce` function that accepts a `signalFn`\n * argument, which can return an {@link AbortSignal}.\n */\nexport function debounce<F extends (...args: unknown[]) => unknown>(\n  func: F,\n  wait: number,\n  signalFn?: () => AbortSignal\n): F {\n  let timeout = null;\n\n  return ((...args: Parameters<F>) => {\n    if (timeout !== null) {\n      clearTimeout(timeout);\n    }\n\n    const signal = signalFn && signalFn();\n    timeout = setTimeout(() => {\n      timeout = null;\n      if (signal?.aborted) {\n        return;\n      }\n      func(...args);\n    }, wait);\n  }) as F;\n}\n", "/* eslint-disable prefer-const */\nimport { SessionToken, SessionTokenLike } from './SessionToken';\n\nimport { getFetch } from './fetch';\n\nimport { Evented } from './utils/Evented';\nimport { debounce } from './utils/debounce';\nimport { AddressAutofillCore } from './autofill/AddressAutofillCore';\n\n/**\n * Shortcut function to create a new AbortController from the polyfill.\n */\nfunction createAbortController(): AbortController {\n  const { AbortController } = getFetch();\n  return new AbortController();\n}\n\ninterface EventTypes<SuggestionResponse, RetrieveResponse> {\n  suggest: SuggestionResponse;\n  suggesterror: Error;\n  retrieve: RetrieveResponse;\n}\n\n/**\n * TypeScript magic section: what is this?\n *\n * Despite the name {@link SearchSession}, in Search JS Web we use it to control\n * both {@link SearchBoxCore} **and** {@link AddressAutofillCore} instances. Both\n * of these have similar workflows, but are separate APIs with different options\n * and responses.\n *\n * In order to make TypeScript happy, this type is an \"approximation\" of what\n * {@link SearchSession} uses. When you construct a new {@link SearchSession},\n * because of this type [Options, Suggestion, SuggestionResponse, RetrieveResponse]\n * are automatically inferred.\n *\n * @internal\n * @example\n * ```typescript\n * const autofill = new AddressAutofillCore({\n *  accessToken: 'pk.my-fancy-token',\n * });\n *\n * const session = new SearchSession(autofill);\n *\n * `session` has inferred type = SearchSession<\n *   AddressAutofillOptions,\n *   AddressAutofillSuggestion,\n *   AddressAutofillSuggestionResponse,\n *   AddressAutofillRetrieveResponse\n * >\n * ```\n */\ntype SuggestSearch<Options, Suggestion, SuggestionResponse, RetrieveResponse> =\n  {\n    suggest: (\n      text: string,\n      options: Partial<Options> & {\n        sessionToken: SessionTokenLike;\n        signal: AbortSignal;\n      }\n    ) => Promise<SuggestionResponse>;\n    retrieve: (\n      suggestion: Suggestion,\n      options: Partial<Options> & {\n        sessionToken: SessionTokenLike;\n      }\n    ) => Promise<RetrieveResponse>;\n    canRetrieve?: (suggestion: Suggestion) => boolean;\n    canSuggest?: (suggestion: Suggestion) => boolean;\n  };\n\n/**\n * A `SearchSession` object is a managed entrypoint to the [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/)\n * or Mapbox Address Autofill API.\n *\n * `SearchSession` abstracts the suggest/retrieve flow of the two-step interactive search experience.\n *\n * Compared to using these APIs directly, you can use a `SearchSession` to:\n * 1. Automatically manage the session token lifecycle.\n * 2. Debounce calls to {@link SearchSession#suggest}.\n * 2. Abort in-flight requests with an imperative API.\n *\n * @class SearchSession\n * @example\n * ```typescript\n * const search = new SearchBoxCore({ accessToken: 'pk.my-mapbox-access-token' });\n * const session = new SearchSession(search);\n *\n * session.addEventListener('suggest', (res) => {\n *   presentResultsToUser(res.suggestions);\n * });\n *\n * session.addEventListener('retrieve', (res) => {\n *   doSomethingWithFeatureCollection(res);\n * });\n *\n * document.querySelector('button').addEventListener('click', (event) => {\n *   const suggestions = session.suggestions?.suggestions;\n *   if (!suggestions || !suggestions.length) {\n *     return;\n *   }\n *\n *   const suggestion = suggestions[0];\n *   if (session.canRetrieve(suggestion)) {\n *     session.retrieve(suggestion);\n *   } else if (session.canSuggest(suggestion)) {\n *     // .. go through suggest flow again ..\n *     session.suggest(suggestion.text);\n *   }\n * });\n *\n * session.suggest('Washington D.C.');\n * ```\n * @param {SearchBoxCore | AddressAutofillCore} search - The search interface to wrap.\n * @param {number} wait - The time in milliseconds to wait before sending a new request to the {@link SearchSession#suggest} call.\n */\nexport class SearchSession<\n  Options,\n  Suggestion,\n  SuggestionResponse,\n  RetrieveResponse\n> extends Evented<EventTypes<SuggestionResponse, RetrieveResponse>> {\n  readonly search: SuggestSearch<\n    Options,\n    Suggestion,\n    SuggestionResponse,\n    RetrieveResponse\n  >;\n\n  /**\n   * The time in milliseconds to wait before sending a new request to the\n   * {@link SearchSession#suggest} call.\n   */\n  readonly debounce: number;\n\n  /**\n   * The session token is an SKU (billing token) used to identify the current\n   * search session and provide analytics to the customer.\n   *\n   * As per {@link SessionToken}, this is a UUIDv4 value.\n   *\n   */\n  sessionToken = new SessionToken();\n\n  #suggestions: SuggestionResponse | null;\n\n  /**\n   * The suggestions from the last successful suggest call, if any.\n   */\n  get suggestions(): SuggestionResponse | null {\n    return this.#suggestions;\n  }\n\n  constructor(\n    search: SuggestSearch<\n      Options,\n      Suggestion,\n      SuggestionResponse,\n      RetrieveResponse\n    >,\n    wait = 0\n  ) {\n    super();\n\n    // Set 'suggest' method using debounce.\n    this.#suggestDebounce = debounce(\n      async (\n        searchText: string,\n        options: Partial<Options> = {}\n      ): Promise<void> => {\n        // Refresh abort controller.\n        this.#abort.abort();\n        this.#abort = createAbortController();\n\n        if (!searchText) {\n          this.#suggestions = null;\n          this.fire('suggest', this.#suggestions);\n          return;\n        }\n\n        try {\n          const res = await this.search.suggest(searchText, {\n            sessionToken: this.sessionToken,\n            ...options,\n            signal: this.#abort.signal\n          });\n\n          this.#suggestions = res;\n          this.fire('suggest', res);\n        } catch (err) {\n          if (err.name === 'AbortError') {\n            return;\n          }\n\n          this.fire('suggesterror', err);\n        }\n      },\n      wait,\n      () => this.#abort.signal\n    );\n\n    /**\n     * Define properties using {@link Object#defineProperties} so they are readonly during runtime,\n     * not just in TypeScript.\n     */\n    Object.defineProperties(this, {\n      search: {\n        value: search,\n        writable: false\n      },\n      debounce: {\n        value: wait,\n        writable: false\n      }\n    });\n  }\n\n  /**\n   * The {@link AbortController} is used to abort the current suggest, either\n   * because of a new {@link SearchSession#suggest} call, or because\n   * of {@link SearchSession#abort}.\n   *\n   * In both of these cases, a new {@link AbortController} is created,\n   * and the old one is aborted.\n   */\n  #abort = createAbortController();\n\n  #suggestDebounce: (searchText: string, options?: Partial<Options>) => void;\n\n  /** @section {Methods} */\n\n  /**\n   * {@link SearchSession#suggest} is \"part one\" of the two-step interactive search experience,\n   * and each suggestion includes metadata to present to the user.\n   *\n   * Suggestion objects **do not include geographic coordinates**. To get the coordinates of the result, use {@link SearchSession#retrieve}.\n   *\n   * It may be useful to call {@link SearchSession#canRetrieve} before calling this method, as the suggestion may be a reference to\n   * another suggest query. This can also be tested with {@link SearchSession#canSuggest}, and further calls to {@link SearchSession#suggest}.\n   *\n   * Results can be retrieved with the \"suggest\" event.\n   *\n   * @example\n   * ```typescript\n   * const search = new SearchBoxCore({ accessToken: 'pk.my-mapbox-access-token' });\n   * const session = new SearchSession(search);\n   *\n   * session.addEventListener('suggest', (res) => {\n   *   presentResultsToUser(res.suggestions);\n   * });\n   *\n   * session.suggest('Washington D.C.');\n   * ```\n   */\n  suggest(\n    searchText: string,\n    options?: Partial<Options>\n  ): Promise<SuggestionResponse> {\n    this.#suggestDebounce(searchText, options);\n\n    return new Promise((resolve, reject) => {\n      let suggestFn: (val: SuggestionResponse) => void;\n      let suggestErrorFn: (val: Error) => void;\n\n      suggestFn = (res) => {\n        this.removeEventListener('suggest', suggestFn);\n        this.removeEventListener('suggesterror', suggestErrorFn);\n        resolve(res);\n      };\n      suggestErrorFn = (err) => {\n        this.removeEventListener('suggest', suggestFn);\n        this.removeEventListener('suggesterror', suggestErrorFn);\n        reject(err);\n      };\n\n      this.addEventListener('suggest', suggestFn);\n      this.addEventListener('suggesterror', suggestErrorFn);\n    });\n  }\n\n  /**\n   * Clears the current suggestions.\n   */\n  clear(): void {\n    this.suggest('');\n  }\n\n  /**\n   * {@link SearchSession#retrieve} is \"part two\" of the two-step interactive search experience and includes\n   * geographic coordinates in [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) format.\n   *\n   * {@link suggestion} is usually a {@link Suggestion} returned from \"part one,\" {@link SearchSession#suggest}.\n   *\n   * Multiple feature suggestions may be returned from a single search query, for example in an airport with\n   * multiple terminals.\n   *\n   * **Legal terms:**\n   *\n   * Due to legal terms from our data sources, results should not be stored in a customer database.\n   * Results should be used ephemerally and not persisted.\n   *\n   * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply\n   * may result in modified or discontinued service.\n   *\n   * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion\n   * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).\n   *\n   * **Disclaimer:**\n   *\n   * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.\n   */\n  async retrieve(\n    suggestion: Suggestion,\n    options?: Partial<Options>\n  ): Promise<RetrieveResponse> {\n    const res = await this.search.retrieve(suggestion, {\n      sessionToken: this.sessionToken,\n      ...options\n    });\n\n    this.fire('retrieve', res);\n    return res;\n  }\n\n  /**\n   * Returns true if {@link SearchSession#retrieve} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/) has geographic coordinates\n   * for this suggestion.\n   *\n   * This method is mutually exclusive with {@link SearchSession#canSuggest}.\n   */\n  canRetrieve(suggestion: Suggestion): boolean {\n    if (!this.search.canRetrieve) {\n      return true;\n    }\n\n    return this.search.canRetrieve(suggestion);\n  }\n\n  /**\n   * Returns true if {@link SearchSession#suggest} can be called on this suggestion,\n   * false otherwise.\n   *\n   * This indicates the [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/) wants to do another\n   * suggestion search on this result, and does not have geographic coordinates.\n   *\n   * This method is mutually exclusive with {@link SearchSession#canRetrieve}.\n   */\n  canSuggest(suggestion: Suggestion): boolean {\n    if (!this.search.canSuggest) {\n      return true;\n    }\n\n    return this.search.canSuggest(suggestion);\n  }\n\n  /**\n   * Aborts the current {@link SearchSession#suggest} request.\n   */\n  abort(): void {\n    this.#abort.abort();\n    this.#abort = createAbortController();\n  }\n}\n", "import {\n  SearchBoxFeatureSuggestion,\n  SearchBoxFeatureProperties\n} from './searchbox/types';\nimport {\n  AddressAutofillFeatureSuggestion,\n  AddressAutofillSuggestion\n} from './autofill/types';\n\nfunction featureToSuggestion(\n  feature: SearchBoxFeatureSuggestion\n): SearchBoxFeatureProperties;\n\nfunction featureToSuggestion(\n  feature: AddressAutofillFeatureSuggestion\n): AddressAutofillSuggestion;\n\n/**\n * Utility function to convert the {@link SearchBoxFeatureSuggestion} properties to a\n * {@link SearchBoxFeatureProperties} object.\n */\nfunction featureToSuggestion(\n  feature: SearchBoxFeatureSuggestion | AddressAutofillFeatureSuggestion\n):\n  | SearchBoxFeatureProperties\n  | Omit<AddressAutofillSuggestion, 'original_search_text' | 'action'> {\n  const { properties } = feature;\n  return {\n    ...properties\n  };\n}\n\nexport { featureToSuggestion };\n"],
  "mappings": "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",
  "names": []
}
