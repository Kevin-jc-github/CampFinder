import { LngLatBoundsLike } from '../LngLatBounds';
/**
 * Administrative unit types for the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).
 *
 * @typedef AdministrativeUnitTypes
 * @see https://docs.mapbox.com/api/search/search/#administrative-unit-types
 */
export declare type AdministrativeUnitTypes = 'country' | 'region' | 'prefecture' | 'postcode' | 'district' | 'place' | 'city' | 'locality' | 'oaza' | 'neighborhood' | 'chome' | 'block' | 'street' | 'address';
export interface SuggestionJSONAction {
    /**
     * The endpoint to point the next request to. The current options are suggest and retrieve.
     *
     * The `suggest` call is used when the API determines the next best option is another round of suggestions.
     *
     * The `retrieve` call is used when the API determines it understands what feature the user is looking for
     * and that the user is ready for the geographic coordinates of the results.
     */
    endpoint: 'suggest' | 'retrieve';
    /**
     * The type of HTTP methods that are allowed for the next request. Options are `POST` or, less commonly, `GET`.
     */
    method: 'POST' | 'GET';
    /**
     * The JSON body to pass in the actionable request.
     */
    body: unknown;
    /**
     * Indicates whether the feature can be fetched as part of a batch retrieve. Not applicable during the public beta phase.
     */
    multi_retrievable?: boolean;
}
/**
 * Raw JSON form of a suggestion result's "context" from the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).
 *
 * Reference:
 * https://docs.mapbox.com/api/search/search/#response-retrieve-a-suggestion
 */
export interface SuggestionJSONContext {
    layer: string;
    localized_layer: string;
    name: string;
}
/**
 * A `Suggestion` object represents a suggestion result from the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).
 *
 * Suggestion objects are "part one" of the two-step interactive search experience, and include useful information about the result,
 * such as: {@link Suggestion#feature_name}, {@link Suggestion#description}, and {@link Suggestion#maki}.
 *
 * Suggestion objects do not include geographic coordinates. To get the coordinates of the result, use {@link MapboxSearch#retrieve}.
 * It may be useful to call {@link MapboxSearch#canRetrieve} before calling this method, as the suggestion may be a reference to
 * another suggest query. This can also be tested with {@link MapboxSearch#canSuggest}, and called with {@link MapboxSearch#suggest}.
 *
 * For tracking purposes, it is useful for any follow-up requests based on this suggestion to include same
 * {@link SessionToken} as the original request.
 *
 * Reference:
 * https://docs.mapbox.com/api/search/search/#response-retrieve-a-suggestion
 *
 * @typedef Suggestion
 * @example
 * ```typescript
 * const search = new MapboxSearch({ accessToken: 'pk.my-mapbox-access-token' });
 *
 * const sessionToken = new SessionToken();
 * const result = await search.suggest('Washington D.C.', { sessionToken });
 * if (result.suggestions.length === 0) return;
 *
 * const suggestion = result.suggestions[0];
 * if (search.canRetrieve(suggestion)) {
 *  const { features } = await search.retrieve(suggestion, { sessionToken });
 *  doSomethingWithCoordinates(features);
 * } else if (search.canSuggest(suggestion)) {
 *   // .. go through suggest flow again ..
 * }
 * ```
 */
export interface Suggestion {
    /**
     * A point accuracy metric for the returned address feature. Can be one of `rooftop`, `parcel`, `point`, `interpolated`, `intersection`, `street`.
     * @see [Point accuracy for address features](https://docs.mapbox.com/api/search/geocoding/#point-accuracy-for-address-features)
     */
    accuracy?: string;
    /**
     * The name of the feature.
     */
    feature_name: string;
    /**
     * The feature name, as matched by the search algorithm.
     */
    matching_name: string;
    /**
     * Additional details, such as city and state for addresses.
     */
    description: string;
    /**
     * The name of the [Maki](https://labs.mapbox.com/maki-icons/) icon associated with the feature.
     */
    maki?: string;
    /**
     * For results with an address, the locally formatted address.
     */
    address?: string;
    /**
     * The house number for address objects.
     */
    address_number?: string;
    /**
     * The [IETF language tag](https://en.wikipedia.org/wiki/IETF_language_tag) of the feature.
     */
    language: string;
    /**
     * The type of result using the global context hierarchy (region, place, locality, neighborhood, address).
     *
     * @see {@link AdministrativeUnitTypes}
     */
    result_type?: AdministrativeUnitTypes[];
    /**
     * Action block of the suggestion result.
     * "body" is an opaque object.
     *
     * Reference: https://docs.mapbox.com/api/search/search/#response-retrieve-a-suggestion
     */
    action?: SuggestionJSONAction;
    /**
     * A list of category IDs that the feature belongs to.
     */
    category?: string[];
    internal_id?: string;
    external_ids?: {
        federated: string;
        mbx_poi?: string;
        foursquare?: string;
        [name: string]: string | undefined;
    };
    mapbox_id?: string;
    /**
     * Address context fields of the feature.
     */
    context: SuggestionJSONContext[];
    /**
     * Address metadata fields of the feature.
     */
    metadata: {
        [key: string]: string;
    };
}
/**
 * Raw [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) feature properties
 * from the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).
 *
 * Reference:
 * https://docs.mapbox.com/api/search/search/#response-forward-geocoding
 *
 * @typedef SearchFeatureProperties
 * @see {@link Suggestion}
 */
export interface SearchFeatureProperties extends Suggestion {
    /**
     * ID of the feature.
     */
    id: string;
    /**
     * The name of the place.
     */
    place_name?: string;
    /**
     * The type of place using the global context hierarchy (region, place, locality, neighborhood, address).
     *
     * @see {@link AdministrativeUnitTypes}
     */
    place_type?: AdministrativeUnitTypes[];
}
/**
 * A `FeatureSuggestion` object represents a [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) suggestion result from the [Mapbox Search API](https://docs.mapbox.com/api/search/search/).
 *
 * Feature suggestions are "part two" of the two-step interactive search experience and includes geographic coordinates. Multiple feature suggestions may be returned from a single search query,
 * for example in an airport with multiple terminals.
 *
 * As per the [Mapbox Search API](https://docs.mapbox.com/api/search/search/), this will always be
 * [Point](https://geojson.org/geojson-spec.html#point).
 *
 * **Legal terms:**
 *
 * Due to legal terms from our data sources, feature suggestions from the [Mapbox Search API](https://docs.mapbox.com/api/search/search/) should come from the `permanentForward` & `permanentReverse`
 * methods if the results are to be cached/stored in a customer database. Otherwise, results should be used ephemerally and not persisted.
 *
 * This permanent policy is consistent with the [Mapbox Terms of Service](https://www.mapbox.com/tos/) and failure to comply
 * may result in modified or discontinued service.
 *
 * Additionally, the [Mapbox Terms of Service](https://www.mapbox.com/tos/) states any rendering of a feature suggestion
 * must be using Mapbox map services (for example, displaying results on Google Maps or MapKit JS is not allowed).
 *
 * **Disclaimer:**
 *
 * The failure of Mapbox to exercise or enforce any right or provision of these Terms will not constitute a waiver of such right or provision.
 *
 * @typedef FeatureSuggestion
 * @example
 * ```typescript
 * const featureSuggestion = {
 *   type: 'Feature',
 *   geometry: {
 *     type: 'Point',
 *     coordinates: [0,0]
 *   },
 *   properties: {
 *     feature_name: 'Washington D.C.',
 *   }
 * };
 * ```
 * @see [Response: Forward geocoding](https://docs.mapbox.com/api/search/search/#response-forward-geocoding)
 */
export declare type FeatureSuggestion = GeoJSON.Feature<GeoJSON.Point, SearchFeatureProperties> & {
    /**
     * A bounding box for the feature. This may be significantly
     * larger than the geometry.
     */
    bbox?: LngLatBoundsLike;
};
