import mapboxgl from 'mapbox-gl';
import {
  MapboxAddressAutofill,
  MapboxSearchBox,
  MapboxAddressMinimap,
  Theme,
  MapboxHTMLEvent,
  confirmAddress,
  config
} from '../src';
import { AddressAutofillRetrieveResponse } from '@mapbox/search-js-core';
import CUSTOM_MARKER from './assets/marker-custom.svg';

declare global {
  const MAPBOX_ACCESS_TOKEN: string;
}

config.feedbackEnabled = false;

// Autofilled by ESBuild.
const ACCESS_TOKEN = MAPBOX_ACCESS_TOKEN;

const THEMES: Record<
  'Default' | 'Mapbox' | 'Branded' | 'Nike' | 'NintyFive',
  Theme
> = {
  Default: {},
  Mapbox: {
    variables: {
      fontFamily:
        '"Open Sans", -apple-system, BlinkMacSystemFont, avenir next, avenir, segoe ui, helvetica neue, helvetica, Ubuntu, roboto, noto, arial, sans-serif',
      boxShadow: '0 2px 10px 0 var(--darken25)'
    }
  },
  Branded: {
    variables: {
      fontFamily: 'Avenir, sans-serif',
      unit: '14px',
      padding: '0.5em',
      borderRadius: '0',
      boxShadow: '0 0 0 1px silver'
    }
  },
  Nike: {
    variables: {
      padding: '18px 12px',
      borderRadius: '8px',
      boxShadow: 'rgb(0 0 0 / 24%) 0px 4px 12px',
      fontFamily: '"Helvetica Neue",Helvetica,Arial,sans-serif',
      unit: '16px',
      colorText: '#111',
      fontWeightBold: '500'
    }
  },
  NintyFive: {
    variables: {
      unitHeader: '28px',
      fontFamily: '"MS Sans Serif",Tahoma,Verdana,Segoe,sans-serif',
      border: '2px solid #424242',
      borderRadius: '0',
      boxShadow: '0 0 1px 1px rgba(0,0,0,0.1)',
      colorText: '#212529',
      colorPrimary: '#08216b',
      colorSecondary: '#424242',
      colorBackground: 'silver'
    },
    cssText: `
.Results,
.Modal,
.Input {
  border-top-color:#fff;
  border-left-color:#fff;
  border-right-color:#333;
  border-bottom-color:#333;
}
    `,
    icons: {
      question:
        '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="mdi-clippy" width="18" height="18" viewBox="0 0 24 24"><path d="M15,15.5A2.5,2.5 0 0,1 12.5,18A2.5,2.5 0 0,1 10,15.5V13.75A0.75,0.75 0 0,1 10.75,13A0.75,0.75 0 0,1 11.5,13.75V15.5A1,1 0 0,0 12.5,16.5A1,1 0 0,0 13.5,15.5V11.89C12.63,11.61 12,10.87 12,10C12,8.9 13,8 14.25,8C15.5,8 16.5,8.9 16.5,10C16.5,10.87 15.87,11.61 15,11.89V15.5M8.25,8C9.5,8 10.5,8.9 10.5,10C10.5,10.87 9.87,11.61 9,11.89V17.25A3.25,3.25 0 0,0 12.25,20.5A3.25,3.25 0 0,0 15.5,17.25V13.75A0.75,0.75 0 0,1 16.25,13A0.75,0.75 0 0,1 17,13.75V17.25A4.75,4.75 0 0,1 12.25,22A4.75,4.75 0 0,1 7.5,17.25V11.89C6.63,11.61 6,10.87 6,10C6,8.9 7,8 8.25,8M10.06,6.13L9.63,7.59C9.22,7.37 8.75,7.25 8.25,7.25C7.34,7.25 6.53,7.65 6.03,8.27L4.83,7.37C5.46,6.57 6.41,6 7.5,5.81V5.75A3.75,3.75 0 0,1 11.25,2A3.75,3.75 0 0,1 15,5.75V5.81C16.09,6 17.04,6.57 17.67,7.37L16.47,8.27C15.97,7.65 15.16,7.25 14.25,7.25C13.75,7.25 13.28,7.37 12.87,7.59L12.44,6.13C12.77,6 13.13,5.87 13.5,5.81V5.75C13.5,4.5 12.5,3.5 11.25,3.5C10,3.5 9,4.5 9,5.75V5.81C9.37,5.87 9.73,6 10.06,6.13M14.25,9.25C13.7,9.25 13.25,9.59 13.25,10C13.25,10.41 13.7,10.75 14.25,10.75C14.8,10.75 15.25,10.41 15.25,10C15.25,9.59 14.8,9.25 14.25,9.25M8.25,9.25C7.7,9.25 7.25,9.59 7.25,10C7.25,10.41 7.7,10.75 8.25,10.75C8.8,10.75 9.25,10.41 9.25,10C9.25,9.59 8.8,9.25 8.25,9.25Z" /></svg>'
    }
  }
};

const minimap = document.querySelector<MapboxAddressMinimap>(
  'mapbox-address-minimap'
);
if (minimap) {
  minimap.accessToken = ACCESS_TOKEN;
  minimap.onSaveMarkerLocation = (coordinate) => {
    if (
      coordinate.toString() !== minimap.feature.geometry.coordinates.toString()
    ) {
      console.log(`Marker updated to ${JSON.stringify(coordinate)}.`);
    }
  };
  minimap.footer = 'My custom footer';

  if (window.location.pathname === '/minimap.html') {
    minimap.theme = {
      variables: { border: '13px solid #bbb', borderRadius: '18px' },
      icons: { marker: CUSTOM_MARKER }
    };
    minimap.defaultMapStyle = [
      'mapbox-search-web',
      'ckvsj8zh613el14qdcpvvhmd0'
    ];
    minimap.feature = {
      type: 'Feature',
      geometry: {
        type: 'Point',
        coordinates: [-77.035244, 38.889438]
      },
      properties: {}
    };
  }
}

const selectEl = document.querySelector('select');
const form = document.querySelector('form');
const element = (document.querySelector('mapbox-address-autofill') ??
  document.querySelector('mapbox-search-box')) as
  | MapboxAddressAutofill
  | MapboxSearchBox;

if (element) {
  // Set the access token.
  element.accessToken = ACCESS_TOKEN;

  // Trigger minimap on retrieve
  if (minimap && element instanceof MapboxAddressAutofill) {
    element.addEventListener(
      'retrieve',
      (e: MapboxHTMLEvent<AddressAutofillRetrieveResponse>) => {
        minimap.feature = e.detail.features[0];
        document.getElementById('minimap-container').style.display = 'block';
      }
    );
  }

  selectEl.addEventListener('change', () => {
    element.theme = THEMES[selectEl.value];
    minimap && (minimap.theme = THEMES[selectEl.value]);
  });
}

if (form && element instanceof MapboxAddressAutofill) {
  element.confirmOnBrowserAutofill = {
    minimap: true
  };

  element.addEventListener('suggest', (res) => console.log('suggest', res));
  element.addEventListener('suggesterror', (err) => console.log('error', err));
  element.addEventListener('retrieve', (res) => console.log('retrieve', res));

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const result = await confirmAddress(form, {
      theme: THEMES[selectEl.value],
      accessToken: ACCESS_TOKEN,
      minimap: {
        defaultMapStyle: ['mapbox', 'light-v10'],
        satelliteToggle: true,
        theme: { icons: { marker: CUSTOM_MARKER } }
      },
      skipConfirmModal: (feature) =>
        ['exact', 'high'].includes(feature.properties.match_code.confidence),
      footer: false
    });

    console.log(result);
  });
}

const mapEl = document.querySelector<HTMLElement>('#map');
if (mapEl) {
  mapboxgl.accessToken = ACCESS_TOKEN;

  const map = new mapboxgl.Map({
    container: mapEl,
    style: 'mapbox://styles/mapbox/streets-v11', // style URL
    center: [-74.5, 40], // starting position [lng, lat]
    zoom: 9 // starting zoom
  });

  if (element instanceof MapboxSearchBox) {
    element.bindMap(map);
    element.mapboxgl = mapboxgl;

    element.addEventListener('input', (e) => {
      if (e.target !== e.currentTarget) return;
      console.log('input', e);
    });
    element.addEventListener('suggest', (res) => console.log('suggest', res));
    element.addEventListener('suggesterror', (err) =>
      console.log('error', err)
    );
    element.addEventListener('retrieve', (res) => console.log('retrieve', res));

    const clonedElement = element.cloneNode(true) as MapboxSearchBox;
    clonedElement.accessToken = ACCESS_TOKEN;
    clonedElement.options.language = 'pt';
    clonedElement.mapboxgl = mapboxgl;
    clonedElement.marker = { color: 'red' };

    map.addControl(clonedElement);
    selectEl.addEventListener('change', () => {
      clonedElement.theme = THEMES[selectEl.value];
    });

    // clonedElement.search('99 green st');
  }

  // const searchbox = new MapboxSearchBox();
  // searchbox.accessToken = ACCESS_TOKEN;
  // map.addControl(searchbox);
}
