import { HTMLScopedElement } from './HTMLScopedElement';
import { Anchor, MapStyleMode } from '../utils/minimap';
import { Theme } from '../theme';
/**
 * `MapboxAddressMinimap`, also available as the element `<mapbox-address-minimap>`,
 * is a component that displays a marker for confirmation purposes.
 *
 * Optionally, this marker is editable. When editable, the marker can be moved
 * around the map and the updated location is sent back to the Mapbox Contribute
 * workflow.
 *
 * The goal of `MapboxAddressMinimap` is to reduce delivery or geolocation error in shipping and
 * local dispatching contexts.
 *
 * `MapboxAddressMinimap` expands to fill its container, and is hidden unless
 * {@link MapboxAddressMinimap#feature} is truthy. Setting {@link MapboxAddressMinimap#feature}
 * to `null` hides the component.
 *
 * @class MapboxAddressMinimap
 * @example
 * ```typescript
 * const minimap = new MapboxAddressMinimap();
 * containerElement.appendChild(minimap);
 * minimap.feature = {
 *   type: 'Feature',
 *   geometry: {
 *     type: 'Point',
 *     coordinates: [-122.4194, 37.7749]
 *   },
 *   properties: {}
 * };
 * ```
 */
export declare class MapboxAddressMinimap extends HTMLScopedElement {
    #private;
    static observedAttributes: string[];
    /** @section {Markers} */
    /**
     * If `true`, the marker can be moved around the map. Defaults to `false`.
     *
     * When editable, the marker can be moved around the map and the updated
     * location can be referenced from the {@link MapboxAddressMinimap#onSaveMarkerLocation} callback.
     *
     * @name canAdjustMarker
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {boolean}
     */
    get canAdjustMarker(): boolean;
    set canAdjustMarker(val: boolean);
    /**
     * If `true`, the map when panned moves around the marker, keeping the marker
     * centered. Defaults to `false`.
     *
     * @name keepMarkerCentered
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {boolean}
     */
    keepMarkerCentered: boolean;
    /**
     * The anchor of the marker, relative to center of the expanded size. Defaults to `'bottom'`.
     *
     * @name markerAnchor
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {Anchor}
     */
    markerAnchor: Anchor;
    /**
     * A client-defined callback that is triggered when the "Save" button is clicked in the editing interface,
     * and gives access to the adjusted marker coordinate.
     *
     * @name onSaveMarkerLocation
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {function}
     */
    onSaveMarkerLocation: (coordinate: [number, number]) => void;
    /** @section {Input data} */
    /**
     * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.
     *
     * If not explicitly set on the component, this will reference the value in the global config object.
     *
     * @name accessToken
     * @instance
     * @memberof MapboxAddressMinimap
     * @example
     * ```typescript
     * minimap.accessToken = 'pk.my-mapbox-access-token';
     * ```
     */
    get accessToken(): string;
    set accessToken(newToken: string);
    /**
     * A [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) Feature representing
     * a [Point](https://geojson.org/geojson-spec.html#point) geometry.
     *
     * The minimap is hidden unless
     * {@link MapboxAddressMinimap#feature} is truthy. Setting {@link MapboxAddressMinimap#feature}
     * to `null` hides the component.
     *
     * @name feature
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {Feature}
     */
    get feature(): GeoJSON.Feature<GeoJSON.Point>;
    set feature(feature: GeoJSON.Feature<GeoJSON.Point>);
    get template(): HTMLTemplateElement;
    get templateStyle(): string;
    get templateUserStyle(): string;
    /** @section {Appearance} */
    /**
     * If `true`, the map will have an image toggle between Map and Satellite styles.
     *
     * @name satelliteToggle
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {boolean}
     */
    get satelliteToggle(): boolean;
    set satelliteToggle(val: boolean);
    /**
     * The {@link Theme} to use for styling the editing interface.
     *
     * @name theme
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {Theme}
     * @example
     * ```typescript
     * autofill.theme = {
     *   variables: {
     *     colorPrimary: 'myBrandRed'
     *   }
     * };
     * ```
     */
    get theme(): Theme;
    set theme(theme: Theme);
    /**
     * Custom adjust button text appearing on the map.
     * If not provided, the default text will be used.
     *
     * @name adjustBtnText
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {string}
     */
    get adjustBtnText(): string;
    set adjustBtnText(val: string);
    /**
     * Custom save button text appearing on the map, when marker adjustment is enabled.
     * If not provided, the default text will be used.
     *
     * @name saveBtnText
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {string}
     */
    get saveBtnText(): string;
    set saveBtnText(val: string);
    /**
     * Custom cancel button text appearing on the map, when marker adjustment is enabled.
     * If not provided, the default text will be used.
     *
     * @name cancelBtnText
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {string}
     */
    get cancelBtnText(): string;
    set cancelBtnText(val: string);
    /**
     * The map style to use, either `'default'` or `'satellite'`. The default map
     * style is configurable with {@link MapboxAddressMinimap#defaultMapStyle}.
     *
     * @name mapStyleMode
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {'default' | 'satellite'}
     */
    get mapStyleMode(): MapStyleMode;
    set mapStyleMode(styleMode: MapStyleMode);
    /**
     * The map style to use for the default map style. Defaults to `['mapbox', 'streets-v11']`.
     *
     * @name defaultMapStyle
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {[string, string]}
     */
    get defaultMapStyle(): [string, string];
    set defaultMapStyle(style: [string, string]);
    /**
     * Custom footer text appearing below the map, when marker adjustment is enabled.
     * If `true` or left undefined, the default footer text will be used.
     * If `false`, the footer will not be shown.
     *
     * @name footer
     * @instance
     * @memberof MapboxAddressMinimap
     * @type {boolean | string}
     */
    get footer(): boolean | string;
    set footer(val: boolean | string);
    get container(): HTMLElement | null;
    set container(newContainer: HTMLElement | null);
    /** @section {Methods} */
    /**
     * If {@link MapboxAddressMinimap#feature} is truthy, show the minimap.
     */
    show(): void;
    /**
     * Hide the minimap.
     */
    hide(): void;
    connectedCallback(): void;
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
}
declare global {
    interface Window {
        MapboxAddressMinimap: typeof MapboxAddressMinimap;
    }
}
