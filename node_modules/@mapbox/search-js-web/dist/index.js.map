{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/dom.ts", "../src/utils/class_name_transformers.ts", "../src/utils/index.ts", "../src/utils/map.ts", "../src/constants.ts", "../src/components/HTMLScopedElement.ts", "../src/theme.ts", "../src/utils/popover.ts", "../src/MapboxHTMLEvent.ts", "../src/utils/aria/messages.ts", "../src/utils/aria/index.ts", "../src/utils/listbox.ts", "../src/components/MapboxSearchListbox.ts", "../src/utils/autofill.ts", "../src/confirmAddress.ts", "../src/components/MapboxAddressConfirmation.ts", "../src/config.ts", "../src/utils/confirmation.ts", "../src/utils/contribute.ts", "../src/components/MapboxAddressConfirmationFeature.ts", "../src/components/MapboxAddressConfirmationNoFeature.ts", "../src/components/MapboxAddressAutofill.ts", "../src/utils/detect_browser_autofill.ts", "../src/components/MapboxSearchBox.ts", "../src/utils/localization.ts", "../src/components/MapboxAddressMinimap.ts", "../src/utils/minimap.ts", "../src/autofill.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/triple-slash-reference */\n/* eslint-disable spaced-comment */\n\n/// <reference path=\"./types/custom_elements.d.ts\" />\n/// <reference path=\"./types/typehead.d.ts\" />\n\nimport './components/MapboxSearchListbox';\nimport './components/MapboxAddressConfirmationFeature';\nimport './components/MapboxAddressConfirmationNoFeature';\n\nexport {\n  MapboxAddressConfirmation,\n  AddressConfirmOptions,\n  ConfirmationMinimapOptions\n} from './components/MapboxAddressConfirmation';\n\nexport { MapboxAddressAutofill } from './components/MapboxAddressAutofill';\nexport { MapboxSearchBox } from './components/MapboxSearchBox';\n\nexport { MapboxAddressMinimap } from './components/MapboxAddressMinimap';\n\nexport { MapboxHTMLEvent } from './MapboxHTMLEvent';\nexport { Theme } from './theme';\n\nexport {\n  autofill,\n  AddressAutofillCollectionOptions,\n  AddressAutofillCollectionOptions as AutofillCollectionOptions // alias for backward compatibility\n} from './autofill';\nexport { confirmAddress } from './confirmAddress';\n\nexport { MapStyleMode, Anchor } from './utils/minimap';\nexport { AddressConfirmShowResult } from './utils/confirmation';\nexport {\n  getFormAutofillValues,\n  getAutofillSearchText,\n  AutofillValueMap\n} from './utils/autofill';\nexport { PopoverOptions } from './utils/popover';\n\nexport { config } from './config';\n", "/**\n * Used below in {@link createCSSStyleSheet}.\n */\nconst subdoc = document.implementation.createHTMLDocument();\n\nexport function bindElements<\n  Binding extends { [key: string | symbol | number]: Element }\n>(root: Element, elements: { [key in keyof Binding]: string }): Binding {\n  const binding: Binding = {} as Binding;\n  for (const [key, selector] of Object.entries(elements)) {\n    binding[key as keyof Binding] = root.querySelector(selector);\n  }\n\n  return binding;\n}\n\n/**\n * Gets all child elements for a given node.\n */\nexport function getChildElements(node: Node): HTMLElement[] {\n  return Array.from(node.childNodes || []).filter(\n    (el) => el.nodeType === Node.ELEMENT_NODE\n  ) as HTMLElement[];\n}\n\n/**\n * Creates an HTML element from a string and returns it.\n */\nexport function createElementFromString<T extends Element>(\n  innerHTML: string\n): T {\n  const template = document.createElement('template');\n  template.innerHTML = innerHTML;\n  return template.content.firstElementChild as T;\n}\n\n/**\n * Returns a {@link CSSStyleSheet} that can be used to traverse a\n * CSS file.\n *\n * NOTE: We need to use a sub-document to avoid the styles being\n * applied to the current page.\n */\nexport function createCSSStyleSheet(text: string): CSSStyleSheet {\n  const style = subdoc.createElement('style');\n  style.textContent = text;\n  subdoc.head.appendChild(style);\n  return style.sheet;\n}\n\n/**\n * Returns if the property has \"display: none\" set on itself.\n *\n * Reference: https://stackoverflow.com/questions/19669786/check-if-element-is-visible-in-dom\n */\nexport function isVisible(element: HTMLElement): boolean {\n  const style = window.getComputedStyle(element);\n  return style.display !== 'none';\n}\n\nexport type InputFormElement =\n  | HTMLInputElement\n  | HTMLSelectElement\n  | HTMLTextAreaElement;\n\ntype ReactInputEvent = Event & {\n  simulated: boolean;\n};\n\ntype ReactInputWrapperState = InputFormElement & {\n  _valueTracker?: {\n    getValue: () => string;\n    setValue: (value: string) => void;\n    stopTracking: () => void;\n  };\n};\n\n/**\n * Sets the value of the given input element and triggers an `input` event.\n *\n * This should also work for React, which overrides the `value` setter with\n * a custom tracker. Due to this, a naive `input.value = value` will not\n * work correctly in React.\n *\n * Reference: https://github.com/facebook/react/blob/c88fb49d37fd01024e0a254a37b7810d107bdd1d/packages/react-dom/src/client/inputValueTracking.js#L53\n * Reference: https://github.com/facebook/react/issues/11488\n */\nexport function setValue(\n  input: InputFormElement | undefined,\n  value: string\n): void {\n  if (!input) {\n    return;\n  }\n\n  const set = Object.getOwnPropertyDescriptor(\n    input.constructor.prototype,\n    'value'\n  ).set;\n  set.call(input, value);\n\n  // Make this work in React 16+.\n  const wrapperState = input as ReactInputWrapperState;\n  if (wrapperState._valueTracker) {\n    wrapperState._valueTracker.setValue('');\n  }\n\n  const onInputEvent = new Event('input', {\n    bubbles: true\n  }) as ReactInputEvent;\n  onInputEvent.simulated = true;\n\n  input.dispatchEvent(onInputEvent);\n\n  const onChangeEvent = new Event('change', {\n    bubbles: true\n  }) as ReactInputEvent;\n  onChangeEvent.simulated = true;\n\n  input.dispatchEvent(onChangeEvent);\n}\n\n/**\n * Pre-calculate the size of an element, handling cases where the element is not yet rendered\n * @param element - The element to measure\n * @param deep - If true, include node's descendents in calculation. Defaults to false.\n * @returns Object with height and width properties as numbers\n */\nexport function getElementSize(\n  element: HTMLElement,\n  deep = false\n): {\n  height: number;\n  width: number;\n} {\n  let width: number;\n  let height: number;\n  const elementRect = element.getBoundingClientRect();\n  if (\n    element.style.display === 'none' ||\n    (elementRect.height === 0 && elementRect.width === 0)\n  ) {\n    const clone = element.cloneNode(deep) as HTMLElement;\n    element.parentElement.appendChild(clone);\n    clone.style.setProperty('display', 'block', 'important');\n    const cloneRect = clone.getBoundingClientRect();\n    width = cloneRect.width;\n    height = cloneRect.height;\n    clone.style.setProperty('display', 'none');\n    clone.remove();\n  } else {\n    width = elementRect.width;\n    height = elementRect.height;\n  }\n  return {\n    height: Math.floor(height),\n    width: Math.floor(width)\n  };\n}\n\n/**\n * Adds a style to the current page document for the root CSS from the Mapbox search-js-web package.\n */\nexport function addDocumentStyle(css: string): void {\n  const style = document.createElement('style');\n  style.innerHTML = css;\n  document.head.appendChild(style);\n}\n", "import { createCSSStyleSheet } from './dom';\n\n/**\n * W3C spec:\n *\n * In CSS, identifiers (including element names, classes, and IDs in selectors)\n * can contain only the characters [a-z0-9] and ISO 10646 characters U+00A0 and\n * higher, plus the hyphen (-) and the underscore (_); they cannot start with a\n * digit, or a hyphen followed by a digit. Identifiers can also contain escaped\n * characters and any ISO 10646 character as a numeric code (see next item).\n *\n * For instance, the identifier \"B&W?\" may be written as \"B&W?\" or \"B\\26 W\\3F\".\n *\n * Reference: https://stackoverflow.com/questions/448981/which-characters-are-valid-in-css-class-names-selectors\n */\nconst IDENTIFIER_REGEX = new RegExp('[_a-zA-Z]+[_a-zA-Z0-9-]*', 'g');\nconst CLASS_NAME_REGEX = new RegExp(`\\\\.${IDENTIFIER_REGEX.source}`, 'g');\n\n/**\n * Of the format @IDENFIFIER (RULE) { }\n *\n * Only catches the media and supports identifiers.\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule\n */\nconst CONDITION_RULE_REGEX = new RegExp(\n  `^\\\\s*(@(?:media|supports)[^{]*){(.*)}\\\\s*$`\n);\n\nexport function transformClassSelectors(\n  css: string,\n  transform: (className: string) => string\n): string {\n  return css.replace(CLASS_NAME_REGEX, (className: string) => {\n    return '.' + transform(className.slice(1));\n  });\n}\n\n/**\n * Returns a version of the CSS string with each class name transformed\n * by {@link transform}.\n *\n * The main reason why this function exists is to allow for CSS class\n * encapsulation without Shadow DOM.\n */\nexport function transformCSSClassRules(\n  text: string,\n  transform: (className: string) => string\n): string {\n  // Create a CSSStyleSheet so we can traverse the CSS rules,\n  // without having to parse ourselves.\n  const sheet = createCSSStyleSheet(text);\n  const rules = sheet.cssRules;\n\n  /**\n   * No guarantees of in-place mutation.\n   */\n  function transformCSSRule(rule: CSSRule): string {\n    /**\n     * [CSSStyleRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleRule)\n     * represents a single CSS declaration block, like `h1 { color: red; }`.\n     *\n     * Make sure to transform the \"selector\", which in the example above is \"h1\".\n     */\n    if (rule instanceof CSSStyleRule) {\n      const selector = transformClassSelectors(rule.selectorText, transform);\n      return `${selector} { ${rule.style.cssText} }`;\n    }\n\n    /**\n     * Condition-rules are like `@media print { ... }`, or `@supports (display: grid) { ... }`.\n     *\n     * This should be covered by [CSSConditionRule](https://developer.mozilla.org/en-US/docs/Web/API/CSSConditionRule)\n     * however browser support for CSSConditionRule is not great: namely, Safari\n     * versions earlier than 14.1 (early 2021) do not support it.\n     *\n     * Because of this, we need to traverse the text of the at-rule with\n     * a regular expression.\n     *\n     * Useful helper: https://regexr.com/\n     */\n    const atRule = CONDITION_RULE_REGEX.exec(rule.cssText.split('\\n').join(''));\n    if (atRule && atRule.length > 2) {\n      const rule = atRule[1];\n      const contents = atRule[2];\n\n      // Recursively transform the contents of the at-rule.\n      return `${rule} { ${transformCSSClassRules(contents, transform)} }`;\n    }\n\n    /**\n     * Otherwise, just pass through fonts, animations, etc...\n     */\n    return rule.cssText;\n  }\n\n  // Construct a new CSS string by traversing the rules and serializing\n  // them to a string.\n  let style = '';\n  for (const rule of Array.from(rules)) {\n    style += transformCSSRule(rule) + '\\n\\n';\n  }\n\n  return style.trim();\n}\n\n/**\n * Manipulates {@param content} in place, with each class attribute transformed\n * by {@link transform}.\n *\n * The main reason why this function exists is to allow for CSS class\n * encapsulation without Shadow DOM.\n */\nexport function transformDOMClassAttributes(\n  content: HTMLElement,\n  transform: (className: string) => string\n): HTMLElement {\n  // Perform the transformation on each class attribute in-place,\n  // on the clone.\n  const elements = Array.from(content.querySelectorAll('[class]'));\n  // Add the current node!\n  elements.push(content);\n\n  for (const element of elements) {\n    const { classList } = element;\n    for (const className of Array.from(classList)) {\n      classList.remove(className);\n      classList.add(transform(className));\n    }\n  }\n\n  // Return the element.\n  return content;\n}\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { SessionToken } from '@mapbox/search-js-core';\nimport { MAPBOX_DOMAINS } from '../constants';\n\n/**\n * Returns a random ID that is valid as a CSS identifier.\n *\n * CSS identifiers cannot start with a number, so we prefix the ID with `mbx`.\n */\nexport function randomValidID(): string {\n  return `mbx` + new SessionToken().id.slice(0, 8);\n}\n\n/**\n * Try to parse as a JSON object, returning `null` if it fails.\n */\nexport function tryParseJSON<T>(json: string): T | null {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    return null;\n  }\n}\n\nexport function deepEquals<T>(a: T, b: T): boolean {\n  if (a == null || b == null) {\n    return a === b;\n  }\n\n  if (typeof a !== 'object' || typeof b !== 'object') {\n    return a === b;\n  }\n\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  for (const key of aKeys) {\n    if (!deepEquals(a[key], b[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Round a number to a given number of digits after the decimal\n * @param num - Number to round\n * @param decimalPlaces - Number of places after the decimal to round to\n * @returns Rounded decimal number\n */\nexport function round(num: number, decimalPlaces: number): number {\n  const factorOfTen = Math.pow(10, decimalPlaces);\n  return Math.round(num * factorOfTen) / factorOfTen;\n}\n\n/**\n * Returns true if a hostname matches a local server protocol\n * @param hostname - A string representing window.location.hostname\n * @returns A boolean value\n */\nexport function isLocalServer(hostname: string): boolean {\n  return Boolean(\n    hostname.match(\n      /localhost|[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|::1|\\.local|^$/gi\n    )\n  );\n}\n\n/**\n * Returns true if a hostname matches a Mapbox domain\n * @param hostname - A string representing window.location.hostname\n * @returns A boolean value\n */\nexport function isMapboxDomain(hostname: string): boolean {\n  return Boolean(MAPBOX_DOMAINS.some((domain) => hostname.includes(domain)));\n}\n", "import mapboxgl from 'mapbox-gl';\n\n/**\n * This is slightly higher than the default value of 1.2.\n * https://docs.mapbox.com/mapbox-gl-js/api/map/#map#flyto\n * We use a high speed value for cypress tests to increase test speed and improve test stability.\n */\nexport const FLY_TO_SPEED = 1.4;\n\n/**\n * Gets the center/zoom for a given bounding box.\n *\n * @param delta - Subtracted from the zoom level so users can fully see\n * the bounding box. This is a hack to add padding.\n */\nexport function bboxViewport(\n  map: mapboxgl.Map,\n  bounds: mapboxgl.LngLatBoundsLike,\n  delta = 0.5\n): mapboxgl.FlyToOptions {\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const { center, zoom } = map.cameraForBounds(bounds)!;\n  const transformedZoom = Math.max(zoom - delta, 0);\n\n  return {\n    center,\n    zoom: transformedZoom,\n    speed: FLY_TO_SPEED\n  };\n}\n\n/**\n * Gets the maximum zoom level for a [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/)\n * or [Mapbox Geocoding API](https://docs.mapbox.com/api/search/geocoding/) place type.\n *\n * @returns The maximum zoom level for the given place type, `16` if the type is not supported.\n */\nexport function getMaxZoom(placeType: string): number {\n  switch (placeType) {\n    case 'street':\n      return 15;\n    case 'neighborhood':\n    case 'postcode':\n    case 'locality':\n    case 'oaza':\n      return 14;\n    case 'place':\n    case 'city':\n      return 13;\n    case 'district':\n      return 9;\n    case 'region':\n    case 'prefecture':\n      return 6;\n    case 'country':\n      return 4;\n    default:\n      return 16;\n  }\n}\n\n/**\n * Gets the base URL for the Static Images API for a given user style\n * {@link https://docs.mapbox.com/api/maps/static-images/}\n * @param username The username of the account to which the style belongs\n * @param styleId The ID of the style from which to create a static map\n * @returns\n */\nexport function getStaticBaseUrl(username: string, styleId: string): string {\n  return `https://api.mapbox.com/styles/v1/${username}/${styleId}/static/`;\n}\n", "import { createElementFromString } from './utils/dom';\nimport { getStaticBaseUrl } from './utils/map';\nimport closeIcon from './icons/close.svg';\nimport loadingIcon from './icons/loading.svg';\n\nexport const STATIC_BASE_URL_SATELLITE = getStaticBaseUrl(\n  'mapbox',\n  'satellite-streets-v11'\n);\n\nexport const AUTOFILL_SKU_TOKEN_PREFIX = '20d01';\n\nexport const MAPBOX_DOMAINS = ['mapbox.com', 'mapbox.cn', 'tilestream.net'];\n\nexport const LISTBOX_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MapboxSearch\">\n    <div class=\"Label\" role=\"label\" aria-live=\"polite\" aria-atomic=\"true\">\n    </div>\n    <div class=\"Results\" aria-hidden=\"true\">\n      <div class=\"ResultsList\" role=\"listbox\">\n      </div>\n      <div class=\"ResultsAttribution\" aria-hidden=\"true\">\n        <a href=\"https://www.mapbox.com/search-service\" target=\"_blank\" tabindex=\"-1\">\n          Powered by Mapbox\n        </a>\n      </div>\n    </div>\n  </div>\n</template>\n`);\n\nexport const LISTBOX_SUGGESTION_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"Suggestion\" role=\"option\" tabindex=\"-1\">\n    <div class=\"SuggestionIcon\" aria-hidden=\"true\"></div>\n    <div class=\"SuggestionText\">\n      <div class=\"SuggestionName\"></div>\n      <div class=\"SuggestionDesc\"></div>\n    </div>\n  </div>\n</template>\n`);\n\nexport const SEARCHBOX_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"SearchBox\">\n    <div class=\"SearchIcon\"></div>\n    <input class=\"Input\" type=\"text\" />\n    <div class=\"ActionIcon\">\n      <button aria-label=\"Clear\" class=\"ClearBtn\">${closeIcon}</button>\n      <div class=\"LoadingIcon\">${loadingIcon}</div>\n    </div>\n  </div>\n</template>\n`);\n", "/* eslint-disable custom-elements/expose-class-on-global */\n/* eslint-disable custom-elements/define-tag-after-class-definition */\nimport {\n  transformClassSelectors,\n  transformCSSClassRules,\n  transformDOMClassAttributes\n} from '../utils/class_name_transformers';\n\nimport { randomValidID } from '../utils';\n\n/**\n * Custom HTML element that uses the \"Scoped DOM\" approach,\n * which is not really Shadow DOM, but a way to encapsulate CSS classes\n * without Shadow DOM.\n *\n * This is a workaround for the fact that ARIA attributes are identified by\n * IDs, and cannot be shared between Shadow DOM and non-Shadow DOM (Light DOM)\n * elements due to encapsulation.\n *\n * Examples are an <input> element and its corresponding popover.\n *\n * The \"Scoped DOM\" approach is to encapsulate CSS classes by transforming\n * the class attribute of each element, prefixing each class with a\n * random UUID.\n *\n * Goals of the \"Scoped DOM\":\n *\n * - Once the [Accessibility Object Model (AOM)](https://wicg.github.io/aom/explainer.html) is finalized,\n *   replace all uses of {@link MapboxHTMLScopedElement} with {@link MapboxHTMLShadowElement}, and use\n *   AOM instead of IDREFs for ARIA attributes.\n *\n * - The Scoped DOM should be self-contained and work well enough that we don't\n *   need to constantly work around it.\n *\n * - The Scoped DOM should have extensive testing.\n */\nexport class HTMLScopedElement<\n  Events extends { [key: number | string | symbol]: Event } = Record<\n    string,\n    Event\n  >\n> extends HTMLElement {\n  // Seed to use for class name prefixing.\n  #seed = randomValidID();\n\n  protected get template(): HTMLTemplateElement {\n    return null;\n  }\n\n  protected get templateStyle(): string {\n    return null;\n  }\n\n  protected get templateUserStyle(): string {\n    return null;\n  }\n\n  #templateUserStyleElement: HTMLStyleElement;\n\n  /**\n   * `clonedCallback` should be a part of the Web Components spec, but sadly\n   * it is not.\n   *\n   * This is detected in {@link connectedCallback} below if the seed has changed.\n   */\n  clonedCallback(oldSeed: string, newSeed: string): void {\n    // New transform function that replaces any instances of the old\n    // seed with the new one.\n    const seedTransform = (className: string) =>\n      className.replace(oldSeed, newSeed);\n\n    transformDOMClassAttributes(this, seedTransform);\n\n    const styles = Array.from(this.querySelectorAll<HTMLStyleElement>('style'));\n    for (const style of styles) {\n      style.textContent = transformClassSelectors(\n        style.textContent,\n        seedTransform\n      );\n    }\n\n    // Find and repopulate #templateUserStyleElement.\n    if (styles.length) {\n      this.#templateUserStyleElement = styles[styles.length - 1];\n    }\n\n    // Replace id prefix for all sub-nodes\n    const nodesWithId = Array.from(this.querySelectorAll(`[id^=\"${oldSeed}\"]`));\n    for (const node of nodesWithId) {\n      node.id = node.id.replace(oldSeed, newSeed);\n    }\n  }\n\n  connectedCallback(): void {\n    // Return if we already have children.\n    if (this.childElementCount > 0) {\n      const oldSeed = this.dataset.seed;\n      const newSeed = this.#seed;\n\n      // If we have a different seed than before, say from a clone,\n      // then we need to update any templates and styles.\n      if (oldSeed && oldSeed !== newSeed) {\n        this.clonedCallback(oldSeed, newSeed);\n\n        // Finally, make sure the dataset has the new seed.\n        this.dataset.seed = newSeed;\n      }\n\n      return;\n    }\n\n    this.dataset.seed = this.#seed;\n\n    // Use the Light DOM to contain our inner elements,\n    // and do CSS class obfuscation in the \"Scoped DOM.\"\n    const template = this.template;\n    if (template) {\n      const element = this.prepareTemplate(template);\n      this.appendChild(element);\n    }\n\n    const templateStyle = this.templateStyle;\n    if (templateStyle) {\n      const style = document.createElement('style');\n      style.textContent = this.prepareCSS(templateStyle);\n      this.appendChild(style);\n    }\n\n    const userStyle = document.createElement('style');\n    if (this.templateUserStyle) {\n      userStyle.textContent = this.prepareCSS(this.templateUserStyle);\n    }\n    this.appendChild(userStyle);\n    this.#templateUserStyleElement = userStyle;\n  }\n\n  /**\n   * Transform function for {@link transformCSSClassRules} and\n   * {@link transformDOMClassAttributes}.\n   */\n  #transform = (className: string): string => {\n    return `${this.#seed}--${className}`;\n  };\n\n  prepareTemplate(template: HTMLTemplateElement): HTMLElement {\n    const element = template.content.firstElementChild;\n    return transformDOMClassAttributes(\n      element.cloneNode(true) as HTMLElement,\n      this.#transform\n    );\n  }\n\n  prepareCSS(css: string): string {\n    return transformCSSClassRules(css, this.#transform);\n  }\n\n  updateTemplateUserStyle(style: string): void {\n    if (!this.#templateUserStyleElement) {\n      return;\n    }\n    this.#templateUserStyleElement.textContent = this.prepareCSS(style);\n  }\n\n  querySelector<E extends Element = Element>(selectors: string): E {\n    return super.querySelector(\n      transformClassSelectors(selectors, this.#transform)\n    );\n  }\n\n  querySelectorAll<E extends Element = Element>(\n    selectors: string\n  ): NodeListOf<E> {\n    return super.querySelectorAll(\n      transformClassSelectors(selectors, this.#transform)\n    );\n  }\n\n  addEventListener<K extends keyof Events>(\n    type: K,\n    listener: (this: HTMLFormElement, ev: Events[K]) => unknown,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void {\n    super.addEventListener(type, listener, options);\n  }\n\n  removeEventListener<K extends keyof Events>(\n    type: K,\n    listener: (this: HTMLFormElement, ev: Events[K]) => unknown,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void {\n    super.removeEventListener(type, listener, options);\n  }\n\n  dispatchEvent<K extends keyof Events>(event: Events[K]): boolean {\n    return super.dispatchEvent(event);\n  }\n}\n", "import closeIcon from './icons/close.svg';\nimport questionIcon from './icons/question.svg';\nimport markerIcon from './icons/marker.svg';\nimport streetIcon from './icons/street.svg';\nimport addressMarkerIcon from './icons/addressMarker.svg';\nimport searchIcon from './icons/search.svg';\n\nimport { version } from '../package.json';\nconst styleToggleSatelliteImg = `https://api.mapbox.com/search-js/v${version}/img/style-toggle-satellite.jpg`;\nconst styleToggleDefaultImg = `https://api.mapbox.com/search-js/v${version}/img/style-toggle-default.jpg`;\n\n/**\n * Reference:\n * https://getbootstrap.com/docs/5.0/layout/breakpoints/\n */\nexport const MOBILE_BREAKPOINT = 768 - 1;\nconst MOBILE_MEDIA_QUERY = `@media only screen and (max-width: ${MOBILE_BREAKPOINT}px)`;\n\n/**\n * Currently, the only expression supported is\n * `['mobile', mobile_value, tablet_and_desktop_value]`.\n *\n * @typedef Expression\n */\ntype Expression = ['mobile', string, string];\n\n/**\n * `ThemeVariables` are a collection of CSS variables that style Control Theme API\n * elements.\n *\n * @typedef ThemeVariables\n */\nexport interface ThemeVariables {\n  /** @section {Sizing} */\n\n  /**\n   * Unit is the base font size and can be referenced in other variables as multiples of `1em`.\n   *\n   * Analogous to [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size).\n   */\n  unit?: string | Expression;\n  /**\n   * Unit header is a derivative of `unit` and is used for modal headers.\n   *\n   * Analogous to [`font-size`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-size).\n   */\n  unitHeader?: string | Expression;\n\n  /**\n   * Minimum width of elements such as modals and listboxes.\n   *\n   * Analogous to CSS [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\n   */\n  minWidth?: string;\n  /**\n   * Spacing between items in an element.\n   *\n   * Analogous to CSS [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\n   */\n  spacing?: string;\n  /**\n   * Padding of items in an element.\n   *\n   * Analogous to CSS [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\n   */\n  padding?: string;\n  /**\n   * Padding of powered by mapbox label in footer of search listbox.\n   *\n   * Analogous to CSS [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\n   */\n  paddingFooterLabel?: string;\n  /**\n   * Padding for contents of modal elements.\n   *\n   * Analogous to CSS [`<length>`](https://developer.mozilla.org/en-US/docs/Web/CSS/length).\n   */\n  paddingModal?: string;\n\n  /** @section {Colors} */\n\n  /**\n   * Color of the primary text.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: dark gray\n   */\n  colorText?: string;\n  /**\n   * Color of the primary accent color.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: variant of blue\n   */\n  colorPrimary?: string;\n  /**\n   * Color of the secondary accent color.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: blue-gray\n   */\n  colorSecondary?: string;\n\n  /**\n   * Background color for elements such as modals and listboxes.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: white\n   */\n  colorBackground?: string;\n  /**\n   * Background color for items on hover.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: light gray\n   */\n  colorBackgroundHover?: string;\n  /**\n   * Background color for items on press.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: dark gray\n   */\n  colorBackgroundActive?: string;\n\n  /**\n   * Backdrop color of body content behind modals.\n   *\n   * Analogous to CSS [`color`](https://developer.mozilla.org/en-US/docs/Web/CSS/color).\n   * **Default**: black with alpha value\n   */\n  colorBackdrop?: string;\n\n  /** @section {Borders and box shadows} */\n\n  /**\n   * Border color of elements such as modals and listboxes.\n   *\n   * Analogous to CSS [`border`](https://developer.mozilla.org/en-US/docs/Web/CSS/border).\n   */\n  border?: string;\n  /**\n   * Border radius of elements such as modals and listboxes.\n   *\n   * Analogous to CSS [`border-radius`](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius).\n   */\n  borderRadius?: string;\n  /**\n   * Box shadow of elements such as modals and listboxes.\n   *\n   * Analogous to CSS [`box-shadow`](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow).\n   */\n  boxShadow?: string;\n\n  /** @section {Typography} */\n\n  /**\n   * Line height.\n   *\n   * Analogous to CSS [`line-height`](https://developer.mozilla.org/en-US/docs/Web/CSS/line-height).\n   * **Default**: 1.2\n   */\n  lineHeight?: string;\n  /**\n   * Font family.\n   *\n   * Analogous to CSS [`font-family`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family).\n   * **Default**: Sans-serif [system font stack](https://systemfontstack.com/)\n   */\n  fontFamily?: string;\n  /**\n   * Font weight for body text.\n   *\n   * Analogous to CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight).\n   * **Default**: normal\n   */\n  fontWeight?: string;\n  /**\n   * Font weight for subheadings.\n   *\n   * Analogous to CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight).\n   * **Default**: 600\n   */\n  fontWeightSemibold?: string;\n  /**\n   * Font weight for headings and item titles.\n   *\n   * Analogous to CSS [`font-weight`](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight).\n   * **Default**: bold\n   */\n  fontWeightBold?: string;\n\n  /** @section {Transitions} */\n\n  /**\n   * The duration to use for listbox animations.\n   *\n   * Analogous to CSS [`<time>`](https://developer.mozilla.org/en-US/docs/Web/CSS/time).\n   * **Default**: `150ms`\n   */\n  duration?: string;\n  /**\n   * The timing function to use for listbox animations.\n   *\n   * Analogous to CSS [`<easing-function>`](https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function).\n   * **Default**: `ease-out`\n   */\n  curve?: string;\n}\n\n/**\n * `ThemeIcons` are [SVG icons](https://developer.mozilla.org/en-US/docs/Web/SVG)\n * that are used in Control Theme API elements.\n *\n * Roughly, icon names and their defaults are the same as\n * [Mapbox's Assembly](https://labs.mapbox.com/assembly/icons/).\n *\n * Values must be valid SVG plain-text. Unless otherwise noted,\n * icons should be 18px in size and have appropriate dimensions set.\n *\n * Icons can also be filled with 'currentColor'.\n *\n * @typedef ThemeIcons\n * @example\n * ```typescript\n * const icons = {\n *   close: `\n * <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n * <svg viewBox=\"0 0 18 18\" xmlns=\"http://www.w3.org/2000/svg\">\n *   <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M3.79289 3.79289C4.18342 3.40237 4.81658 3.40237 5.20711 3.79289L9 7.58579L12.7929 3.79289C13.1834 3.40237 13.8166 3.40237 14.2071 3.79289C14.5976 4.18342 14.5976 4.81658 14.2071 5.20711L10.4142 9L14.2071 12.7929C14.5976 13.1834 14.5976 13.8166 14.2071 14.2071C13.8166 14.5976 13.1834 14.5976 12.7929 14.2071L9 10.4142L5.20711 14.2071C4.81658 14.5976 4.18342 14.5976 3.79289 14.2071C3.40237 13.8166 3.40237 13.1834 3.79289 12.7929L7.58579 9L3.79289 5.20711C3.40237 4.81658 3.40237 4.18342 3.79289 3.79289Z\" fill=\"currentColor\"/>\n * </svg>\n * `\n * }\n * ```\n */\nexport interface ThemeIcons {\n  /**\n   * Close icon.\n   */\n  close?: string;\n  /**\n   * Question mark icon.\n   */\n  question?: string;\n\n  /**\n   * Icon for map markers. Can be any size.\n   */\n  marker?: string;\n\n  /**\n   * Icon for streets results in search list box.\n   */\n  street?: string;\n\n  /**\n   * Icon for address results in search list box.\n   */\n  addressMarker?: string;\n\n  /**\n   * Icon for Search Box input.\n   */\n  search?: string;\n}\n\n/**\n * `ThemeImages` are raster images that are used in Control Theme API elements.\n *\n * There are currently only two images, \"toggle default\" and \"toggle satellite,\"\n * which specify images for a Map/Satellite toggle button.\n *\n * Values must be valid URLs accessible by the expected browser environment. [Data URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs)\n * and [Blob URLs](https://developer.mozilla.org/en-US/docs/Web/API/URL/createObjectURL) are also supported.\n *\n * @typedef ThemeImages\n */\nexport interface ThemeImages {\n  /**\n   * Image for the \"Map\" of the Map/Satellite toggle button.\n   */\n  styleToggleDefault?: string;\n  /**\n   * Image for the \"Satellite\" of the Map/Satellite toggle button.\n   */\n  styleToggleSatellite?: string;\n}\n\n/**\n * The Control Theme API is a way to apply your own design system to\n * Mapbox Search JS Web elements.\n *\n * Control themes use a combination of CSS variables, custom scoped CSS, and\n * SVG icons.\n *\n * @typedef Theme\n * @example\n * ```typescript\n * const theme = {\n *   variables: {\n *     fontFamily: 'Avenir, sans-serif',\n *     unit: '14px',\n *     padding: '0.5em',\n *     borderRadius: '0',\n *     boxShadow: '0 0 0 1px silver',\n *   }\n * };\n *\n * autofill({ theme });\n * ```\n */\nexport interface Theme {\n  /**\n   * CSS variables to be applied to the control.\n   */\n  variables?: ThemeVariables;\n  /**\n   * SVG icon overrides to be applied to the control.\n   */\n  icons?: ThemeIcons;\n  /**\n   * Raster image URLs to be applied to the control.\n   */\n  images?: ThemeImages;\n  /**\n   * Optional CSS text to be inserted into Scoped CSS elements. As such, any\n   * CSS will not interact with the rest of the page.\n   *\n   * TODO: Class names are element-specific and have yet to be standardized. Breaking\n   * changes are likely and will be flagged in CHANGELOG.md.\n   */\n  cssText?: string;\n}\n\nconst DEFAULT_THEME: Theme = {\n  variables: {\n    // Added as font size on container, so em references this value.\n    unit: ['mobile', '16px', '14px'],\n    unitHeader: ['mobile', '24px', '18px'],\n\n    minWidth: 'min(300px, 100vw)',\n    spacing: '0.75em',\n    padding: '0.5em 0.75em',\n    paddingFooterLabel: '0.5em 0.75em',\n    paddingModal: '1.25em',\n\n    colorText: 'rgba(0, 0, 0, 0.75)',\n    colorPrimary: '#4264FB',\n    colorSecondary: '#667F91',\n\n    colorBackground: '#fff',\n    colorBackgroundHover: '#f5f5f5',\n    colorBackgroundActive: '#f0f0f0',\n\n    colorBackdrop: 'rgba(102, 127, 145, 0.3)',\n\n    border: 'none',\n\n    borderRadius: '4px',\n    boxShadow: `\n      0 0 10px 2px rgba(0, 0, 0, 0.05),\n      0 0 6px 1px rgba(0, 0, 0, 0.1),\n      0 0 0 1px rgba(0, 0, 0, 0.1)\n    `,\n\n    lineHeight: '1.2em',\n    /**\n     * Reference:\n     * https://systemfontstack.com/\n     */\n    fontFamily: `\n      -apple-system, BlinkMacSystemFont,\n      avenir next, avenir,\n      segoe ui,\n      helvetica neue, helvetica,\n      Ubuntu, roboto, noto, arial, sans-serif\n    `,\n    fontWeight: 'normal',\n    fontWeightSemibold: '600',\n    fontWeightBold: 'bold',\n\n    duration: '150ms',\n    curve: 'ease-out'\n  },\n  icons: {\n    close: closeIcon,\n    question: questionIcon,\n    marker: markerIcon,\n    street: streetIcon,\n    addressMarker: addressMarkerIcon,\n    search: searchIcon\n  },\n  images: {\n    styleToggleDefault: styleToggleDefaultImg,\n    styleToggleSatellite: styleToggleSatelliteImg\n  }\n};\n\ntype CSSText = string;\n\n/**\n * Applies {@link Theme} to the given HTML element as CSS variables\n * in the style attribute.\n */\nexport function getThemeCSS(rootSelector: string, theme: Theme = {}): CSSText {\n  const variables = {\n    // Make sure to shallow apply default variables.\n    ...DEFAULT_THEME.variables,\n    ...(theme.variables || {})\n  };\n\n  let cssText = theme.cssText || '';\n  let rootVariables = '';\n\n  for (const [key, value] of Object.entries(variables)) {\n    // Is a literal, not an expression.\n    if (!Array.isArray(value)) {\n      rootVariables += `--${key}: ${value};`;\n      continue;\n    }\n\n    // Is an expression; only support \"mobile\" for now.\n    if (value[0] !== 'mobile') {\n      const valueStr = JSON.stringify(value);\n      throw new Error(\n        `Unsupported expression in theme variables: ${key} ${valueStr}`\n      );\n    }\n\n    const [, mobileValue, desktopValue] = value;\n\n    // On mobile, force the mobile value.\n    cssText += `${MOBILE_MEDIA_QUERY} { ${rootSelector} { --${key}: ${mobileValue} !important; } }`;\n    // Our default is still the desktop value.\n    rootVariables += `--${key}: ${desktopValue};`;\n  }\n\n  return cssText + `${rootSelector} { ${rootVariables} }`;\n}\n\nexport function getIcon<I extends keyof Theme['icons']>(\n  iconName: I,\n  theme: Theme = {}\n): string | undefined {\n  const icons = {\n    ...DEFAULT_THEME.icons,\n    ...(theme.icons || {})\n  };\n\n  const svgString = icons[iconName];\n  return svgString;\n}\n\nexport function getImage<I extends keyof Theme['images']>(\n  imageName: I,\n  theme: Theme = {}\n): string | undefined {\n  const images = {\n    ...DEFAULT_THEME.images,\n    ...(theme.images || {})\n  };\n\n  const imgString = images[imageName];\n  return imgString;\n}\n", "import {\n  computePosition,\n  autoUpdate,\n  ComputePositionConfig,\n  flip,\n  offset\n} from '@floating-ui/dom';\n\n/**\n * @typedef PopoverOptions\n */\nexport interface PopoverOptions {\n  /**\n   * Positions the popover above or below the reference element. Defaults to 'bottom-start'.\n   */\n  placement: 'top-start' | 'bottom-start';\n  /**\n   * If true, the popover will flip to the opposite side of the reference element to try to keep it in view when scrolling out of frame. Defaults to false.\n   */\n  flip: boolean;\n  /**\n   * The distance gap between the popover and the reference element. Defaults to 5px.\n   */\n  offset: number;\n}\n\n/**\n * Wrapper around floating-ui controls to manage popover positioning and lifecycle.\n */\nexport class Popover {\n  /**\n   * The element around which the popover is positioned, e.g. the `<input>` search box\n   */\n  referenceEl: HTMLElement;\n  /**\n   * The floating popover element, e.g. the results box\n   */\n  floatingEl: HTMLElement;\n\n  #options: PopoverOptions;\n\n  /**\n   * Cleans up the popover instance and any side effects\n   */\n  destroy: () => void;\n\n  #defaultOptions: PopoverOptions = {\n    placement: 'bottom-start',\n    flip: false,\n    offset: 10\n  };\n\n  constructor(\n    referenceEl: HTMLElement,\n    floatingEl: HTMLElement,\n    options?: Partial<PopoverOptions>\n  ) {\n    this.referenceEl = referenceEl;\n    this.floatingEl = floatingEl;\n    this.#options = { ...this.#defaultOptions, ...options };\n    this.destroy = autoUpdate(this.referenceEl, this.floatingEl, this.update);\n  }\n\n  /**\n   * Positioning options for the popover element.\n   */\n  get options(): PopoverOptions {\n    return this.#options;\n  }\n  set options(newOptions: Partial<PopoverOptions>) {\n    this.#options = { ...this.#options, ...newOptions };\n  }\n\n  /**\n   * Recomputes the popover position one time\n   */\n  update = async (): Promise<void> => {\n    const config: Partial<ComputePositionConfig> = {\n      placement: this.options.placement,\n      middleware: [\n        offset(this.options.offset),\n        this.options.flip && flip()\n      ].filter(Boolean)\n    };\n    const { x, y } = await computePosition(\n      this.referenceEl,\n      this.floatingEl,\n      config\n    );\n    Object.assign(this.floatingEl.style, {\n      left: `${x}px`,\n      top: `${y}px`\n    });\n  };\n}\n", "/**\n * `MapboxHTMLEvent` is an event dispatched by the Search Box and Address Autofill\n * components.\n *\n * @example\n * ```\n * const search = new MapboxSearchBox();\n * search.addEventListener('retrieve', (event: MapboxHTMLEvent<Suggestion>) => {\n *  console.log(event.detail);\n * });\n */\nexport class MapboxHTMLEvent<T> extends CustomEvent<T> {\n  constructor(type: string, detail?: T) {\n    super(type, {\n      composed: true,\n      detail\n    });\n  }\n\n  /**\n   * Returns a shallow copy of the event. This method is useful for\n   * manually bubbling events from a connected component.\n   *\n   * @param newTarget - Optional event target to assign to the clone\n   *\n   * @example\n   * `MapboxSearchBox` will call `event.clone()` on the `retrieve`\n   * event from `MapboxSearchListbox`, and then dispatch the cloned event.\n   */\n  clone(newTarget?: EventTarget): MapboxHTMLEvent<T> {\n    const eventClone = new MapboxHTMLEvent(this.type, this.detail);\n    if (newTarget) {\n      Object.defineProperty(eventClone, 'target', { value: newTarget });\n    }\n    return eventClone;\n  }\n}\n", "export const LENGTH_MESSAGE = 'Type in 2 or more characters for results.';\n\nexport const KEYBOARD_NAVIGATION_GUIDE_MESSAGE =\n  'When autocomplete results are available use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.';\n\nexport const NO_SEARCH_RESULTS_MESSAGE = 'No search results.';\n\nexport const getSuggestionSelectedMessage = (\n  address: string,\n  numberOfResults: number,\n  currentIndex: number\n): string =>\n  `${numberOfResults} ${\n    numberOfResults === 1 ? 'result is' : 'results are'\n  } available. ${address}. ${currentIndex} of ${numberOfResults} is selected.`;\n\nexport const getSuggestionsReadyMessage = (numberOfResults: number): string =>\n  `${numberOfResults} ${\n    numberOfResults === 1 ? 'result is' : 'results are'\n  } available. Use up and down arrows to review and enter to select. Touch device users, explore by touch or with swipe gestures.`;\n", "import {\n  AddressAutofillSuggestion,\n  GeocodingFeature,\n  SearchBoxSuggestion\n} from '@mapbox/search-js-core';\nimport {\n  getSuggestionSelectedMessage,\n  getSuggestionsReadyMessage,\n  KEYBOARD_NAVIGATION_GUIDE_MESSAGE,\n  LENGTH_MESSAGE,\n  NO_SEARCH_RESULTS_MESSAGE\n} from './messages';\n/**\n * This is to make sure our custom \"buttons\" have appropriate\n * keyboard controls for WAI-ARIA.\n *\n * Reference: https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-3\n */\nexport function ariaButtonKeyDown(e: KeyboardEvent): void {\n  const el = e.currentTarget as HTMLElement;\n\n  if (e.key === ' ' || e.key === 'Enter') {\n    e.preventDefault();\n    e.stopPropagation();\n\n    // Simulate a click event.\n    el.dispatchEvent(\n      new MouseEvent('click', {\n        bubbles: true,\n        composed: true\n      })\n    );\n  }\n}\n\nconst ARIA_DESCRIPTION_ID = 'search-listbox__description';\n\n/**\n * Builds element that may contain different messages for VoiceOver utilities.\n * The element has necessary aria-* specific attributes and visually hidden.\n */\nexport const createAriaLiveElement = (seed: string): HTMLDivElement => {\n  const container = document.createElement('div');\n  container.setAttribute('aria-live', 'polite');\n  container.setAttribute('aria-atomic', 'true');\n  container.setAttribute('role', 'status');\n  container.setAttribute(\n    'style',\n    'border: 0px;clip: rect(0px, 0px, 0px, 0px);height: 1px;margin-bottom: -1px;margin-right: -1px;overflow: hidden;padding: 0px;position: absolute;white-space: nowrap;width: 1px;'\n  );\n\n  const description = document.createElement('div');\n  description.setAttribute('id', `${seed}--${ARIA_DESCRIPTION_ID}`);\n\n  container.appendChild(description);\n\n  return container;\n};\n\nexport const setLiveRegionMessage = (message: string, seed: string): void => {\n  const description: HTMLInputElement =\n    document.body.querySelector(`[id=\"${seed}--${ARIA_DESCRIPTION_ID}\"]`) ??\n    null;\n  if (description) {\n    description.textContent = message;\n  }\n};\n\n/**\n * Adds special parameters to form input to avoid password managers from trigger it's autocompletion on our field.\n * @param input\n */\nexport const suppressExtensionsAutocomplete = (\n  input: HTMLInputElement\n): void => {\n  // 1Password password manager fix https://1password.community/discussion/comment/606453/#Comment_606453\n  input.name = input.name + ' address-search';\n  // LastPass password manager fix https://support.lastpass.com/help/how-do-i-prevent-fields-from-being-filled-automatically\n  input.setAttribute('data-lpignore', 'true');\n};\n\n/**\n * Calculates the message for autofill component to be announced by VoiceOver utilities depending on its state.\n * @example\n * \"Type in 2 or more characters for results.\" (When input text length is less than 2 characters)\n */\nexport const getAriaMessage = (\n  searchValue: string,\n  suggestions: (\n    | SearchBoxSuggestion\n    | AddressAutofillSuggestion\n    | GeocodingFeature\n  )[],\n  selectedIndex: number | undefined\n): string => {\n  let ariaMessage = null;\n\n  const noResults = !suggestions || suggestions.length === 0;\n\n  if (searchValue?.length < 2) {\n    ariaMessage = LENGTH_MESSAGE + ' ' + KEYBOARD_NAVIGATION_GUIDE_MESSAGE;\n  } else if (noResults) {\n    ariaMessage = NO_SEARCH_RESULTS_MESSAGE;\n  } else if (selectedIndex !== undefined) {\n    const suggestion = suggestions[selectedIndex];\n    const placeName =\n      suggestion.address ||\n      (suggestion as any).full_address ||\n      (suggestion as any).feature_name;\n\n    ariaMessage = getSuggestionSelectedMessage(\n      placeName,\n      suggestions.length,\n      selectedIndex + 1\n    );\n  } else {\n    ariaMessage = getSuggestionsReadyMessage(suggestions.length);\n  }\n\n  return ariaMessage;\n};\n", "import {\n  AddressAutofillSuggestion,\n  GeocodingFeature,\n  SearchBoxSuggestion\n} from '@mapbox/search-js-core';\nimport { SEARCH_SERVICE } from './services';\n\n/**\n * Returns the string from suggestions that meant to be used as first stroke\n * title in search results list for that particular suggestion.\n */\nexport const getSuggestionTitle = (\n  item: SearchBoxSuggestion | AddressAutofillSuggestion | GeocodingFeature,\n  service: SEARCH_SERVICE\n): string => {\n  switch (service) {\n    case SEARCH_SERVICE.AddressAutofill:\n      return (\n        (item as AddressAutofillSuggestion).address_line1 ||\n        (item as AddressAutofillSuggestion).matching_name ||\n        (item as AddressAutofillSuggestion).feature_name\n      );\n    case SEARCH_SERVICE.SearchBox:\n      return (item as SearchBoxSuggestion).name;\n    case SEARCH_SERVICE.GeocodingV5:\n      return (item as GeocodingFeature).place_name.split(',')[0];\n    default:\n      return '';\n  }\n};\n\n/**\n * Returns parsed/formatted description text to show in the second line of an autofill suggestion element\n */\nexport const buildSuggestionDescription = (\n  item: SearchBoxSuggestion | AddressAutofillSuggestion | GeocodingFeature,\n  service: SEARCH_SERVICE\n): string => {\n  switch (service) {\n    case SEARCH_SERVICE.AddressAutofill:\n      return (item as AddressAutofillSuggestion).description;\n    case SEARCH_SERVICE.SearchBox:\n      if ((item as SearchBoxSuggestion).feature_type === 'poi') {\n        // TODO: update this to be street name + place_formatted, once API response is updated\n        return (item as SearchBoxSuggestion).full_address;\n      }\n      return (item as SearchBoxSuggestion).place_formatted;\n    case SEARCH_SERVICE.GeocodingV5:\n      return (item as GeocodingFeature).place_name\n        .split(',')\n        .splice(1)\n        .join(',')\n        .trim();\n    default:\n      return '';\n  }\n};\n", "import {\n  SearchBoxSuggestion,\n  AddressAutofillSuggestion,\n  GeocodingFeature\n} from '@mapbox/search-js-core';\n\nimport { HTMLScopedElement } from './HTMLScopedElement';\n\nimport { Theme, getThemeCSS, getIcon } from '../theme';\nimport { bindElements, getChildElements } from '../utils/dom';\nimport { Popover, PopoverOptions } from '../utils/popover';\n\nimport style from '../style.css';\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { MapboxAddressAutofill } from './MapboxAddressAutofill';\nimport { AddressAutofillInstance } from '../autofill';\nimport { getAriaMessage, setLiveRegionMessage } from '../utils/aria';\nimport { LISTBOX_TEMPLATE, LISTBOX_SUGGESTION_TEMPLATE } from '../constants';\nimport {\n  buildSuggestionDescription,\n  getSuggestionTitle\n} from '../utils/listbox';\nimport { SEARCH_SERVICE } from '../utils/services';\n\nfunction getAriaIdForSuggestion(resultListId: string, i: number): string {\n  return `${resultListId}-${i}`;\n}\n\ntype Binding = {\n  /**\n   * Wrapper around the entire component.\n   */\n  MapboxSearch: HTMLElement;\n  /**\n   * Results container, which contains:\n   * - {@link ResultsList}\n   * - {@link Label}\n   * - Attribution.\n   */\n  Results: HTMLDivElement;\n  /**\n   * Exposed as a listbox to assistive technologies.\n   */\n  ResultsList: HTMLUListElement;\n  /**\n   * Exposed as a label.\n   *\n   * Visually hidden but can \"announce\" the current selection to\n   * assistive technologies.\n   */\n  Label: HTMLDivElement;\n};\n\ntype ListboxEventTypes<Suggestion> = {\n  /**\n   * Triggered on `input` events, i.e. typing  in the `<input>` element.\n   */\n  input: MapboxHTMLEvent<string>;\n  /**\n   * Triggered on selection events, i.e. clicking on an item in the results list\n   * or hitting `Enter` with an item highlighted.\n   */\n  select: MapboxHTMLEvent<Suggestion>;\n  /**\n   * Triggered on `blur` event, i.e. focus moves away from the `<input>` element.\n   */\n  blur: MapboxHTMLEvent<unknown>;\n  /**\n   * Triggered on `focus` evenet, i.e. focus moves onto the `<input>` element.\n   */\n  focus: MapboxHTMLEvent<unknown>;\n};\n\nexport class MapboxSearchListbox<\n  Suggestion extends\n    | SearchBoxSuggestion\n    | AddressAutofillSuggestion\n    | GeocodingFeature\n> extends HTMLScopedElement<ListboxEventTypes<Suggestion>> {\n  protected override get template(): HTMLTemplateElement {\n    return LISTBOX_TEMPLATE;\n  }\n\n  protected override get templateStyle(): string {\n    return style;\n  }\n\n  protected get templateUserStyle(): string {\n    return getThemeCSS('.MapboxSearch', this.theme);\n  }\n\n  /**\n   * The current list of suggestions to be rendered in the results box.\n   */\n  suggestions: Suggestion[] | null = null;\n\n  /**\n   * The Address Autofill instance driving the listbox.\n   * Can be either the custom element or function.\n   */\n  autofillHost?: MapboxAddressAutofill | AddressAutofillInstance;\n\n  #popover: Popover | null = null;\n\n  #binding: Binding;\n\n  #labelID: string;\n  #resultListID: string;\n\n  #inputInternal: HTMLInputElement | null;\n\n  dataSeed: string;\n\n  get input(): HTMLInputElement | null {\n    return this.#inputInternal;\n  }\n\n  set input(newInput: HTMLInputElement | null) {\n    const oldInput = this.#inputInternal;\n\n    if (oldInput) {\n      oldInput.removeEventListener('input', this.#handleInput);\n      oldInput.removeEventListener('focus', this.#handleFocus);\n      oldInput.removeEventListener('blur', this.#handleBlur);\n      oldInput.removeEventListener('keydown', this.#handleKeyDown);\n\n      if (this.#popover) {\n        this.#popover.destroy();\n      }\n    }\n\n    if (newInput) {\n      newInput.addEventListener('input', this.#handleInput);\n      newInput.addEventListener('focus', this.#handleFocus);\n      newInput.addEventListener('blur', this.#handleBlur);\n      newInput.addEventListener('keydown', this.#handleKeyDown);\n\n      // Set ARIA role and attributes.\n      newInput.setAttribute('role', 'combobox');\n      newInput.setAttribute('aria-autocomplete', 'list');\n      newInput.setAttribute('aria-controls', this.#resultListID);\n\n      if (this.isConnected) {\n        this.#popover = new Popover(\n          newInput,\n          this.#binding.Results,\n          this.popoverOptions\n        );\n      }\n    }\n\n    this.#inputInternal = newInput;\n  }\n\n  #searchService = null;\n\n  get searchService(): SEARCH_SERVICE | null {\n    return this.#searchService;\n  }\n\n  set searchService(service: SEARCH_SERVICE) {\n    this.#searchService = service;\n  }\n\n  #selectedIndexInternal = undefined;\n\n  get selectedIndex(): number | undefined {\n    return this.#selectedIndexInternal;\n  }\n\n  set selectedIndex(newIndex: number) {\n    const oldIndex = this.#selectedIndexInternal;\n    this.#selectedIndexInternal = newIndex;\n\n    // Update accessibility flags.\n    const { ResultsList } = this.#binding;\n\n    const id = getAriaIdForSuggestion(this.#resultListID, newIndex);\n\n    if (newIndex !== undefined) {\n      this.input.setAttribute('aria-activedescendant', id);\n      ResultsList.setAttribute('aria-activedescendant', id);\n    } else {\n      this.input.removeAttribute('aria-activedescendant');\n      ResultsList.removeAttribute('aria-activedescendant');\n    }\n\n    // Update the selected suggestion.\n    if (oldIndex !== newIndex) {\n      const oldId = getAriaIdForSuggestion(this.#resultListID, oldIndex);\n      const oldEl = ResultsList.querySelector(`#${oldId}`);\n      oldEl?.removeAttribute('aria-selected');\n      oldEl?.setAttribute('tabindex', '-1');\n\n      if (newIndex !== undefined) {\n        const el = ResultsList.querySelector(`#${id}`) as HTMLElement;\n        el?.setAttribute('aria-selected', 'true');\n        el?.setAttribute('tabindex', '0');\n        // TODO: uncomment after moving hideResults logic out from handleBlur and delete aria-activedescendant logic\n        // el?.focus();\n      }\n    }\n\n    this.renderAriaMessage();\n  }\n\n  #showResults(): void {\n    if (!this.suggestions || !this.suggestions.length) {\n      return;\n    }\n\n    const { Results, MapboxSearch } = this.#binding;\n\n    // Calculate width, enable display\n    const rect = this.input.getBoundingClientRect();\n    MapboxSearch.style.setProperty('--width', `${rect.width}px`);\n    MapboxSearch.style.setProperty('display', 'block');\n\n    // Update accessibility flags.\n    this.input.setAttribute('aria-expanded', 'true');\n    Results.removeAttribute('aria-hidden');\n    // Reset selected index.\n    this.selectedIndex = undefined;\n  }\n\n  hideResults(): void {\n    const { Results, ResultsList } = this.#binding;\n\n    // Update accessibility flags.\n    Results.setAttribute('aria-hidden', 'true');\n    this.input.setAttribute('aria-expanded', 'false');\n    ResultsList.removeAttribute('aria-activedescendant');\n    this.input.removeAttribute('aria-activedescendant');\n  }\n\n  renderItem(i: number): HTMLElement {\n    const element = this.prepareTemplate(LISTBOX_SUGGESTION_TEMPLATE);\n    element.id = getAriaIdForSuggestion(this.#resultListID, i);\n\n    return element;\n  }\n\n  fillItem(\n    el: Element,\n    item: Suggestion,\n    i: number,\n    totalLength: number\n  ): void {\n    const iconEl = el.querySelector('[class$=\"SuggestionIcon\"]');\n    const nameEl = el.querySelector('[class$=\"SuggestionName\"]');\n    const descriptionEl = el.querySelector('[class$=\"SuggestionDesc\"]');\n\n    // For Autofill suggestions, use 'accuracy' property to generate icon\n    if (this.searchService === SEARCH_SERVICE.AddressAutofill) {\n      iconEl.innerHTML = getIcon(\n        (item as AddressAutofillSuggestion).accuracy === 'street'\n          ? 'street'\n          : 'addressMarker',\n        this.theme\n      );\n      iconEl.removeAttribute('aria-hidden');\n    } else {\n      iconEl.setAttribute('aria-hidden', 'true');\n    }\n\n    // reset previous values\n    nameEl.textContent = descriptionEl.textContent = '';\n\n    nameEl.textContent = getSuggestionTitle(item, this.searchService);\n\n    descriptionEl.textContent = buildSuggestionDescription(\n      item,\n      this.searchService\n    );\n\n    if (i === this.selectedIndex) {\n      el.setAttribute('aria-selected', 'true');\n    } else {\n      el.removeAttribute('aria-selected');\n    }\n\n    el.setAttribute('aria-posinset', (i + 1).toString());\n    el.setAttribute('aria-setsize', totalLength.toString());\n  }\n\n  #renderResultsList(): void {\n    const { ResultsList } = this.#binding;\n\n    if (!this.suggestions || !this.suggestions.length) {\n      // Speed optimization?\n      ResultsList.innerHTML = '';\n      this.hideResults();\n      return;\n    }\n\n    /**\n     * Make sure we have the correct number of nodes.\n     */\n    const elements = getChildElements(ResultsList);\n    // Too few, add any we're missing.\n    if (this.suggestions.length > elements.length) {\n      for (let i = elements.length; i < this.suggestions.length; i++) {\n        const item = this.renderItem(i);\n        elements.push(item);\n\n        // Setup selected index listener.\n        item.onmouseenter = () => {\n          this.selectedIndex = i;\n        };\n        item.onmouseleave = () => {\n          this.selectedIndex = undefined;\n        };\n\n        ResultsList.appendChild(item);\n      }\n    }\n\n    // Too many, remove any we're not using anymore.\n    if (this.suggestions.length < elements.length) {\n      for (let i = this.suggestions.length; i < elements.length; i++) {\n        elements[i].remove();\n      }\n    }\n\n    /**\n     * Fill out DOM nodes with our data.\n     */\n    for (const suggestion of this.suggestions) {\n      const i = this.suggestions.indexOf(suggestion);\n      const element = elements[i];\n\n      this.fillItem(element, suggestion, i, this.suggestions.length);\n      // Override 'onclick' for autofill.\n      element.onclick = () => {\n        this.#handleSelect(suggestion);\n      };\n    }\n  }\n\n  #themeInternal: Theme = {};\n\n  get theme(): Theme {\n    return this.#themeInternal;\n  }\n\n  set theme(theme: Theme) {\n    this.#themeInternal = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(getThemeCSS('.MapboxSearch', theme));\n  }\n\n  #popoverOptions: Partial<PopoverOptions> = {};\n\n  get popoverOptions(): Partial<PopoverOptions> {\n    return this.#popoverOptions;\n  }\n\n  set popoverOptions(newOptions: Partial<PopoverOptions>) {\n    this.#popoverOptions = newOptions;\n    if (this.#popover) {\n      this.#popover.options = newOptions;\n      this.#popover.update();\n    }\n  }\n\n  #handleInput = (e: InputEvent): void => {\n    // Prevent duping requests.\n    const { Results } = this.#binding;\n    const input = e.target as HTMLInputElement;\n\n    if (input.dataset['mapboxSuccess']) {\n      delete input.dataset['mapboxSuccess'];\n      return;\n    }\n\n    const searchText = input.value;\n\n    this.renderAriaMessage();\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy\n    Results.setAttribute('aria-busy', 'true');\n\n    this.dispatchEvent(new MapboxHTMLEvent('input', searchText));\n  };\n\n  renderAriaMessage = (): void => {\n    const message = getAriaMessage(\n      this.input?.value,\n      this.suggestions,\n      this.selectedIndex\n    );\n    setLiveRegionMessage(message, this.dataset.seed);\n  };\n\n  clearAriaMessage = (): void => {\n    setLiveRegionMessage('', this.dataset.seed);\n  };\n\n  /**\n   * Handles the rendering of suggestion items returned from the input text search.\n   * @param suggestions Array of suggestions or features returned from the search\n   */\n  handleSuggest = (suggestions: Suggestion[]): void => {\n    this.suggestions = suggestions;\n\n    if (!suggestions || suggestions.length === 0) {\n      this.renderAriaMessage();\n    }\n\n    if (!suggestions) {\n      this.hideResults();\n      return;\n    }\n\n    this.#renderResultsList();\n    if (suggestions.length) {\n      this.#showResults();\n    }\n\n    const { Results } = this.#binding;\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy\n    Results.setAttribute('aria-busy', 'false');\n  };\n\n  /**\n   * Handles the results box rendering when an error has occurred.\n   */\n  handleError = (): void => {\n    const { Results } = this.#binding;\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-busy\n    Results.setAttribute('aria-busy', 'false');\n\n    this.hideResults();\n  };\n\n  #handleSelect = async (suggestion: Suggestion): Promise<void> => {\n    // set mapboxSuccess to 'true'\n    const input = this.input;\n    if (input) {\n      input.dataset['mapboxSuccess'] = 'true';\n    }\n\n    this.dispatchEvent(new MapboxHTMLEvent('select', suggestion));\n\n    this.hideResults();\n  };\n\n  #handleFocus = (): void => {\n    const input = this.input;\n    delete input.dataset['mapboxSuccess'];\n\n    this.dispatchEvent(new MapboxHTMLEvent('focus'));\n    this.renderAriaMessage();\n    this.#showResults();\n  };\n\n  #handleBlur = (): void => {\n    // See if we're the target.\n    if (document.activeElement === this.input) {\n      return;\n    }\n\n    this.dispatchEvent(new MapboxHTMLEvent('blur'));\n    this.clearAriaMessage();\n    this.hideResults();\n  };\n\n  handleArrowUp = (): void => {\n    if (this.selectedIndex === undefined) {\n      this.selectedIndex = this.suggestions.length - 1;\n    } else if (this.selectedIndex === 0) {\n      this.selectedIndex = undefined;\n    } else {\n      this.selectedIndex = Math.max(0, this.selectedIndex - 1);\n    }\n  };\n\n  handleArrowDown = (): void => {\n    if (this.selectedIndex === undefined) {\n      this.selectedIndex = 0;\n    } else if (this.selectedIndex === this.suggestions.length - 1) {\n      this.selectedIndex = undefined;\n    } else {\n      this.selectedIndex = Math.min(\n        this.selectedIndex + 1,\n        this.suggestions.length - 1\n      );\n    }\n  };\n\n  #handleKeyDown = (e: KeyboardEvent): void => {\n    if (!this.suggestions?.length) return;\n\n    if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      this.handleArrowDown();\n      return;\n    }\n\n    if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      this.handleArrowUp();\n      return;\n    }\n\n    if (e.key === 'Escape') {\n      this.hideResults();\n      return;\n    }\n\n    if (this.selectedIndex === undefined) {\n      return;\n    }\n\n    if (e.key === 'Tab') {\n      this.#handleSelect(this.suggestions[this.selectedIndex]);\n      return;\n    }\n\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.#handleSelect(this.suggestions[this.selectedIndex]);\n      return;\n    }\n  };\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    this.dataSeed = this.dataset.seed;\n\n    this.#labelID = this.dataset.seed + '-Label';\n    this.#resultListID = this.dataset.seed + '-ResultsList';\n\n    if (this.input) {\n      this.input.setAttribute('aria-controls', this.#resultListID);\n    }\n\n    this.#binding = bindElements<Binding>(this, {\n      MapboxSearch: '.MapboxSearch',\n      Results: '.Results',\n      ResultsList: '.ResultsList',\n      Label: '.Label'\n    });\n\n    const { Results, ResultsList, Label } = this.#binding;\n\n    Label.id = this.#labelID;\n    ResultsList.id = this.#resultListID;\n    ResultsList.setAttribute('aria-labelledby', this.#labelID);\n\n    Results.addEventListener('blur', this.#handleBlur);\n\n    if (!this.#popover && this.input) {\n      this.#popover = new Popover(\n        this.input,\n        this.#binding.Results,\n        this.popoverOptions\n      );\n    }\n\n    // Update popover on next frame.\n    requestAnimationFrame(() => {\n      if (this.#popover) {\n        this.#popover.update();\n      }\n    });\n  }\n\n  disconnectedCallback(): void {\n    // Make sure to unbind input listeners.\n    this.input = null;\n\n    const { Results } = this.#binding;\n    Results.removeEventListener('blur', this.#handleBlur);\n\n    if (this.#popover) this.#popover.destroy();\n  }\n\n  focus(): void {\n    // Refire the event internally, in case we missed it\n    // and the end user is trying to replay it.\n    if (document.activeElement === this.input) {\n      this.#handleFocus();\n    } else {\n      this.input.focus();\n    }\n  }\n\n  blur(): void {\n    this.input.blur();\n  }\n\n  updatePopover(): void {\n    if (this.#popover) {\n      this.#popover.update();\n    }\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxSearchListbox: typeof MapboxSearchListbox;\n  }\n}\n\nwindow.MapboxSearchListbox = MapboxSearchListbox;\n\nif (!window.customElements.get('mapbox-search-listbox')) {\n  customElements.define('mapbox-search-listbox', MapboxSearchListbox);\n}\n", "import {\n  AddressAutofillFeatureSuggestion,\n  AddressAutofillSuggestion,\n  GeocodingFeature,\n  SearchBoxSuggestion,\n  featureToSuggestion\n} from '@mapbox/search-js-core';\nimport { InputFormElement, isVisible, setValue } from './dom';\nimport { SEARCH_SERVICE } from './services';\nimport { getSuggestionTitle } from './listbox';\n\n/**\n * A list of WHATWG autofill tokens relevant to addresses. These will be used to\n * set the `autocomplete` attribute on the input element.\n *\n * Reference: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofilling-form-controls:-the-autocomplete-attribute\n */\ntype AutofillTokens =\n  | 'street-address'\n  | 'address-line1'\n  | 'address-line2'\n  | 'address-line3'\n  | 'address-level4'\n  | 'address-level3'\n  | 'address-level2'\n  | 'address-level1'\n  | 'country'\n  | 'country-name'\n  | 'postal-code';\n\nexport const AUTOFILL_TOKENS = new Set<AutofillTokens>([\n  'street-address',\n  'address-line1',\n  'address-line2',\n  'address-line3',\n  'address-level4',\n  'address-level3',\n  'address-level2',\n  'address-level1',\n  'country',\n  'country-name',\n  'postal-code'\n]);\n\n/**\n * A list of WHATWG autofill tokens we can safely ignore when traversing\n * `autocomplete` attributes.\n */\nconst AUTOFILL_SKIP_TOKENS = new Set(['off', 'on', 'true', 'false']);\n\n/**\n * Finds the parent form element of the given element, if any.\n *\n * @returns The parent form element, or `null` if none was found.\n */\nexport function findParentForm(el: Element): HTMLFormElement | null {\n  let node = el.parentNode;\n  while (node) {\n    if (node instanceof HTMLFormElement) {\n      return node;\n    }\n    node = node.parentNode;\n  }\n\n  return null;\n}\n\n/**\n * Finds input elements that are eligible to be used for Address Autofill.\n * Eligible inputs include those with standard WHATWG autocomplete attribute values, either 'address-line1' or 'street-address'\n * @param form - If specified, searches within the given form instead of the whole document\n * @returns Array of input elements\n */\nexport function findAddressInputs(form?: HTMLFormElement): HTMLInputElement[] {\n  const parent = form || document;\n  return Array.from(\n    parent.querySelectorAll<HTMLInputElement>(\n      'input[autocomplete~=\"address-line1\"], input[autocomplete~=\"street-address\"]'\n    )\n  );\n}\n\nconst SECTION = 'section-';\n\nconst SECTION_DEFAULT = 'section-default';\nconst SECTION_SHIPPING = 'section-shipping';\nconst SECTION_BILLING = 'section-billing';\n\ntype FormStructure = {\n  input: InputFormElement;\n  section: string;\n  field: AutofillTokens;\n}[];\n\n/**\n * Implementation of \"autocomplete\" {@link FormStructure} that matches the\n * WHATWG spec and somewhat Chromium.\n *\n * `billing` and `shipping` are treated as special sections. The {@link SECTION_SHIPPING}\n * and {@link SECTION_BILLING} symbols are used to identify them.\n *\n * Any inputs without an `autocomplete` attribute are skipped.\n *\n * Reference: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n * Reference: https://github.com/chromium/chromium/blob/18a1302acbf920bc692ec6bd986cacd41ae9c25c/components/autofill/core/browser/form_structure.cc#L1503\n */\nexport function parseFormStructure(form: HTMLFormElement): FormStructure {\n  const inputs = Array.from(\n    form.querySelectorAll<InputFormElement>('[autocomplete]')\n  ).filter((el) => {\n    const tagName = el.tagName.toLowerCase();\n    return (\n      tagName === 'input' || tagName === 'select' || tagName === 'textarea'\n    );\n  });\n\n  const res: FormStructure = [];\n\n  for (const input of inputs) {\n    if (!isVisible(input)) {\n      continue;\n    }\n\n    // Note: HTML <input> element has an HTMLInputElement.autocomplete reflection\n    // property, but <select> elements do not.\n    //\n    // This does **not** mean that autocomplete properties are not valid on\n    // selects. I verified this on a popular e-commerce checkout page.\n    const autocomplete = input.getAttribute('autocomplete') || '';\n    if (!autocomplete || AUTOFILL_SKIP_TOKENS.has(autocomplete)) {\n      continue;\n    }\n\n    const tokens = autocomplete.toLowerCase().split(' ');\n\n    // The tokens are parsed in reverse order. The expected pattern is:\n    // [section-*] [shipping|billing] [type_hint] field_type\n\n    // Address tokens can be a maximum length of 3. We don't need to check [type_hint].\n    if (tokens.length > 3) {\n      continue;\n    }\n\n    // The last token should be a part of our scheme.\n    const field = tokens[tokens.length - 1] as AutofillTokens;\n    if (!AUTOFILL_TOKENS.has(field)) {\n      continue;\n    }\n    tokens.pop();\n\n    let section: symbol | string = SECTION_DEFAULT;\n\n    // The second to last token /could/ be 'shipping' or 'billing'.\n    if (tokens.length) {\n      const sectionToken = tokens[tokens.length - 1];\n\n      if (sectionToken === 'shipping') {\n        section = SECTION_SHIPPING;\n        tokens.pop();\n      }\n\n      if (sectionToken === 'billing') {\n        section = SECTION_BILLING;\n        tokens.pop();\n      }\n    }\n\n    // The remaining tokens could be a section.\n    if (tokens.length) {\n      const sectionToken = tokens[tokens.length - 1];\n      if (sectionToken.startsWith(SECTION)) {\n        section = sectionToken;\n      }\n    }\n\n    res.push({\n      input,\n      section,\n      field\n    });\n  }\n\n  return res;\n}\n\nexport type AutofillInputMap = { [key in AutofillTokens]?: InputFormElement };\n/**\n * Object mapping WHATWG autocomplete attribute values to corresponding address component strings.\n *\n * @typedef AutofillValueMap\n * @example\n * ```typescript\n * {\n *   \"street-address\"?: string;\n *   \"address-line1\"?: string;\n *   \"address-line2\"?: string;\n *   \"address-line3\"?: string;\n *   \"address-level4\"?: string;\n *   \"address-level3\"?: string;\n *   \"address-level2\"?: string;\n *   \"address-level1\"?: string;\n *   country?: string;\n *   \"country-name\"?: string;\n *   \"postal-code\"?: string;\n * }\n * ```\n */\nexport type AutofillValueMap = { [key in AutofillTokens]?: string };\n\n/**\n * Reference: [chromium.md](../../../../docs/search_js_web/chromium.md)\n *\n * Implementation of autofill that closely matches Chromium, with a few noted differences:\n *\n * 1. There is no hueristic for inferring a match, so the\n *    WHATWG \"autocomplete\" attribute is required.\n * 2. This parser, unlike Chromium, doesn't allow more than one token type per\n *    section. Chromium **only** allows this if they are in the same order.\n */\nexport function findAddressAutofillInputs(\n  form: HTMLFormElement,\n  ref: HTMLInputElement\n): AutofillInputMap {\n  // Use an array-of-structs to improve performance.\n  // Reference: https://en.wikipedia.org/wiki/AoS_and_SoA#:~:text=Structure%20of%20arrays%20(SoA)%20is,one%20parallel%20array%20per%20field.\n  const logicalSections: AutofillInputMap[] = [];\n  const logicalSectionSections: (string | symbol)[] = [];\n\n  // Parse the form structure, then go through each node to create\n  // logical sections.\n  const formStructure = parseFormStructure(form);\n\n  // When we traverse through the form structure, we can check the input against\n  // ref to find the logical section we actually want.\n  let foundSection: AutofillInputMap = null;\n\n  for (const { input, section, field } of formStructure) {\n    let lastIndex = logicalSections.length - 1;\n\n    // 1. If we have no logical sections, create a new section.\n    // 2. If the current section is different from the last section, create a new section.\n    // 3. If the current field already exists in the last section, create a new section.\n    let createNewSection = false;\n    if (!logicalSections.length) {\n      createNewSection = true;\n    } else if (logicalSectionSections[lastIndex] !== section) {\n      createNewSection = true;\n    } else if (logicalSections[lastIndex][field]) {\n      createNewSection = true;\n    }\n\n    if (createNewSection) {\n      // If we have already found a logical section, creating new sections\n      // just wastes time.\n      if (foundSection) {\n        break;\n      }\n\n      logicalSections.push({\n        [field]: input\n      });\n\n      logicalSectionSections.push(section);\n      // Make sure to update lastIndex.\n      lastIndex++;\n    } else {\n      logicalSections[lastIndex][field] = input;\n    }\n\n    if (input === ref) {\n      foundSection = logicalSections[lastIndex];\n    }\n  }\n\n  return foundSection ?? {};\n}\n\n/**\n * Fills in the address form using HTML autocomplete attributes.\n *\n * This does a mapping from {@link SearchBoxAdministrativeUnitTypes} to corresponding WHATWG autocomplete types.\n *\n * Reference:\n * https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete#values\n * https://docs.mapbox.com/api/search/search-box/#administrative-unit-types\n */\nexport function setFormAutofillValues(\n  form: HTMLFormElement,\n  ref: HTMLInputElement,\n  suggestion: AddressAutofillSuggestion\n): void {\n  // Find the inputs that we should fill in.\n  const map = findAddressAutofillInputs(form, ref);\n\n  const streetAddress = [\n    suggestion.address_line1,\n    suggestion.address_line2,\n    suggestion.address_line3\n  ]\n    .filter((part) => Boolean(part))\n    .join(', ');\n\n  setValue(map['street-address'], streetAddress);\n  setValue(map['address-line1'], suggestion.address_line1 || '');\n\n  setValue(map['address-level1'], suggestion.address_level1 || '');\n  setValue(map['address-level2'], suggestion.address_level2 || '');\n  setValue(map['address-level3'], suggestion.address_level3 || '');\n\n  // Country in WHATWG refers to the country code, not the name.\n  // Example: 'jp' instead of 'Japan'.\n\n  // Note: Make sure to match case here. The country code is lower-case.\n  const countryCode =\n    suggestion.country_code || suggestion.metadata?.iso_3166_1 || '';\n  if (map.country && map.country instanceof HTMLSelectElement) {\n    let firstOption = map.country.querySelector(`option`).value;\n    if (firstOption === '') {\n      // First option was an empty string placeholder, use the second option\n      firstOption = map.country.querySelectorAll(`option`)[1].value;\n    }\n    const isUpperCase = firstOption === firstOption.toUpperCase();\n\n    setValue(\n      map['country'],\n      isUpperCase ? countryCode.toUpperCase() : countryCode\n    );\n  } else {\n    setValue(map['country'], countryCode);\n  }\n\n  setValue(map['country-name'], suggestion.country || '');\n  setValue(map['postal-code'], suggestion.postcode || '');\n}\n\n/**\n * Gets the current input values for address fields given a form and a reference input.\n *\n * @param form - HTML form that includes the autocomplete-compliant input fields\n * @param ref - An input element within the desired form address section\n * @returns A object mapping WHATWG autocomplete properties to their respective form field values\n *\n * @example\n * ```typescript\n * const form = document.querySelector(form);\n * const input = form.querySelector('input[autocomplete~=\"street-address\"]')\n * const valueMap = getFormAutofillValues(form, input);\n * console.log(valueMap);\n * // {\n * //   \"street-address\": \"123 Main\",\n * //   \"address-level2\": \"Boston\",\n * //   \"address-level1\": \"MA\",\n * //   \"postal-code\": \"02129\"\n * // }\n * ```\n */\nexport function getFormAutofillValues(\n  form: HTMLFormElement,\n  ref: HTMLInputElement\n): AutofillValueMap {\n  const map = findAddressAutofillInputs(form, ref);\n  const values: AutofillValueMap = {};\n  for (const [key, input] of Object.entries(map)) {\n    if (input?.value) {\n      values[key] = input.value;\n    }\n  }\n\n  return values;\n}\n\n/**\n * Converts an {@link AutofillValueMap} to a single line, suitable for\n * display in a text field.\n *\n * @param snapshot - An object mapping WHATWG autocomplete attribute values to their corresponding input field values\n * @returns A concatenated address string\n *\n * @example\n * ```typescript\n * const values = {\n *   'street-address': '123 Main St',\n *   'address-level1': 'CA',\n *   'address-level2': 'San Francisco',\n *   'address-level3': '',\n * };\n *\n * const searchText = getAutofillSearchText(values);\n * console.log(searchText); // '123 Main St, San Francisco, CA'\n * ```\n */\nexport function getAutofillSearchText(snapshot: AutofillValueMap): string {\n  const searchText = [];\n\n  if (snapshot['street-address']) {\n    searchText.push(snapshot['street-address']);\n  } else {\n    searchText.push(snapshot['address-line1'] || '');\n    searchText.push(snapshot['address-line2'] || '');\n    searchText.push(snapshot['address-line3'] || '');\n  }\n\n  searchText.push(snapshot['address-level3'] || '');\n  searchText.push(snapshot['address-level2'] || '');\n  searchText.push(snapshot['address-level1'] || '');\n  searchText.push(snapshot['postal-code'] || '');\n\n  if (snapshot['country-name']) {\n    searchText.push(snapshot['country-name']);\n  } else {\n    searchText.push(snapshot['country'] || '');\n  }\n\n  return searchText\n    .filter((part) => Boolean(part))\n    .map((part) => part.trim())\n    .join(', ');\n}\n\nexport function fillFormWithFeature(\n  feature: AddressAutofillFeatureSuggestion,\n  input: HTMLInputElement\n): void {\n  const form = findParentForm(input);\n  if (!form) {\n    return;\n  }\n\n  const suggestion = featureToSuggestion(feature);\n  setFormAutofillValues(form, input, suggestion);\n\n  const inputMap = findAddressAutofillInputs(form, input);\n  // TODO: check if suggestion has \"missing_unit\" property true\n  if (inputMap['address-line2']) {\n    inputMap['address-line2'].focus();\n  }\n}\n\n/**\n * Gets address property values from an Autofill feature.\n *\n * @param feature - A {@link AddressAutofillFeatureSuggestion} object.\n * @returns A object mapping WHATWG autocomplete properties to their respective feature values\n */\nexport function featureToAutofillValueMap(\n  feature: AddressAutofillFeatureSuggestion\n): AutofillValueMap {\n  const values: AutofillValueMap = {};\n\n  const streetAddress = [\n    feature.properties.address_line1,\n    feature.properties.address_line2,\n    feature.properties.address_line3\n  ]\n    .filter((part) => Boolean(part))\n    .join(', ');\n\n  values['street-address'] = streetAddress;\n  values['address-line1'] = feature.properties.address_line1;\n  values['address-line2'] = feature.properties.address_line2;\n  values['address-line3'] = feature.properties.address_line3;\n  values['address-level1'] = feature.properties.address_level1;\n  values['address-level2'] = feature.properties.address_level2;\n  values['address-level3'] = feature.properties.address_level3;\n  values['country'] = feature.properties.metadata?.iso_3166_1;\n  values['country-name'] = feature.properties.country;\n  values['postal-code'] = feature.properties.postcode;\n\n  return values;\n}\n\n/**\n * Checks if WHATWG address values from one object match those from another.\n *\n * Can be used to compare an HTML form state against the most recently retrieved Autofill feature\n * to determine if a form has been manually edited after a previous Autofill event.\n *\n * @param targetMap - An {@link AutofillValueMap} object.\n * @param referenceMap - An {@link AutofillValueMap} object.\n * @returns False if all values from the target map are equal to their corresponding value from the reference map.\n */\nexport function checkAutofillValuesChanged(\n  targetMap: AutofillValueMap,\n  referenceMap: AutofillValueMap\n): boolean {\n  for (const [key, value] of Object.entries(targetMap)) {\n    if (referenceMap[key] !== value) return true;\n  }\n  return false;\n}\n\n/**\n * Takes the suggestions array and filters streets inside it to leave only unique ones\n */\nexport const distinctExactStreetResults = (\n  suggestions: AddressAutofillSuggestion[]\n): AddressAutofillSuggestion[] => {\n  return suggestions.filter((item1, idx, arr) => {\n    const title = getSuggestionTitle(item1, SEARCH_SERVICE.AddressAutofill);\n    return (\n      item1.accuracy !== 'street' ||\n      arr.findIndex(\n        (item2) =>\n          title === getSuggestionTitle(item2, SEARCH_SERVICE.AddressAutofill)\n      ) === idx\n    );\n  });\n};\n\nexport const toggleAutocompletion = (\n  input: HTMLInputElement,\n  initialAutocompleteValue: string,\n  enableBrowserAutocomplete: boolean\n): void => {\n  /**\n   * 'new-password' prevents some browsers from suggestion autocompetion including saved addresses, passwords and etc.\n   * https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion#preventing_autofilling_with_autocompletenew-password\n   */\n  const disableValue = 'new-password';\n  const defaultFallbackValue = 'address-line1';\n\n  const autocompleteValue = enableBrowserAutocomplete\n    ? initialAutocompleteValue || defaultFallbackValue\n    : disableValue;\n\n  if (input) {\n    input.autocomplete = autocompleteValue;\n  }\n};\n\nexport const handleStreetSelection = (\n  input: HTMLInputElement,\n  initialAutocompleteValue: string,\n  suggestion: AddressAutofillSuggestion\n): void => {\n  if (!input || !suggestion) {\n    return;\n  }\n\n  // autocomplete attribute is required by fillFormWithFeature method.\n  toggleAutocompletion(input, initialAutocompleteValue, true);\n\n  const feature: AddressAutofillFeatureSuggestion = {\n    properties: {\n      ...suggestion,\n      address_line1: suggestion.address_line1 + ' ',\n      postcode: null\n    }\n  } as any;\n\n  fillFormWithFeature(feature, input);\n\n  // turn off browser autocomplete back\n  toggleAutocompletion(input, initialAutocompleteValue, false);\n\n  input?.focus();\n};\n", "import {\n  AddressAutofillFeatureSuggestion,\n  featureToSuggestion\n} from '@mapbox/search-js-core';\nimport { MapboxSearchListboxAutofillType } from './components/MapboxAddressAutofill';\nimport {\n  AddressConfirmOptions,\n  MapboxAddressConfirmation\n} from './components/MapboxAddressConfirmation';\nimport { config } from './config';\n\nimport {\n  featureToAutofillValueMap,\n  findAddressInputs,\n  getFormAutofillValues,\n  checkAutofillValuesChanged,\n  parseFormStructure,\n  setFormAutofillValues\n} from './utils/autofill';\nimport { AddressConfirmShowResult } from './utils/confirmation';\n\nconst confirmation = new MapboxAddressConfirmation();\n\n/**\n * A utility that can be run prior to form submission that allows a user to correct or confirm an address.\n *\n * This parses and compares an address entered into form fields with the closest address suggestion from the Mapbox Address Autofill API.\n * Unless an exact match or a custom comparison callback evaluates to true, the user will be shown a modal dialog\n * asking if they would like to use the suggested address.\n *\n * When a suggested address is accepted, the values are automatically updated in the form fields.\n * @param form - HTML form that includes the autocomplete-compliant input fields\n * @param optionsArg - {@link AddressConfirmOptions} Object defining options for Address Autofill API, UI, form parsing, and address comparison\n * @returns A promise resolving with a result object indicating the decision made by the user\n * @example\n * ```typescript\n * form.addEventListener(\"submit\", async (e) => {\n *   e.preventDefault();\n *   const result = await confirmAddress(form, {\n *     minimap: true,\n *     skipConfirmModal: (feature) =>\n *       ['exact', 'high'].includes(\n *         feature.properties.match_code.confidence\n *       )\n *   });\n *   if (result.type === 'nochange') submitForm();\n * });\n * ```\n */\nexport async function confirmAddress(\n  form: HTMLFormElement,\n  optionsArg: AddressConfirmOptions = {}\n): Promise<AddressConfirmShowResult> {\n  const { sections = [] } = optionsArg;\n\n  if (!confirmation.parentNode) {\n    document.body.appendChild(confirmation);\n  }\n\n  let collectedResult: AddressConfirmShowResult = { type: 'nochange' };\n\n  const inputs = findAddressInputs(form);\n  const structure = parseFormStructure(form);\n\n  const listboxComponents = Array.from(\n    document.querySelectorAll<MapboxSearchListboxAutofillType>(\n      'mapbox-search-listbox'\n    )\n  );\n\n  for (const input of inputs) {\n    // If we have sections, filter by the form structure.\n    if (sections.length) {\n      const structureRef = structure.find((s) => s.input === input);\n      if (!structureRef) {\n        continue;\n      }\n\n      if (!sections.includes(structureRef.section)) {\n        continue;\n      }\n    }\n\n    // Get the form's new autofill values to compare against.\n    const autofillValues = getFormAutofillValues(form, input);\n\n    // Compare form values against the latest Address Autofill snapshot (if any);\n    // If form values have not changed since last snapshot, skip showing confirmation.\n    const listbox = listboxComponents.find((lb) => lb.input === input);\n    const autofill = listbox?.autofillHost;\n    if (autofill) {\n      const lastRetrievedFeature =\n        autofill.retrieveFeature as AddressAutofillFeatureSuggestion;\n      if (lastRetrievedFeature) {\n        const snapshot = featureToAutofillValueMap(lastRetrievedFeature);\n        if (!checkAutofillValuesChanged(autofillValues, snapshot)) {\n          continue;\n        }\n      }\n    }\n\n    // Show the confirmation with the first feature.\n    const accessToken = optionsArg.accessToken || config.accessToken;\n    const result = await confirmation.tryShow(autofillValues, {\n      ...optionsArg,\n      accessToken\n    });\n\n    // If changed, autofill the form.\n    if (result.type === 'change') {\n      if (listbox) {\n        // Simulate the feature as if it were retrieved by Address Autofill\n        autofill.simulateRetrieve(result.feature);\n      } else {\n        input.dataset['mapboxSuccess'] = 'true';\n        const suggestion = featureToSuggestion(result.feature);\n        setFormAutofillValues(form, input, suggestion);\n      }\n    }\n\n    // Set to changed if changed and not cancelled.\n    if (result.type === 'change' && collectedResult.type !== 'cancel') {\n      collectedResult = result;\n    }\n\n    // Set to cancelled if cancelled.\n    if (result.type === 'cancel') {\n      collectedResult = result;\n    }\n  }\n\n  return collectedResult;\n}\n", "import {\n  MatchCodeConfidence,\n  ValidationOptions,\n  ValidationCore,\n  AddressAutofillFeatureSuggestion\n} from '@mapbox/search-js-core';\nimport noScroll from 'no-scroll';\nimport { createFocusTrap, FocusTrap } from 'focus-trap';\n\nimport { HTMLScopedElement } from './HTMLScopedElement';\nimport { MapboxAddressConfirmationFeature } from './MapboxAddressConfirmationFeature';\nimport { MapboxAddressConfirmationNoFeature } from './MapboxAddressConfirmationNoFeature';\n\nimport { bindElements, createElementFromString } from '../utils/dom';\nimport { AutofillValueMap, getAutofillSearchText } from '../utils/autofill';\nimport { AddressConfirmShowResult } from '../utils/confirmation';\n\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { getThemeCSS, Theme } from '../theme';\n\nimport style from '../style.css';\nimport { config } from '../config';\nimport { MapboxAddressMinimap } from './MapboxAddressMinimap';\n\n/**\n * Styling and theming options for a {@link MapboxAddressMinimap} embedded inside a confirmation dialog.\n *\n * @typedef ConfirmationMinimapOptions\n * @example\n * ```typescript\n * const result = await confirmAddress(form, {\n *   accessToken: 'abc-123',\n *   minimap: {\n *     defaultMapStyle: ['mapbox', 'outdoors-v11'],\n *     theme: { icons: { marker: MARKER_SVG } },\n *     mapStyleMode: 'default',\n *     satelliteToggle: true\n *   }\n * });\n * ```\n */\nexport type ConfirmationMinimapOptions = Partial<\n  Pick<\n    MapboxAddressMinimap,\n    'defaultMapStyle' | 'theme' | 'mapStyleMode' | 'satelliteToggle'\n  >\n>;\n\n/**\n * @typedef AddressConfirmOptions\n */\nexport interface AddressConfirmOptions {\n  /**\n   * Mapbox access token used for the Address Autofill and Static Image APIs\n   */\n  accessToken?: string;\n  /**\n   * CSS variables and icons\n   */\n  theme?: Theme;\n  /**\n   * Address Autofill API configuration options\n   * {@link ValidationOptions}\n   */\n  options?: Partial<ValidationOptions>;\n  /**\n   * If true, a static minimap showing the suggested address location will be displayed in the modal dialog.\n   * If an object, a minimap will be displayed with the specified styling and theming configuration.\n   * Defaults to false.\n   */\n  minimap?: boolean | ConfirmationMinimapOptions;\n  /**\n   * An array of section names used within form element `autocomplete` attributes to identify and group one address section from another, e.g. \"section-shipping\" or \"section-billing\".\n   * These are often used when a single <form> contains multiple logical sections.\n   * If left undefined, all discoverable sections will be processed.\n   */\n  sections?: string[];\n  /**\n   * A callback used to pre-confirm an address and skip the UI modal.\n   * The feature argument contains all address components, as well as an {@link MatchCode} object,\n   * which are used to express the confidence of an address match.\n   * The callback must return a boolean, with `true` indicating that the address has been pre-confirmed,\n   * and the UI modal will be skipped and will not be presented to the end-user.\n   * If left undefined, this defaults to skipping showing the modal when the validated feature's match code\n   * returns an \"exact\" match.\n   */\n  skipConfirmModal?: (feature: AddressAutofillFeatureSuggestion) => boolean;\n  /**\n   * Custom footer text appearing at the bottom of the confirmation modal dialog.\n   * If `true` or left undefined, the default footer text will be used.\n   * If `false`, the footer will not be shown.\n   */\n  footer?: boolean | string;\n}\n\nconst TEMPLATE = createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MapboxAddressConfirmation\" aria-hidden=\"true\">\n    <mapbox-address-confirmation-feature class=\"ContentFeature\"></mapbox-address-confirmation-feature>\n    <mapbox-address-confirmation-no-feature class=\"ContentNoFeature\"></mapbox-address-confirmation-no-feature>\n  </div>\n</template>\n`);\n\ntype Binding = {\n  MapboxAddressConfirmation: HTMLDivElement;\n  ContentFeature: MapboxAddressConfirmationFeature;\n  ContentNoFeature: MapboxAddressConfirmationNoFeature;\n};\n\nexport type AddressConfirmationEventTypes = {\n  result: MapboxHTMLEvent<AddressConfirmShowResult['type']>;\n};\n\n/**\n * {@link MapboxAddressConfirmation} is a custom element that\n * will display the \"Did you mean...\" message when the user\n * enters an address that doesn't match any of the results\n * returned by the Mapbox Address Autofill API.\n *\n * This element is used by {@link MapboxAddressAutofill} and the {@link autofill}\n * method, and should not be exposed to the user.\n */\nexport class MapboxAddressConfirmation extends HTMLScopedElement<AddressConfirmationEventTypes> {\n  #show = false;\n\n  #binding: Binding;\n  #focusTrap: FocusTrap | null;\n\n  get template(): HTMLTemplateElement {\n    return TEMPLATE;\n  }\n\n  get templateStyle(): string {\n    return style;\n  }\n\n  get templateUserStyle(): string {\n    return getThemeCSS('.MapboxAddressConfirmation', this.theme);\n  }\n\n  #themeInternal: Theme = {};\n\n  get theme(): Theme {\n    return this.#themeInternal;\n  }\n\n  set theme(theme: Theme) {\n    this.#themeInternal = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(\n      getThemeCSS('.MapboxAddressConfirmation', theme)\n    );\n\n    // Pass theme down into content elements\n    const { ContentFeature, ContentNoFeature } = this.#binding;\n    ContentFeature.theme = theme;\n    ContentNoFeature.theme = theme;\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.#binding = bindElements<Binding>(this, {\n      MapboxAddressConfirmation: '.MapboxAddressConfirmation',\n      ContentFeature: '.ContentFeature',\n      ContentNoFeature: '.ContentNoFeature'\n    });\n\n    const { MapboxAddressConfirmation } = this.#binding;\n    MapboxAddressConfirmation.setAttribute('aria-hidden', 'true');\n\n    const theme = this.theme;\n    if (theme) {\n      const { ContentFeature, ContentNoFeature } = this.#binding;\n      ContentFeature.theme = theme;\n      ContentNoFeature.theme = theme;\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.#focusTrap = null;\n  }\n\n  hide(): void {\n    this.#show = false;\n\n    if (!this.#binding) {\n      return;\n    }\n\n    const { MapboxAddressConfirmation } = this.#binding;\n    // Update accessibility flags.\n    MapboxAddressConfirmation.setAttribute('aria-hidden', 'true');\n\n    this.#focusTrap?.deactivate();\n    noScroll.off();\n  }\n\n  async show(\n    autofillValues: AutofillValueMap,\n    optionsArg: AddressConfirmOptions,\n    feature?: AddressAutofillFeatureSuggestion\n  ): Promise<AddressConfirmShowResult> {\n    if (!this.#binding) {\n      return { type: 'cancel' };\n    }\n\n    const { MapboxAddressConfirmation, ContentFeature, ContentNoFeature } =\n      this.#binding;\n\n    const { accessToken, minimap = false, theme, footer } = optionsArg;\n\n    // Update theme in this and child custom elements\n    this.theme = theme;\n\n    // Set content and visibility depending on feature definition\n    if (feature) {\n      ContentFeature.removeAttribute('aria-hidden');\n      ContentNoFeature.setAttribute('aria-hidden', 'true');\n\n      ContentFeature.minimap = minimap;\n      ContentFeature.accessToken = accessToken;\n      ContentFeature.footer = footer;\n\n      ContentFeature.update(feature, autofillValues);\n    } else {\n      ContentFeature.setAttribute('aria-hidden', 'true');\n      ContentNoFeature.removeAttribute('aria-hidden');\n\n      ContentNoFeature.update(autofillValues);\n    }\n\n    this.#show = true;\n\n    // Update accessibility flags.\n    MapboxAddressConfirmation.removeAttribute('aria-hidden');\n\n    noScroll.on();\n\n    const activeContentElement = feature ? ContentFeature : ContentNoFeature;\n\n    this.#focusTrap = createFocusTrap(MapboxAddressConfirmation, {\n      fallbackFocus: activeContentElement,\n      escapeDeactivates: (): boolean => {\n        this.hide();\n        return true;\n      }\n    });\n\n    this.#focusTrap?.activate();\n\n    // Wait for next result event, hide and then return.\n    return new Promise((resolve) => {\n      const eventHost = activeContentElement;\n      const fn = (\n        e: MapboxHTMLEvent<AddressConfirmShowResult['type']>\n      ): void => {\n        eventHost.removeEventListener('result', fn);\n\n        const result = e.detail;\n        this.hide();\n\n        if (result === 'change') {\n          resolve({\n            type: 'change',\n            feature\n          });\n        } else {\n          resolve({\n            type: result\n          });\n        }\n      };\n\n      eventHost.addEventListener('result', fn);\n    });\n  }\n\n  /**\n   * Attempts to show an address confirmation dialog by comparing form input values with the closest match via the Address Autofill API.\n   * @param autofillValues - Map of form `<input>` values for each address component\n   * @param optionsArg - Options object defining API options, UI controls, and callback defining when to bypass the dialog\n   * @returns A promise indicating the action taken from the confirmation dialog\n   */\n  async tryShow(\n    autofillValues: AutofillValueMap,\n    optionsArg: AddressConfirmOptions\n  ): Promise<AddressConfirmShowResult> {\n    if (!this.#binding) {\n      return { type: 'cancel' };\n    }\n\n    const { accessToken, options = {} } = optionsArg;\n\n    const validate = new ValidationCore({\n      accessToken: accessToken,\n      ...options\n    });\n\n    // Get the form's new autofill values to compare against.\n    const searchText = getAutofillSearchText(autofillValues);\n\n    const featureCollection = await validate.validate(searchText, {\n      sessionToken: config.autofillSessionToken\n    });\n\n    const feature = featureCollection.features[0];\n\n    // Pre-validate feature from optional callback, or default to checking for exact match on match_code.\n    // If pre-validated, return \"nochange\" early\n    if (feature) {\n      const defaultValidation = (feature: AddressAutofillFeatureSuggestion) =>\n        feature.properties.match_code.confidence === MatchCodeConfidence.exact;\n      const { skipConfirmModal = defaultValidation } = optionsArg;\n      if (skipConfirmModal(feature)) {\n        return { type: 'nochange' };\n      }\n    }\n\n    return await this.show(autofillValues, optionsArg, feature);\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxAddressConfirmation: typeof MapboxAddressConfirmation;\n  }\n}\n\nwindow.MapboxAddressConfirmation = MapboxAddressConfirmation;\n\nif (!window.customElements.get('mapbox-address-confirmation')) {\n  customElements.define(\n    'mapbox-address-confirmation',\n    MapboxAddressConfirmation\n  );\n}\n", "import { SessionToken } from '@mapbox/search-js-core';\n\nclass Config {\n  /**\n   * A Mapbox access token used if one is not passed in explicitly to web components\n   */\n  accessToken: string;\n  /**\n   * If true, Address Autofill address or marker location corrections will be submitted to the Mapbox Contribute API to help improve our data accuracy. Defaults to true.\n   */\n  feedbackEnabled = true;\n\n  readonly autofillSessionToken = new SessionToken(); // Shared session token used among Address Autofill-related web components\n  autofillSessionEnabled = false; // True when Address Autofill has been initialized within the current page view\n  detectBrowserAutofillEnabled = false; // True when `initDetectBrowserAutofill` has been called\n}\n\n/**\n * Global configuration singleton object storing settings shared across Search JS Web components.\n *\n * @property {string} accessToken - A [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) used if one is not passed in explicitly to web components.\n * @property {boolean} feedbackEnabled - If true, Address Autofill address or marker location corrections will be submitted to the Mapbox Contribute API to help improve our data accuracy. Defaults to true.\n * @example\n * ```typescript\n * config.accessToken = 'pk.abc.123';\n * ...\n * // Don't need to explicitly pass in token to some components\n * autofill({});\n * confirmAddress(form);\n * ```\n */\nconst config = new Config();\n\n// Prevent autofillSessionToken from being overwritten\nObject.defineProperty(config, 'autofillSessionToken', {\n  configurable: false,\n  writable: false\n});\n\nexport { config };\n", "import { AddressAutofillFeatureSuggestion } from '@mapbox/search-js-core';\nimport { AddressConfirmOptions } from '../components/MapboxAddressConfirmation';\nimport { confirmAddress } from '../confirmAddress';\nimport {\n  AutofillValueMap,\n  findAddressAutofillInputs,\n  findParentForm,\n  parseFormStructure\n} from './autofill';\nimport { createElementFromString } from './dom';\n\n/**\n * @typedef AddressConfirmShowResult\n */\nexport type AddressConfirmShowResult =\n  | { type: 'change'; feature: AddressAutofillFeatureSuggestion }\n  | { type: 'nochange' }\n  | { type: 'cancel' };\n\n/**\n * Creates a formatted, multi-line HTML element representing an address\n * @param autofillValues - A map of address `<input>` values by autocomplete attribute\n * @param baseAddress - A full address string. If provided, this will be used for the\n * first and last lines of the formatted address, and will be supplemented by any `address-line2`\n * and/or `address-line3` values provided through the `autofillValues` map.\n * @returns\n */\nexport function createAddressElement(\n  autofillValues: AutofillValueMap,\n  baseAddress?: string\n): HTMLElement {\n  if (baseAddress) {\n    const element = createElementFromString<HTMLSpanElement>(`\n        <span>\n          <span></span>\n          <br />\n          <span></span>\n        </span>\n      `);\n\n    const [firstLine, lastLine] = Array.from(\n      element.querySelectorAll<HTMLSpanElement>('span > span')\n    );\n\n    const parts = baseAddress.split(',');\n\n    firstLine.textContent = parts[0].trim();\n    lastLine.textContent = parts.slice(1).join(',').trim();\n\n    // Add any customer-entered address-line2, address-line3 input values\n    if (autofillValues['address-line2']) {\n      const span = document.createElement('span');\n      span.textContent = autofillValues['address-line2'];\n      element.insertBefore(span, lastLine);\n      element.insertBefore(document.createElement('br'), lastLine);\n    }\n    if (autofillValues['address-line3']) {\n      const span = document.createElement('span');\n      span.textContent = autofillValues['address-line3'];\n      element.insertBefore(span, lastLine);\n      element.insertBefore(document.createElement('br'), lastLine);\n    }\n\n    return element;\n  } else {\n    const firstLine =\n      autofillValues['street-address'] || autofillValues['address-line1'] || '';\n    const line2 = autofillValues['address-line2'];\n    const line3 = autofillValues['address-line3'];\n    const lastLine = [\n      autofillValues['address-level4'] || '',\n      autofillValues['address-level3'] || '',\n      autofillValues['address-level2'] || '',\n      `${autofillValues['address-level1'] || ''} ${\n        autofillValues['postal-code'] || ''\n      }`,\n      autofillValues.country || autofillValues['country-name'] || ''\n    ]\n      .filter(Boolean)\n      .join(', ');\n    const addressLines = [firstLine, line2, line3, lastLine].filter(Boolean);\n    const addressLinesHtml = addressLines\n      .map((val) => `<span>${val}</span>`)\n      .join('<br />');\n    const element = createElementFromString<HTMLSpanElement>(`\n        <span>${addressLinesHtml}</span>\n      `);\n    return element;\n  }\n}\n\n/**\n * Checks a browser autofill event against an Address Autofill input and, given\n * custom options, determines and configures if/how to show invoke {@link confirmAddress}.\n *\n * @param input - The `<input>` element wrapped or targeted by Address Autofill.\n * @param event - The custom window event detected and triggered on a browser autofill event.\n * @param confirmOnBrowserAutofill - The value of the instance property set on the autofill instance.\n * @param accessToken - A Mapbox access token.\n * @returns\n */\nexport async function tryConfirmBrowserAutofill(\n  input: HTMLInputElement,\n  event: CustomEvent,\n  confirmOnBrowserAutofill: boolean | AddressConfirmOptions,\n  accessToken: string\n): Promise<void> {\n  // Early exit if confirmation is not enabled on browser autofill events\n  if (!confirmOnBrowserAutofill) return;\n\n  const parentForm = findParentForm(input);\n  /**\n   * Check that at least one of the browser autofilled input elements are\n   * part of the address structure of the form. E.g. if only \"name\" and \"email\"\n   * fields were autofilled, we don't need to confirm the address.\n   */\n  const formElements = Object.values(\n    findAddressAutofillInputs(parentForm, input)\n  );\n  if (!event.detail.elements.some((el) => formElements.includes(el))) {\n    return;\n  }\n\n  const structure = parseFormStructure(parentForm);\n  const structureRef = structure.find((s) => s.input === input);\n  const autofillInstanceSection = structureRef.section;\n\n  // Get list of form sections that were browser autofilled\n  const browserAutofilledSections = Array.from(\n    new Set(\n      structure\n        .filter((s) => event.detail.elements.includes(s.input))\n        .map((s) => s.section)\n    )\n  );\n\n  /**\n   * Skip confirming the autofill instance section if it's not included in\n   * what was autofilled by the browser\n   */\n  if (!browserAutofilledSections.includes(autofillInstanceSection)) {\n    return;\n  }\n\n  /**\n   * Skip confirmation if the impacted autocomplete \"section\" is not included in\n   * an explicitly defined array of form sections from a confirmOnBrowserAutofill object.\n   * e.g. The browser autofill event was triggered by inputs with \"section-billing\" in\n   * their `autocomplete` attribute value, but the `<input>` element targeted by this\n   * autofill instance in this has \"section-shipping\".\n   */\n  const optionsSections =\n    (typeof confirmOnBrowserAutofill === 'object' &&\n      confirmOnBrowserAutofill.sections) ||\n    [];\n  if (\n    optionsSections.length &&\n    !optionsSections.some((section) =>\n      browserAutofilledSections.includes(section)\n    )\n  ) {\n    return;\n  }\n\n  /**\n   * Modify optionsArg to restrict confirmation to only occur\n   * on the \"section\" impacted by the browser autofill event.\n   */\n  let optionsArg: AddressConfirmOptions =\n    typeof confirmOnBrowserAutofill === 'object'\n      ? confirmOnBrowserAutofill\n      : {};\n  optionsArg = {\n    ...optionsArg,\n    accessToken,\n    sections: [autofillInstanceSection]\n  };\n  await confirmAddress(parentForm, optionsArg);\n}\n", "import { isLocalServer, isMapboxDomain } from '.';\nimport { config } from '../config';\n\nimport { version } from '../../package.json';\n\nconst CONTRIBUTE_API_BASE_URL = 'https://contribute-api.mapbox.com/v1';\nconst CONTRIBUTE_API_STAGING_BASE_URL =\n  'https://contribute-api-staging.tilestream.net/v1';\nconst EDIT_SUGGESTION_ENDPOINT = 'edit-suggestion';\n\n/**\n * Object defining changes made to an address location feature.\n * Sent as part of payload to Contribute API.\n */\nexport interface ContributeChanges {\n  house?: string; // House number\n  street?: string; // Street name\n  address?: string; // Full address from Address Autofill SDK\n  location?: { longitude: number; latitude: number }; // Location of the user-adjusted pin\n}\n\nexport interface FeedbackArgs {\n  originalCoordinate: [number, number];\n  originalAddress: string;\n  changes: ContributeChanges;\n}\n\n/**\n * Sends feedback to the Mapbox Contribute API given an original Address Autofill API feature and a set of user-defined changes to the address or location.\n * @param accessToken - Mapbox access token\n * @param {FeedbackArgs} feedbackArgs - Data detailing the original address and location and any changes requested\n * @param {[number, number]} feedbackArgs.originalCoordinate - Original coordinate from the Address Autofill API\n * @param {string} feedbackArgs.originalAddress - Original full_address or place_name from the Address Autofill API\n * @param {ContributeChanges} feedbackArgs.changes - Address fields or location changed by a user\n */\nexport function sendFeedback(\n  accessToken: string,\n  feedbackArgs: FeedbackArgs\n): void {\n  // Skip sending feedback if disabled in global config\n  if (!config.feedbackEnabled) return;\n\n  // Direct feedback sent during development or from Mapbox site to staging server\n  const hostname = window.location.hostname;\n  const BASE_URL =\n    isLocalServer(hostname) || isMapboxDomain(hostname)\n      ? CONTRIBUTE_API_STAGING_BASE_URL\n      : CONTRIBUTE_API_BASE_URL;\n  const url = `${BASE_URL}/${EDIT_SUGGESTION_ENDPOINT}/address?access_token=${accessToken}`;\n\n  const { originalCoordinate, originalAddress, changes } = feedbackArgs;\n\n  const payload = {\n    action: 'update',\n    reason: 'incorrect_address',\n    location: {\n      // original location of the address (suggested by SDK/API)\n      longitude: originalCoordinate[0],\n      latitude: originalCoordinate[1]\n    },\n    userEmail: 'no-reply-autofill@mapbox.com',\n    changes,\n    placeName: originalAddress // Full (original) address from Address Autofill SDK\n  };\n\n  fetch(url, {\n    method: 'POST',\n    headers: new Headers({\n      'User-Agent': `mapbox-search-js.${version}.${navigator.userAgent}`,\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify(payload)\n  });\n}\n", "import { AddressAutofillFeatureSuggestion } from '@mapbox/search-js-core';\n\nimport { MapboxAddressMinimap } from './MapboxAddressMinimap';\nimport { HTMLScopedElement } from './HTMLScopedElement';\nimport {\n  AddressConfirmationEventTypes,\n  ConfirmationMinimapOptions\n} from './MapboxAddressConfirmation';\n\nimport { randomValidID } from '../utils';\nimport { bindElements, createElementFromString } from '../utils/dom';\nimport { ariaButtonKeyDown } from '../utils/aria';\nimport { AutofillValueMap, getAutofillSearchText } from '../utils/autofill';\nimport {\n  AddressConfirmShowResult,\n  createAddressElement\n} from '../utils/confirmation';\nimport { sendFeedback } from '../utils/contribute';\n\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { getIcon, getThemeCSS, Theme } from '../theme';\n\nimport style from '../style.css';\n\nconst TEMPLATE = createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MapboxAddressConfirmationFeature\">\n    <div class=\"Modal\" aria-modal=\"true\" role=\"dialog\">\n      <div class=\"ModalHeader\">\n        <svg viewBox=\"0 0 18 18\" class=\"Icon IconQuestion\"></svg>\n        <div class=\"ModalHeaderTitle\">Did you mean?</div>\n        <svg\n          viewBox=\"0 0 18 18\"\n          class=\"Icon IconClose\"\n          tabindex=\"0\"\n          role=\"button\"\n          title=\"Close\"\n          aria-label=\"Close\"\n          aria-expanded=\"true\"\n        ></svg>\n      </div>\n\n      <div class=\"ModalAddress ModalAddressApprove\"></div>\n            \n      <div class=\"ModalMap\">\n        <mapbox-address-minimap class=\"Minimap\"></mapbox-address-minimap>\n      </div>\n\n      <div\n        class=\"Button ButtonPrimary ButtonApprove\"\n        tabindex=\"0\"\n        role=\"button\"\n        aria-label=\"Yes\"\n      >\n        Yes\n      </div>\n      \n      <div\n        class=\"Button ButtonSecondary ButtonReject\"\n        tabindex=\"0\"\n        role=\"button\"\n        aria-label=\"No, use the address I provided\"\n      >\n        No, use the address I provided\n      </div>\n\n      <div class=\"ModalFooter\">\n          Your confirmation helps improve address data accuracy.\n      </div>\n    </div>\n  </div>\n</template>\n`);\n\ntype Binding = {\n  MapboxAddressConfirmationFeature: HTMLDivElement;\n  Modal: HTMLDivElement;\n  ModalHeaderTitle: HTMLDivElement;\n  ModalMap: HTMLDivElement;\n  Minimap: MapboxAddressMinimap;\n\n  IconQuestion: SVGSVGElement;\n  IconClose: SVGSVGElement;\n\n  ButtonApprove: HTMLDivElement;\n  ButtonReject: HTMLDivElement;\n\n  ModalAddressApprove: HTMLDivElement;\n};\n\n/**\n * {@link MapboxAddressConfirmationNoFeature} is a custom element that\n * will display a notification showing the closest suggested address to what a user has provided in the form.\n * Optionally, it can display a {@link MapboxAddressMinimap} for the suggesested address feature.\n *\n * This element is hosted by {@link MapboxAddressConfirmation} and should not be exposed to the user.\n */\nexport class MapboxAddressConfirmationFeature extends HTMLScopedElement<AddressConfirmationEventTypes> {\n  #binding: Binding;\n\n  get template(): HTMLTemplateElement {\n    return TEMPLATE;\n  }\n\n  get templateStyle(): string {\n    return style;\n  }\n\n  get templateUserStyle(): string {\n    return getThemeCSS('.MapboxAddressConfirmationFeature', this.theme);\n  }\n\n  #themeInternal: Theme = {};\n\n  get theme(): Theme {\n    return this.#themeInternal;\n  }\n\n  set theme(theme: Theme) {\n    this.#themeInternal = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(\n      getThemeCSS('.MapboxAddressConfirmationFeature', theme)\n    );\n\n    const { IconQuestion, IconClose } = this.#binding;\n\n    IconQuestion.innerHTML = getIcon('question', theme);\n    IconClose.innerHTML = getIcon('close', theme);\n  }\n\n  set footer(val: boolean | string) {\n    // Update modal footer, if specified\n    if (val === undefined) return;\n    const footerEl = this.querySelector('.ModalFooter');\n    if (typeof val === 'string') {\n      footerEl.textContent = val;\n      footerEl.removeAttribute('aria-hidden');\n    } else if (!val) {\n      footerEl.setAttribute('aria-hidden', 'true');\n    } else {\n      footerEl.removeAttribute('aria-hidden');\n    }\n  }\n\n  minimap: boolean | ConfirmationMinimapOptions = false;\n  accessToken: string;\n\n  #feature: AddressAutofillFeatureSuggestion;\n  #formValues: AutofillValueMap;\n\n  /**\n   * Update modal content with a given address suggestion\n   * @param feature - Suggested feature\n   * @param autofillValues - User-provided input values from address fields; used to backfill address-line2, address-line3\n   */\n  update = (\n    feature: AddressAutofillFeatureSuggestion,\n    autofillValues: AutofillValueMap\n  ): void => {\n    this.#feature = feature;\n    this.#formValues = autofillValues;\n    const { ModalMap, Minimap, ModalAddressApprove } = this.#binding;\n    // Update minimap if enabled\n    if (this.minimap) {\n      ModalMap.removeAttribute('aria-hidden');\n      Minimap.accessToken = this.accessToken;\n      if (typeof this.minimap === 'object') {\n        const { defaultMapStyle, theme, mapStyleMode, satelliteToggle } =\n          this.minimap;\n        defaultMapStyle &&\n          (Minimap.defaultMapStyle = this.minimap.defaultMapStyle);\n        theme && (Minimap.theme = this.minimap.theme);\n        mapStyleMode && (Minimap.mapStyleMode = mapStyleMode);\n        satelliteToggle !== undefined &&\n          (Minimap.satelliteToggle = satelliteToggle);\n      }\n      Minimap.feature = feature;\n    } else {\n      ModalMap.setAttribute('aria-hidden', 'true');\n    }\n\n    const approveAddress =\n      feature.properties.place_name ||\n      feature.properties.full_address ||\n      feature.properties.address;\n\n    // Set the text of the approve address.\n    ModalAddressApprove.innerHTML = '';\n    ModalAddressApprove.appendChild(\n      createAddressElement(autofillValues, approveAddress)\n    );\n  };\n\n  #handleClose = (): void => {\n    this.dispatchEvent(\n      new MapboxHTMLEvent<AddressConfirmShowResult['type']>('result', 'cancel')\n    );\n  };\n\n  approve = (): void => {\n    this.dispatchEvent(\n      new MapboxHTMLEvent<AddressConfirmShowResult['type']>('result', 'change')\n    );\n  };\n\n  reject = (): void => {\n    this.dispatchEvent(\n      new MapboxHTMLEvent<AddressConfirmShowResult['type']>(\n        'result',\n        'nochange'\n      )\n    );\n    // Send feedback to Contribute API with the address from the user's preferred form values\n    sendFeedback(this.accessToken, {\n      originalCoordinate: this.#feature.geometry.coordinates as [\n        number,\n        number\n      ],\n      originalAddress: this.#feature.properties.full_address,\n      changes: {\n        address: getAutofillSearchText(this.#formValues)\n      }\n    });\n  };\n\n  // IDs to connect for ARIA.\n  #modalID = randomValidID();\n  #modalHeaderTitleID = randomValidID();\n  #modalAddressApproveID = randomValidID();\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.#binding = bindElements<Binding>(this, {\n      MapboxAddressConfirmationFeature: '.MapboxAddressConfirmationFeature',\n      Modal: '.Modal',\n      ModalHeaderTitle: '.ModalHeaderTitle',\n      ModalMap: '.ModalMap',\n      Minimap: '.Minimap',\n\n      IconQuestion: '.IconQuestion',\n      IconClose: '.IconClose',\n\n      ButtonApprove: '.ButtonApprove',\n      ButtonReject: '.ButtonReject',\n\n      ModalAddressApprove: '.ModalAddressApprove'\n    });\n\n    const {\n      Modal,\n      ModalHeaderTitle,\n      IconClose,\n      ButtonApprove,\n      ButtonReject,\n      ModalAddressApprove\n    } = this.#binding;\n\n    // Setup IDREFs for WAI-ARIA.\n    Modal.setAttribute('aria-labelledby', this.#modalHeaderTitleID);\n    Modal.setAttribute('aria-describedby', this.#modalAddressApproveID);\n    IconClose.setAttribute('aria-controls', this.#modalID);\n\n    Modal.id = this.#modalID;\n    ModalHeaderTitle.id = this.#modalHeaderTitleID;\n    ModalAddressApprove.id = this.#modalAddressApproveID;\n\n    // Setup WAI-ARIA button keyboard events.\n    const buttons = Array.from(this.querySelectorAll('[role=\"button\"]'));\n    for (const button of buttons) {\n      button.addEventListener('keydown', ariaButtonKeyDown);\n    }\n\n    // Setup event listeners.\n    IconClose.addEventListener('click', this.#handleClose);\n    ButtonApprove.addEventListener('click', this.approve);\n    ButtonReject.addEventListener('click', this.reject);\n\n    const theme = this.theme;\n    if (theme) {\n      const { IconQuestion, IconClose } = this.#binding;\n\n      IconQuestion.innerHTML = getIcon('question', theme);\n      IconClose.innerHTML = getIcon('close', theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    const { IconClose, ButtonApprove } = this.#binding;\n\n    // Make sure to unbind event listeners.\n    IconClose.removeEventListener('click', this.#handleClose);\n    ButtonApprove.removeEventListener('click', this.approve);\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxAddressConfirmationFeature: typeof MapboxAddressConfirmationFeature;\n  }\n}\n\nwindow.MapboxAddressConfirmationFeature = MapboxAddressConfirmationFeature;\n\nif (!window.customElements.get('mapbox-address-confirmation-feature')) {\n  customElements.define(\n    'mapbox-address-confirmation-feature',\n    MapboxAddressConfirmationFeature\n  );\n}\n", "import { HTMLScopedElement } from './HTMLScopedElement';\nimport { AddressConfirmationEventTypes } from './MapboxAddressConfirmation';\n\nimport { randomValidID } from '../utils';\nimport { bindElements, createElementFromString } from '../utils/dom';\nimport { ariaButtonKeyDown } from '../utils/aria';\nimport { AutofillValueMap } from '../utils/autofill';\nimport {\n  AddressConfirmShowResult,\n  createAddressElement\n} from '../utils/confirmation';\n\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { getIcon, getThemeCSS, Theme } from '../theme';\n\nimport style from '../style.css';\n\nconst TEMPLATE = createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MapboxAddressConfirmationNoFeature\">\n    <div class=\"Modal\" aria-modal=\"true\" role=\"dialog\">\n      <div class=\"ModalHeader\">\n        <svg viewBox=\"0 0 18 18\" class=\"Icon IconQuestion\"></svg>\n        <div class=\"ModalHeaderTitle\">Confirm address</div>\n        <svg\n          viewBox=\"0 0 18 18\"\n          class=\"Icon IconClose\"\n          tabindex=\"0\"\n          role=\"button\"\n          title=\"Close\"\n          aria-label=\"Close\"\n          aria-expanded=\"true\"\n        ></svg>\n      </div>\n      <div class=\"ModalDescription\">\n        We couldn't verify this address. Please check that your information is correct before continuing.\n      </div>\n      <br />\n      <div class=\"ModalSubheader\">\n        You entered\n      </div>\n      <div class=\"ModalAddress\"></div>\n      <div\n        class=\"Button ButtonPrimary\"\n        tabindex=\"0\"\n        role=\"button\"\n        aria-label=\"Use the address I provided\"\n      >\n        Use the address I provided\n      </div>\n    </div>\n  </div>\n</template>\n`);\n\ntype Binding = {\n  Modal: HTMLDivElement;\n  ModalHeaderTitle: HTMLDivElement;\n\n  IconQuestion: SVGSVGElement;\n  IconClose: SVGSVGElement;\n\n  ButtonReject: HTMLDivElement;\n\n  ModalAddress: HTMLDivElement;\n};\n\n/**\n * {@link MapboxAddressConfirmationNoFeature} is a custom element that\n * will display a notification when an address entered into an HTML form\n * does not return any features when queried against the Address Autofill API.\n *\n * This element is hosted by {@link MapboxAddressConfirmation} and should not be exposed to the user.\n */\nexport class MapboxAddressConfirmationNoFeature extends HTMLScopedElement<AddressConfirmationEventTypes> {\n  #binding: Binding;\n\n  get template(): HTMLTemplateElement {\n    return TEMPLATE;\n  }\n\n  get templateStyle(): string {\n    return style;\n  }\n\n  get templateUserStyle(): string {\n    return getThemeCSS('.MapboxAddressConfirmationNoFeature', this.theme);\n  }\n\n  #themeInternal: Theme = {};\n\n  get theme(): Theme {\n    return this.#themeInternal;\n  }\n\n  set theme(theme: Theme) {\n    this.#themeInternal = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(\n      getThemeCSS('.MapboxAddressConfirmationNoFeature', theme)\n    );\n\n    const { IconQuestion, IconClose } = this.#binding;\n\n    IconQuestion.innerHTML = getIcon('question', theme);\n    IconClose.innerHTML = getIcon('close', theme);\n  }\n\n  /**\n   * Update modal content with user-provided address\n   * @param autofillValues - User-provided input values from address fields\n   */\n  update = (autofillValues: AutofillValueMap): void => {\n    // Set the text of the approve address.\n    const { ModalAddress } = this.#binding;\n    ModalAddress.innerHTML = '';\n    ModalAddress.appendChild(createAddressElement(autofillValues));\n  };\n\n  #handleClose = (): void => {\n    this.dispatchEvent(\n      new MapboxHTMLEvent<AddressConfirmShowResult['type']>('result', 'cancel')\n    );\n  };\n\n  reject = (): void => {\n    this.dispatchEvent(\n      new MapboxHTMLEvent<AddressConfirmShowResult['type']>(\n        'result',\n        'nochange'\n      )\n    );\n  };\n\n  // IDs to connect for ARIA.\n  #modalID = randomValidID();\n  #modalHeaderTitleID = randomValidID();\n  #modalAddressID = randomValidID();\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.#binding = bindElements<Binding>(this, {\n      Modal: '.Modal',\n      ModalHeaderTitle: '.ModalHeaderTitle',\n\n      IconQuestion: '.IconQuestion',\n      IconClose: '.IconClose',\n\n      ModalAddress: '.ModalAddress',\n\n      ButtonReject: '.Button'\n    });\n\n    const { Modal, ModalHeaderTitle, IconClose, ModalAddress, ButtonReject } =\n      this.#binding;\n\n    // Setup IDREFs for WAI-ARIA.\n    Modal.setAttribute('aria-labelledby', this.#modalHeaderTitleID);\n    Modal.setAttribute('aria-describedby', this.#modalAddressID);\n    IconClose.setAttribute('aria-controls', this.#modalID);\n\n    Modal.id = this.#modalID;\n    ModalHeaderTitle.id = this.#modalHeaderTitleID;\n    ModalAddress.id = this.#modalAddressID;\n\n    // Setup WAI-ARIA button keyboard events.\n    const buttons = Array.from(this.querySelectorAll('[role=\"button\"]'));\n    for (const button of buttons) {\n      button.addEventListener('keydown', ariaButtonKeyDown);\n    }\n\n    // Setup event listeners.\n    IconClose.addEventListener('click', this.#handleClose);\n    ButtonReject.addEventListener('click', this.reject);\n\n    const theme = this.theme;\n    if (theme) {\n      const { IconQuestion, IconClose } = this.#binding;\n\n      IconQuestion.innerHTML = getIcon('question', theme);\n      IconClose.innerHTML = getIcon('close', theme);\n    }\n  }\n\n  disconnectedCallback(): void {\n    const { IconClose, ButtonReject } = this.#binding;\n\n    // Make sure to unbind event listeners.\n    IconClose.removeEventListener('click', this.#handleClose);\n    ButtonReject.removeEventListener('click', this.reject);\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxAddressConfirmationNoFeature: typeof MapboxAddressConfirmationNoFeature;\n  }\n}\n\nwindow.MapboxAddressConfirmationNoFeature = MapboxAddressConfirmationNoFeature;\n\nif (!window.customElements.get('mapbox-address-confirmation-no-feature')) {\n  customElements.define(\n    'mapbox-address-confirmation-no-feature',\n    MapboxAddressConfirmationNoFeature\n  );\n}\n", "import {\n  AddressAutofillFeatureSuggestion,\n  AddressAutofillOptions,\n  AddressAutofillRetrieveResponse,\n  AddressAutofillSuggestion,\n  AddressAutofillSuggestionResponse,\n  AddressAutofillCore,\n  SearchSession\n} from '@mapbox/search-js-core';\n\nimport { MapboxSearchListbox } from './MapboxSearchListbox';\nimport { HTMLScopedElement } from './HTMLScopedElement';\n\nimport { tryParseJSON } from '../utils';\nimport {\n  distinctExactStreetResults,\n  fillFormWithFeature,\n  toggleAutocompletion\n} from '../utils/autofill';\nimport { tryConfirmBrowserAutofill } from '../utils/confirmation';\n\nimport { Theme } from '../theme';\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { config } from '../config';\nimport { initDetectBrowserAutofill } from '../utils/detect_browser_autofill';\nimport { AddressConfirmOptions } from './MapboxAddressConfirmation';\nimport { PopoverOptions } from '../utils/popover';\nimport {\n  createAriaLiveElement,\n  suppressExtensionsAutocomplete\n} from '../utils/aria';\nimport { handleStreetSelection } from '../utils/autofill';\nimport { SEARCH_SERVICE } from '../utils/services';\n\nexport type MapboxSearchListboxAutofillType =\n  MapboxSearchListbox<AddressAutofillSuggestion>;\n\ntype AddressAutofillEventTypes = {\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   *\n   * The underlying response from {@link AddressAutofillCore} is passed as the event's detail.\n   *\n   * @event suggest\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {AddressAutofillSuggestionResponse}\n   * @example\n   * ```typescript\n   * autofill.addEventListener('suggest', (event) => {\n   *   const suggestions = event.detail.suggestions;\n   *   // ...\n   * });\n   * ```\n   */\n  suggest: MapboxHTMLEvent<AddressAutofillSuggestionResponse>;\n  /**\n   * Fired when {@link AddressAutofillCore} has errored providing a list of suggestions.\n   *\n   * The underlying error is passed as the event's detail.\n   *\n   * @event suggesterror\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {Error}\n   * @example\n   * ```typescript\n   * autofill.addEventListener('suggesterror', (event) => {\n   *   const error = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  suggesterror: MapboxHTMLEvent<Error>;\n  /**\n   * Fired when the user has selected a suggestion, before the form is autofilled.\n   *\n   * The underlying response from {@link AddressAutofillCore} is passed as the event's detail.\n   *\n   * @event retrieve\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {AddressAutofillRetrieveResponse}\n   * @example\n   * ```typescript\n   * autofill.addEventListener('retrieve', (event) => {\n   *   const featureCollection = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  retrieve: MapboxHTMLEvent<AddressAutofillRetrieveResponse>;\n  /**\n   * Fired when the user has changed the `<input>` text.\n   *\n   * The new input value is passed as the event's detail.\n   *\n   * @event input\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {string}\n   * @example\n   * ```typescript\n   * autofill.addEventListener('input', (event) => {\n   *   if (e.target !== e.currentTarget) return;\n   *   const searchText = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  input: MapboxHTMLEvent<unknown>;\n};\n\n/**\n * `MapboxAddressAutofill`, also available as the element `<mapbox-address-autofill>`,\n * is an element that wraps an address [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) element with\n * intelligent, location-aware autocomplete functionality.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * This element must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) element, and the form\n * must have inputs with proper HTML `autocomplete` attributes. If your application works with browser autofill, you may already have\n * this functionality.\n * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n * - [Autofill](https://web.dev/learn/forms/autofill/)\n *\n * @class MapboxAddressAutofill\n * @example\n * <form>\n *   <mapbox-address-autofill access-token=\"<your access token here>\">\n *     <input type=\"text\" name=\"address\" autocomplete=\"shipping street-address\" />\n *   </mapbox-address-autofill>\n * </form>\n */\nexport class MapboxAddressAutofill extends HTMLScopedElement<AddressAutofillEventTypes> {\n  /**\n   * This is read by the Web Components API to affect the\n   * {@link MapboxAddressAutofill.attributeChangedCallback} below.\n   *\n   * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.\n   *\n   * @ignore\n   */\n  static observedAttributes: string[] = [\n    // Access token.\n    'access-token',\n    'browser-autofill-enabled',\n    // Theming, CSS.\n    'theme',\n    'popover-options',\n    'css-text',\n    // Underlying Address Autofill API options.\n    'language',\n    'country',\n    'bbox',\n    'limit',\n    'proximity',\n    'streets'\n  ];\n\n  #autofill = new AddressAutofillCore();\n  #session = new SearchSession<\n    AddressAutofillOptions,\n    AddressAutofillSuggestion,\n    AddressAutofillSuggestionResponse,\n    AddressAutofillRetrieveResponse\n  >(this.#autofill);\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * @name accessToken\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @example\n   * ```typescript\n   * autofill.accessToken = 'pk.my-mapbox-access-token';\n   * ```\n   */\n  get accessToken(): string {\n    return this.#autofill.accessToken;\n  }\n  set accessToken(newToken: string) {\n    this.#autofill.accessToken = newToken;\n  }\n\n  #input: HTMLInputElement;\n  #listbox = new MapboxSearchListbox();\n\n  #initialAutocompleteValue: string;\n\n  /**\n   * The `<input>` element wrapped by the autofill component.\n   *\n   * @name input\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {HTMLInputElement}\n   */\n  get input(): HTMLInputElement {\n    return this.#input;\n  }\n\n  /**\n   * Options to pass to the underlying {@link AddressAutofillCore} interface.\n   *\n   * @name options\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {AddressAutofillOptions}\n   * @example\n   * ```typescript\n   * autofill.options = {\n   *  language: 'en',\n   *  country: 'US',\n   * };\n   * ```\n   */\n  options: Partial<AddressAutofillOptions> = {};\n\n  /**\n   * The {@link Theme} to use for styling the autofill component.\n   *\n   * @name theme\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {Theme}\n   * @example\n   * ```typescript\n   * autofill.theme = {\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * };\n   * ```\n   */\n  get theme(): Theme {\n    return this.#listbox.theme;\n  }\n  set theme(theme: Theme) {\n    this.#listbox.theme = theme;\n  }\n\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   *\n   * @name popoverOptions\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {PopoverOptions}\n   * @example\n   * ```typescript\n   * autofill.popoverOptions = {\n   *   placement: 'top-start',\n   *   flip: true,\n   *   offset: 5\n   * };\n   * ```\n   */\n  get popoverOptions(): Partial<PopoverOptions> {\n    return this.#listbox.popoverOptions;\n  }\n  set popoverOptions(newOptions: Partial<PopoverOptions>) {\n    this.#listbox.popoverOptions = newOptions;\n  }\n\n  /**\n   * If true, forms autofilled by the browser will prompt the\n   * {@link confirmAddress} dialog for user confirmation.\n   * An {@link AddressConfirmOptions} object can also be passed\n   * to prompt {@link confirmAddress} with custom options.\n   * Defaults to false.\n   *\n   * @name confirmOnBrowserAutofill\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {boolean | AddressConfirmOptions}\n   * @example\n   * ```typescript\n   * autofill.confirmOnBrowserAutofill = {\n   *   minimap: true,\n   *   skipConfirmModal: (feature) =>\n   *     ['exact', 'high'].includes(\n   *       feature.properties.match_code.confidence\n   *     )\n   * };\n   * ```\n   */\n  confirmOnBrowserAutofill: boolean | AddressConfirmOptions = false;\n\n  #browserAutofillEnabled? = false;\n\n  /**\n   * Enables the browser's autocomplete popup to show during the first two typed characters while Mapbox results are suppressed. Defaults to false.\n   *\n   * **Note:** Due to varying specifications, efforts to suppress browser autocomplete behavior may not work on all browsers.\n   *\n   * @name browserAutofillEnabled\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @type {boolean}\n   * @example\n   * ```typescript\n   * autofill.browserAutofillEnabled = true;\n   * ```\n   */\n  get browserAutofillEnabled(): boolean {\n    return this.#browserAutofillEnabled;\n  }\n  set browserAutofillEnabled(enable: boolean) {\n    this.#browserAutofillEnabled = enable;\n  }\n\n  #handleSuggest = (result: AddressAutofillSuggestionResponse): void => {\n    const filteredSuggestions = result?.suggestions\n      ? distinctExactStreetResults(result.suggestions)\n      : null;\n    this.#listbox.handleSuggest(filteredSuggestions);\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('suggest', result));\n  };\n\n  #handleSuggestError = (error: Error): void => {\n    this.#listbox.handleError();\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('suggesterror', error));\n  };\n\n  #handleRetrieve = (result: AddressAutofillRetrieveResponse): void => {\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('retrieve', result));\n\n    this.retrieveFeature = result.features?.[0];\n\n    if (!this.#input) {\n      return;\n    }\n\n    const featureCollection = result;\n    if (\n      !featureCollection ||\n      !featureCollection.features ||\n      !featureCollection.features.length\n    ) {\n      return;\n    }\n\n    fillFormWithFeature(featureCollection.features[0], this.#input);\n  };\n\n  // Called when content changes.\n  #handleObserve = (): void => {\n    try {\n      const input: HTMLInputElement = this.querySelector('input') ?? null;\n\n      this.#input = input;\n      this.#listbox.input = input;\n    } catch (e) {\n      this.#input = null;\n      this.#listbox.input = null;\n\n      console.error(e.message || e);\n    }\n  };\n\n  #observer = new MutationObserver(this.#handleObserve);\n\n  #handleBrowserAutofill = (e: CustomEvent): void => {\n    // Hide listbox, if showing\n    this.#listbox.blur();\n\n    // Address confirmation\n    tryConfirmBrowserAutofill(\n      this.#input,\n      e,\n      this.confirmOnBrowserAutofill,\n      this.accessToken\n    );\n  };\n\n  retrieveFeature: AddressAutofillFeatureSuggestion = null;\n\n  /**\n   * A callback providing the opportunity to validate and/or manipulate the input text before it triggers a search, for example by using a regular expression.\n   * If a truthy string value is returned, it will be passed into the underlying search API. If `null`, `undefined` or empty string is returned, no search request will be performed.\n   *\n   * @name interceptSearch\n   * @instance\n   * @memberof MapboxAddressAutofill\n   * @example\n   * Enable search only when the input value length is more than 3 characters.\n   * ```typescript\n   * search.interceptSearch = (val) => val?.length > 3 ? val : null;\n   * ```\n   */\n  interceptSearch: (val: string) => string = null;\n\n  #onHandleInput = (e: MapboxHTMLEvent<string>): void => {\n    // Manually bubble up the event.\n    this.dispatchEvent(e.clone());\n\n    const inputText = e.detail;\n\n    // if following flag set to true and search text is equal or less than 2 characters - enable browser autofill.\n    const enableBrowserAutocomplete =\n      this.browserAutofillEnabled === true && inputText?.length <= 2;\n\n    toggleAutocompletion(\n      this.#input,\n      this.#initialAutocompleteValue,\n      enableBrowserAutocomplete\n    );\n\n    const alteredText = this.interceptSearch && this.interceptSearch(inputText);\n\n    const searchText = this.interceptSearch ? alteredText : inputText;\n\n    if ((this.interceptSearch && !alteredText) || searchText?.length <= 2) {\n      this.#listbox.handleSuggest(null);\n      return;\n    }\n\n    this.#session.suggest(searchText, this.options);\n  };\n\n  #onHandleSelect = (e: MapboxHTMLEvent<AddressAutofillSuggestion>): void => {\n    const suggestion = e.detail;\n    if (e.detail.accuracy !== 'street') {\n      toggleAutocompletion(this.#input, this.#initialAutocompleteValue, true);\n\n      this.#session.retrieve(suggestion, this.options);\n    } else {\n      handleStreetSelection(\n        this.#input,\n        this.#initialAutocompleteValue,\n        suggestion\n      );\n    }\n  };\n\n  #onHandleBlur = (): void => {\n    toggleAutocompletion(this.#input, this.#initialAutocompleteValue, true);\n    // Abort any in-progress operations.\n    this.#session.abort();\n  };\n\n  #onHandleFocus = (): void => {\n    const enableBrowserAutocomplete =\n      this.browserAutofillEnabled === true && this.#input.value?.length <= 2;\n    toggleAutocompletion(\n      this.#input,\n      this.#initialAutocompleteValue,\n      enableBrowserAutocomplete\n    );\n  };\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    config.autofillSessionEnabled = true;\n    this.#session.sessionToken = config.autofillSessionToken;\n\n    this.#listbox.autofillHost = this;\n    this.#listbox.searchService = SEARCH_SERVICE.AddressAutofill;\n\n    const input: HTMLInputElement = this.querySelector('input') ?? null;\n\n    // Setup observer handler.\n    this.#observer.observe(this, {\n      subtree: true,\n      childList: true\n    });\n\n    this.#handleObserve();\n\n    this.#listbox.addEventListener('input', this.#onHandleInput);\n    this.#listbox.addEventListener('select', this.#onHandleSelect);\n    this.#listbox.addEventListener('blur', this.#onHandleBlur);\n    this.#listbox.addEventListener('focus', this.#onHandleFocus);\n\n    this.#session.addEventListener('suggest', this.#handleSuggest);\n    this.#session.addEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.addEventListener('retrieve', this.#handleRetrieve);\n\n    document.body.appendChild(this.#listbox);\n\n    if (input) {\n      input.insertAdjacentElement(\n        'beforebegin',\n        createAriaLiveElement(this.#listbox.dataSeed)\n      );\n      suppressExtensionsAutocomplete(input);\n      this.#initialAutocompleteValue = input.autocomplete;\n    }\n\n    // Setup browser autofill detection\n    initDetectBrowserAutofill();\n    window.addEventListener('browserautofill', this.#handleBrowserAutofill);\n  }\n\n  disconnectedCallback(): void {\n    this.#listbox.remove();\n\n    this.#listbox.removeEventListener('input', this.#onHandleInput);\n    this.#listbox.removeEventListener('select', this.#onHandleSelect);\n    this.#listbox.removeEventListener('blur', this.#onHandleBlur);\n    this.#listbox.removeEventListener('focus', this.#onHandleFocus);\n\n    this.#session.removeEventListener('suggest', this.#handleSuggest);\n    this.#session.removeEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.removeEventListener('retrieve', this.#handleRetrieve);\n\n    this.#observer.disconnect();\n\n    window.removeEventListener('browserautofill', this.#handleBrowserAutofill);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (name === 'access-token') {\n      this.#autofill.accessToken = newValue;\n      return;\n    }\n\n    if (name === 'browser-autofill-enabled') {\n      this.#browserAutofillEnabled = Boolean(newValue);\n      return;\n    }\n\n    if (name === 'theme') {\n      this.theme = tryParseJSON(newValue);\n      return;\n    }\n\n    if (name === 'popover-options') {\n      this.popoverOptions = tryParseJSON(newValue);\n      return;\n    }\n\n    // Convert to the proper name for options.\n    // Example: eta-type => eta_type\n    const optionName = name.split('-').join('_');\n\n    if (!newValue) {\n      delete this.options[optionName];\n    }\n\n    // Otherwise, assume it's a Address Autofill API option.\n    this.options[optionName] = newValue;\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * Focuses the wrapped input element.\n   */\n  focus(): void {\n    this.#listbox.focus();\n  }\n\n  /**\n   * Trigger side effects from a retrieve event with a simulated result.\n   * Used by {@link confirmAddress} when a suggested addresses is accepted.\n   *\n   * @ignore\n   */\n  simulateRetrieve(feature: AddressAutofillFeatureSuggestion): void {\n    const input = this.input;\n    if (input) {\n      input.dataset['mapboxSuccess'] = 'true';\n    }\n    this.#listbox.hideResults();\n\n    const simResult: AddressAutofillRetrieveResponse = {\n      type: 'FeatureCollection',\n      features: [feature],\n      url: ''\n    };\n\n    this.#handleRetrieve(simResult);\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxAddressAutofill: typeof MapboxAddressAutofill;\n  }\n}\n\nwindow.MapboxAddressAutofill = MapboxAddressAutofill;\n\nif (!window.customElements.get('mapbox-address-autofill')) {\n  customElements.define('mapbox-address-autofill', MapboxAddressAutofill);\n}\n", "/**\n * Detects browser autofill events and emits custom events\n * Reference: https://github.com/matteobad/detect-autofill\n */\n\nimport { debounce } from '@mapbox/search-js-core';\n\nimport { addDocumentStyle } from './dom';\n\nimport browserAutofillCss from './detect_browser_autofill.css';\nimport { config } from '../config';\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\n\n// Note: if we decide to support legacy browsers in future, we may need to polyfill CustomEvent\n// import 'custom-event-polyfill';\n\nexport const ATTR_NAME = 'browser-autofilled';\nlet AUTOFILLED_ELEMENTS: HTMLElement[] = [];\n\nfunction dispatchBrowserAutofillEvent() {\n  window.dispatchEvent(\n    new window.CustomEvent('browserautofill', {\n      bubbles: true,\n      cancelable: true,\n      detail: { elements: AUTOFILLED_ELEMENTS }\n    })\n  );\n  AUTOFILLED_ELEMENTS = []; // reset element array\n}\n\n/**\n * Debounce interval set at 5ms, as it seems like the delay between successive fields (i.e. inputs)\n * being autofilled by the browser is roughly 1-2ms.\n *\n * This ensures that all fields affected by the autofill event have been populated before signaling\n * the event to the rest of the application.\n */\nconst debouncedAutofill = debounce(dispatchBrowserAutofillEvent, 5);\n\n/**\n * Manage an input element when its value is autocompleted\n * by the browser\n *\n * @param {HtmlInputElement} element\n */\nexport function browserAutofill(element: HTMLInputElement): void {\n  if (element.hasAttribute(ATTR_NAME)) return;\n  element.setAttribute(ATTR_NAME, '');\n\n  AUTOFILLED_ELEMENTS.push(element);\n\n  debouncedAutofill();\n}\n\n/**\n * Manage an input element when its autocompleted value is\n * removed by the browser\n *\n * @param {HtmlInputElement} element\n */\nexport function cancelBrowserAutofill(element: HTMLInputElement): void {\n  if (!element.hasAttribute(ATTR_NAME)) return;\n  element.removeAttribute(ATTR_NAME);\n}\n\n/**\n * Handler for -webkit based browser that listen for a custom\n * animation create using the :pseudo-selector in the stylesheet.\n * Works with Chrome, Safari\n *\n * @param {AnimationEvent} event\n */\nexport function onAnimationStart(event: AnimationEvent): void {\n  'onbrowserautofillstart' === event.animationName\n    ? browserAutofill(event.target as HTMLInputElement)\n    : cancelBrowserAutofill(event.target as HTMLInputElement);\n}\n\n/**\n * Handler for non-webkit based browser that listen for input\n * event to trigger the autocomplete-cancel process.\n * Works with Firefox, Edge, IE11\n *\n * @param {InputEvent} event\n */\nexport function onInput(event: InputEvent): void {\n  const targetEl = event.target as HTMLInputElement;\n  targetEl.nodeName.toLowerCase() !== 'select' &&\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  !(event as any).simulated &&\n  !(event instanceof MapboxHTMLEvent) &&\n  ('insertReplacementText' === event.inputType || !('data' in event))\n    ? browserAutofill(targetEl)\n    : cancelBrowserAutofill(targetEl);\n}\n\n/**\n * Enables detection of browser autofill events\n */\nexport function initDetectBrowserAutofill(): void {\n  // Set global state to ensure event listeners aren't duplicated\n  if (config.detectBrowserAutofillEnabled) {\n    return;\n  } else {\n    config.detectBrowserAutofillEnabled = true;\n  }\n\n  addDocumentStyle(browserAutofillCss);\n  document.addEventListener('animationstart', onAnimationStart, true);\n  document.addEventListener('input', onInput, true);\n}\n", "import {\n  featureToSuggestion,\n  LngLatBounds,\n  SearchSession,\n  SearchBoxCore,\n  SearchBoxOptions,\n  SearchBoxRetrieveResponse,\n  SearchBoxSuggestion,\n  SearchBoxSuggestionResponse,\n  SearchBoxFeatureSuggestion\n} from '@mapbox/search-js-core';\nimport mapboxgl from 'mapbox-gl';\nimport subtag from 'subtag';\n\nimport { MapboxSearchListbox } from './MapboxSearchListbox';\nimport { HTMLScopedElement } from './HTMLScopedElement';\n\nimport { tryParseJSON } from '../utils';\nimport { bboxViewport, FLY_TO_SPEED, getMaxZoom } from '../utils/map';\n\nimport { Theme, getIcon, getThemeCSS } from '../theme';\nimport { MapboxHTMLEvent } from '../MapboxHTMLEvent';\nimport { SEARCHBOX_TEMPLATE } from '../constants';\n\nimport style from '../style.css';\nimport { PopoverOptions } from '../utils/popover';\nimport { createAriaLiveElement } from '../utils/aria';\nimport { bindElements } from '../utils/dom';\nimport { SEARCH_SERVICE } from '../utils/services';\nimport localization from '../utils/localization';\n\n/**\n * Proximity is designed for local scale. If the user is looking at the whole world,\n * it doesn't make sense to factor in the arbitrary center of the map.\n */\nconst MAX_ZOOM = 9;\n\ntype Binding = {\n  /**\n   * Wrapper around the entire SearchBox component.\n   */\n  SearchBox: HTMLElement;\n  /**\n   * Container for search icon preceding input\n   */\n  SearchIcon: HTMLDivElement;\n  /**\n   * The input element accepting search text\n   */\n  Input: HTMLInputElement;\n  /**\n   * Button element used to clear the input element of text\n   */\n  ClearBtn: HTMLButtonElement;\n  /**\n   * Animated loading icon triggered by a keystroke\n   */\n  LoadingIcon: HTMLDivElement;\n};\n\nexport type MapboxSearchListboxSearchType =\n  MapboxSearchListbox<SearchBoxSuggestion>;\n\ntype SearchEventTypes = {\n  /**\n   * Fired when the user is typing and is provided a list of suggestions.\n   *\n   * The underlying response from {@link SearchBoxCore} is passed as the event's detail.\n   *\n   * @event suggest\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {SearchBoxSuggestionResponse}\n   * @example\n   * ```typescript\n   * search.addEventListener('suggest', (event) => {\n   *   const suggestions = event.detail.suggestions;\n   *   // ...\n   * });\n   * ```\n   */\n  suggest: MapboxHTMLEvent<SearchBoxSuggestionResponse>;\n  /**\n   * Fired when {@link SearchBoxCore} has errored providing a list of suggestions.\n   *\n   * The underlying error is passed as the event's detail.\n   *\n   * @event suggesterror\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {Error}\n   * @example\n   * ```typescript\n   * search.addEventListener('suggesterror', (event) => {\n   *   const error = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  suggesterror: MapboxHTMLEvent<Error>;\n  /**\n   * Fired when the user has selected a suggestion.\n   *\n   * The underlying response from {@link SearchBoxCore} is passed as the event's detail.\n   *\n   * @event retrieve\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {SearchBoxRetrieveResponse}\n   * @example\n   * ```typescript\n   * search.addEventListener('retrieve', (event) => {\n   *   const featureCollection = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  retrieve: MapboxHTMLEvent<SearchBoxRetrieveResponse>;\n  /**\n   * Fired when the user has changed the `<input>` text.\n   *\n   * The new input value is passed as the event's detail.\n   *\n   * @event input\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {string}\n   * @example\n   * ```typescript\n   * search.addEventListener('input', (event) => {\n   *   if (e.target !== e.currentTarget) return;\n   *   const searchText = event.detail;\n   *   // ...\n   * });\n   * ```\n   */\n  input: MapboxHTMLEvent<unknown>;\n};\n\n/**\n * `MapboxSearchBox`, also available as the element `<mapbox-search-box>`,\n * is an element that lets you search for places, addresses, and landmarks using\n * the [Mapbox Search Box API](https://docs.mapbox.com/api/search/search-box/).\n *\n * It can control a [Mapbox GL JS](https://docs.mapbox.com/mapbox-gl-js/guides/) map\n * to zoom to the selected result.\n *\n * Additionally, `MapboxSearchBox` implements the [IControl](https://www.mapbox.com/mapbox-gl-js/api/markers/#icontrol)\n * interface.\n *\n * To use this element, you must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * @class MapboxSearchBox\n * @example\n * ```typescript\n * const search = new MapboxSearchBox();\n * search.accessToken = '<your access token here>';\n * map.addControl(search);\n * ```\n * @example\n * <mapbox-search-box\n *   access-token=\"<your access token here>\"\n *   proximity=\"0,0\"\n * >\n * </mapbox-search-box>\n */\nexport class MapboxSearchBox\n  extends HTMLScopedElement<SearchEventTypes>\n  implements mapboxgl.IControl\n{\n  /**\n   * This is read by the Web Components API to affect the\n   * {@link MapboxSearchBox#attributeChangedCallback} below.\n   *\n   * All of these are passthroughs to the underlying {@link MapboxSearchListbox}.\n   *\n   * @ignore\n   */\n  static observedAttributes: string[] = [\n    // Access token.\n    'access-token',\n    // Theming.\n    'theme',\n    'popover-options',\n    'placeholder',\n    // Underlying Search Box API options.\n    'language',\n    'country',\n    'bbox',\n    'limit',\n    'navigation-profile',\n    'origin',\n    'proximity',\n    'eta-type',\n    'types'\n  ];\n\n  #binding: Binding;\n\n  #search = new SearchBoxCore({});\n  #session = new SearchSession<\n    SearchBoxOptions,\n    SearchBoxSuggestion,\n    SearchBoxSuggestionResponse,\n    SearchBoxRetrieveResponse\n  >(this.#search);\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * @name accessToken\n   * @instance\n   * @memberof MapboxSearchBox\n   * @example\n   * ```typescript\n   * search.accessToken = 'pk.my-mapbox-access-token';\n   * ```\n   */\n  get accessToken(): string {\n    return this.#search.accessToken;\n  }\n  set accessToken(newToken: string) {\n    this.#search.accessToken = newToken;\n  }\n\n  /**\n   * The value of the input element.\n   *\n   * @name value\n   * @instance\n   * @memberof MapboxSearchBox\n   * @example\n   * ```typescript\n   * console.log(search.value);\n   * ```\n   */\n  get value(): string {\n    return this.#input.value;\n  }\n  set value(newValue: string) {\n    this.#input.value = newValue;\n  }\n\n  #map: mapboxgl.Map | null = null;\n\n  #input: HTMLInputElement;\n  #listbox: MapboxSearchListboxSearchType = new MapboxSearchListbox();\n\n  /**\n   * The `<input>` element wrapped by the autofill component.\n   *\n   * @name input\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {HTMLInputElement}\n   */\n  get input(): HTMLInputElement {\n    return this.#input;\n  }\n\n  protected override get template(): HTMLTemplateElement {\n    return SEARCHBOX_TEMPLATE;\n  }\n\n  protected override get templateStyle(): string {\n    return style;\n  }\n\n  protected override get templateUserStyle(): string {\n    return getThemeCSS('.SearchBox', this.#listbox.theme);\n  }\n\n  /**\n   * Options to pass to the underlying {@link SearchBoxCore} interface.\n   *\n   * @name options\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {SearchBoxOptions}\n   * @example\n   * ```typescript\n   * search.options = {\n   *  language: 'en',\n   *  country: 'US',\n   * };\n   * ```\n   */\n  options: Partial<SearchBoxOptions> = {};\n\n  /**\n   * The {@link Theme} to use for styling the suggestion box and search box.\n   *\n   * @name theme\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {Theme}\n   * @example\n   * ```typescript\n   * search.theme = {\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   },\n   *   cssText: \".Input:active { opacity: 0.9; }\"\n   * };\n   * ```\n   */\n  get theme(): Theme {\n    return this.#listbox.theme;\n  }\n  set theme(theme: Theme) {\n    this.#listbox.theme = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(getThemeCSS('.SearchBox', theme));\n    this.#listbox.updatePopover();\n\n    const { SearchIcon } = this.#binding;\n    SearchIcon.innerHTML = getIcon('search', theme);\n  }\n\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   *\n   * @name popoverOptions\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {PopoverOptions}\n   * @example\n   * ```typescript\n   * search.popoverOptions = {\n   *   placement: 'top-start',\n   *   flip: true,\n   *   offset: 5\n   * };\n   * ```\n   */\n  get popoverOptions(): Partial<PopoverOptions> {\n    return this.#listbox.popoverOptions;\n  }\n  set popoverOptions(newOptions: Partial<PopoverOptions>) {\n    this.#listbox.popoverOptions = newOptions;\n  }\n\n  #getDefaultPlaceholder(): string {\n    if (this.options.language) {\n      const firstLanguage = this.options.language.split(',')[0];\n      const language = subtag.language(firstLanguage);\n      const localizedValue = localization.placeholder[language];\n      if (localizedValue) return localizedValue;\n    }\n    return 'Search';\n  }\n\n  #placeholder: string;\n\n  /**\n   * The input element's placeholder text. The default value may be localized if {@link SearchBoxOptions#language} is set.\n   *\n   * @name placeholder\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {string}\n   */\n  get placeholder(): string {\n    return this.#placeholder || this.#getDefaultPlaceholder();\n  }\n\n  set placeholder(text: string) {\n    this.#placeholder = text;\n    if (this.#input) {\n      this.#input.placeholder = this.placeholder;\n      this.#input.setAttribute('aria-label', this.placeholder);\n    }\n  }\n\n  #handleSuggest = (result: SearchBoxSuggestionResponse): void => {\n    this.#setActionIcons();\n\n    this.#listbox.handleSuggest(result?.suggestions || null);\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('suggest', result));\n  };\n\n  #handleSuggestError = (error: Error): void => {\n    this.#setActionIcons();\n\n    this.#listbox.handleError();\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('suggesterror', error));\n  };\n\n  #handleRetrieve = (result: SearchBoxRetrieveResponse): void => {\n    this.#setActionIcons();\n\n    // Manually bubble up the event.\n    this.dispatchEvent(new MapboxHTMLEvent('retrieve', result));\n\n    const featureCollection = result;\n    if (!featureCollection || !featureCollection.features.length) {\n      return;\n    }\n\n    // Set value of the input.\n    const suggestion = featureToSuggestion(featureCollection.features[0]);\n    this.#input.value = suggestion.name;\n\n    const map = this.#map;\n    if (!map) {\n      return;\n    }\n\n    const feature = featureCollection.features[0];\n\n    if (!feature) {\n      return;\n    }\n\n    const placeType = feature.properties.feature_type;\n\n    const bounds = feature.properties.bbox;\n    if (bounds) {\n      map.flyTo(bboxViewport(map, LngLatBounds.convert(bounds).toFlatArray()));\n    } else {\n      const center = feature.geometry.coordinates as mapboxgl.LngLatLike;\n      const zoom = getMaxZoom(placeType);\n\n      map.flyTo({\n        center,\n        zoom,\n        speed: FLY_TO_SPEED\n      });\n    }\n\n    // Add marker to map\n    if (this.marker && this.mapboxgl) {\n      this.#handleMarker(feature);\n    }\n  };\n\n  #mapMarker: mapboxgl.Marker;\n\n  /**\n   * Handle the removal of a feature marker\n   */\n  #removeMarker = (): void => {\n    if (this.#mapMarker) {\n      this.#mapMarker.remove();\n      this.#mapMarker = null;\n    }\n  };\n\n  /**\n   * Handle the placement of a marker for the selected feature\n   */\n  #handleMarker = (feature: SearchBoxFeatureSuggestion | null): void => {\n    // clean up any old marker that might be present\n    if (!this.#map) {\n      return;\n    }\n    this.#removeMarker();\n\n    if (!feature) return;\n\n    const defaultMarkerOptions = {\n      color: '#4668F2'\n    };\n    const markerOptions = {\n      ...defaultMarkerOptions,\n      ...(typeof this.marker === 'object' && this.marker)\n    };\n    this.#mapMarker = new this.mapboxgl.Marker(markerOptions);\n    if (\n      feature.geometry &&\n      feature.geometry.type &&\n      feature.geometry.type === 'Point' &&\n      feature.geometry.coordinates\n    ) {\n      this.#mapMarker\n        .setLngLat(feature.geometry.coordinates as mapboxgl.LngLatLike)\n        .addTo(this.#map);\n    }\n  };\n\n  /**\n   * A callback providing the opportunity to validate and/or manipulate the input text before it triggers a search, for example by using a regular expression.\n   * If a truthy string value is returned, it will be passed into the underlying search API. If `null`, `undefined` or empty string is returned, no search request will be performed.\n   *\n   * @name interceptSearch\n   * @instance\n   * @memberof MapboxSearchBox\n   * @example\n   * Enable search only when the input value length is more than 3 characters.\n   * ```typescript\n   * search.interceptSearch = (val) => val?.length > 3 ? val : null;\n   * ```\n   */\n  interceptSearch: (val: string) => string = null;\n\n  #onHandleInput = (e: MapboxHTMLEvent<string>): void => {\n    // Manually bubble up the event.\n    this.dispatchEvent(e.clone());\n\n    const inputText = e.detail;\n\n    // Clear text, suggestions, markers, etc. if empty string\n    if (!inputText) {\n      this.#handleClear();\n      return;\n    }\n\n    const alteredText = this.interceptSearch && this.interceptSearch(inputText);\n\n    const searchText = this.interceptSearch ? alteredText : inputText;\n\n    if (this.interceptSearch && !alteredText) {\n      this.#listbox.hideResults();\n      return;\n    }\n\n    this.#session.suggest(searchText, this.options);\n\n    this.#setActionIcons(true);\n  };\n\n  #onHandleSelect = (e: MapboxHTMLEvent<SearchBoxSuggestion>): void => {\n    const suggestion = e.detail;\n    this.#session.retrieve(suggestion, this.options);\n\n    this.#setActionIcons(true);\n  };\n\n  #onHandleBlur = (): void => {\n    // Abort any in-progress operations.\n    this.#session.abort();\n  };\n\n  #setActionIcons = (loading = false): void => {\n    if (loading) {\n      this.#binding.ClearBtn.style.display = 'none';\n      this.#binding.LoadingIcon.style.display = 'block';\n    } else {\n      this.#binding.LoadingIcon.style.display = 'none';\n      this.#binding.ClearBtn.style.display = this.value ? 'block' : 'none';\n    }\n  };\n\n  #handleClear = (): void => {\n    this.value = '';\n    this.#setActionIcons();\n    this.#handleMarker(null);\n    this.#listbox.handleSuggest(null);\n  };\n\n  /** @section {Map settings} */\n\n  /**\n   * A [mapbox-gl](https://github.com/mapbox/mapbox-gl-js) instance to use when creating [Markers](https://docs.mapbox.com/mapbox-gl-js/api/#marker). Required if {@link MapboxSearchBox#marker} is `true`.\n   *\n   * @name mapboxgl\n   * @instance\n   * @memberof MapboxSearchBox\n   */\n  mapboxgl: typeof mapboxgl;\n\n  /**\n   * If `true`, a [Marker](https://docs.mapbox.com/mapbox-gl-js/api/#marker) will be added to the map at the location of the user-selected result using a default set of Marker options.  If the value is an object, the marker will be constructed using these options. If `false`, no marker will be added to the map. Requires that {@link MapboxSearchBox#mapboxgl} also be set.\n   *\n   * @name marker\n   * @instance\n   * @memberof MapboxSearchBox\n   * @type {boolean | mapboxgl.MarkerOptions}\n   * @example\n   * ```typescript\n   * search.marker = {\n   *   color: 'red',\n   *   draggable: true\n   * };\n   * ```\n   */\n  marker: boolean | mapboxgl.MarkerOptions = true;\n\n  override connectedCallback(): void {\n    super.connectedCallback();\n\n    this.#binding = bindElements<Binding>(this, {\n      SearchBox: '.SearchBox',\n      SearchIcon: '.SearchIcon',\n      Input: '.Input',\n      ClearBtn: '.ClearBtn',\n      LoadingIcon: '.LoadingIcon'\n    });\n\n    // Initialize theme if not set before connectedCallback\n    this.theme = { ...this.theme };\n\n    const { Input, ClearBtn } = this.#binding;\n\n    this.#input = Input;\n    this.#listbox.input = Input;\n    this.#listbox.searchService = SEARCH_SERVICE.SearchBox;\n\n    this.#listbox.addEventListener('input', this.#onHandleInput);\n    this.#listbox.addEventListener('select', this.#onHandleSelect);\n    this.#listbox.addEventListener('blur', this.#onHandleBlur);\n\n    this.#session.addEventListener('suggest', this.#handleSuggest);\n    this.#session.addEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.addEventListener('retrieve', this.#handleRetrieve);\n\n    ClearBtn.addEventListener('click', this.#handleClear);\n\n    this.placeholder = this.#placeholder;\n\n    document.body.appendChild(this.#listbox);\n\n    if (Input) {\n      // Remove any existing aria-live element that may be left over from, e.g., cloning the node\n      if (Input.previousElementSibling.hasAttribute('aria-live')) {\n        Input.previousElementSibling.remove();\n      }\n      Input.insertAdjacentElement(\n        'beforebegin',\n        createAriaLiveElement(this.#listbox.dataSeed)\n      );\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.#listbox.remove();\n    this.#listbox.input = null;\n\n    this.#listbox.removeEventListener('input', this.#onHandleInput);\n    this.#listbox.removeEventListener('select', this.#onHandleSelect);\n    this.#listbox.removeEventListener('blur', this.#onHandleBlur);\n\n    this.#session.removeEventListener('suggest', this.#handleSuggest);\n    this.#session.removeEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.removeEventListener('retrieve', this.#handleRetrieve);\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (name === 'access-token') {\n      this.#search.accessToken = newValue;\n      return;\n    }\n\n    if (name === 'theme') {\n      this.theme = tryParseJSON(newValue);\n      return;\n    }\n\n    if (name === 'popover-options') {\n      this.popoverOptions = tryParseJSON(newValue);\n      return;\n    }\n\n    if (name === 'placeholder') {\n      this.placeholder = newValue;\n      return;\n    }\n\n    // Convert to the proper name for options.\n    // Example: eta-type => eta_type\n    const optionName = name.split('-').join('_');\n\n    if (!newValue) {\n      delete this.options[optionName];\n    }\n\n    // Otherwise, assume it's a Search Box API option.\n    this.options[optionName] = newValue;\n\n    if (optionName === 'language') {\n      this.placeholder = this.#placeholder;\n    }\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * Focuses the input element.\n   */\n  focus(): void {\n    this.#listbox.focus();\n  }\n\n  /**\n   * Sets the input text and triggers a search programmatically\n   */\n  search(text: string): void {\n    this.value = text;\n    this.#onHandleInput(new MapboxHTMLEvent('input', text));\n  }\n\n  #handleMoveEnd = (): void => {\n    const map = this.#map;\n    const options = { ...this.options };\n\n    if (map.getZoom() <= MAX_ZOOM) {\n      delete options.proximity;\n      this.options = options;\n\n      return;\n    }\n\n    const center = map.getCenter();\n    this.options = {\n      ...options,\n      proximity: center\n    };\n  };\n\n  /** @section {Map binding} */\n\n  /**\n   * Connects the search box to a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map),\n   * which handles both setting proximity and zoom after a suggestion click.\n   *\n   * @example\n   * ```typescript\n   * const search = new MapboxSearchBox();\n   * search.bindMap(map);\n   * ```\n   */\n  bindMap(map: mapboxgl.Map): void {\n    if (this.#map) {\n      this.#map.off('moveend', this.#handleMoveEnd);\n    }\n\n    if (map) {\n      map.on('moveend', this.#handleMoveEnd);\n    }\n\n    this.#map = map;\n  }\n\n  /**\n   * Unbinds the search box from a [Map](https://docs.mapbox.com/mapbox-gl-js/api/#map).\n   */\n  unbindMap(): void {\n    this.bindMap(null);\n  }\n\n  // IControl interface.\n\n  // eslint-disable-next-line custom-elements/no-method-prefixed-with-on\n  onAdd(map: mapboxgl.Map): HTMLElement {\n    this.bindMap(map);\n    this.remove();\n\n    const container = document.createElement('div');\n    container.className = 'mapboxgl-ctrl';\n    container.style.width = '300px';\n    container.appendChild(this);\n\n    return container;\n  }\n\n  // eslint-disable-next-line custom-elements/no-method-prefixed-with-on\n  onRemove(): void {\n    this.remove();\n    this.unbindMap();\n    this.#removeMarker();\n  }\n\n  getDefaultPosition(): string {\n    return 'top-right';\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxSearchBox: typeof MapboxSearchBox;\n  }\n}\n\nwindow.MapboxSearchBox = MapboxSearchBox;\n\nif (!window.customElements.get('mapbox-search-box')) {\n  customElements.define('mapbox-search-box', MapboxSearchBox);\n}\n", "/**\n * Localized values for the placeholder string\n */\nconst placeholder = {\n  //  list drawn from https://docs.mapbox.com/api/search/#language-coverage\n  de: 'Suche', //  german\n  it: 'Ricerca', // italian\n  en: 'Search', //  english\n  nl: 'Zoeken', // dutch\n  fr: 'Chercher', // french\n  ca: 'Cerca', // catalan\n  he: '\u05DC\u05D7\u05E4\u05E9', // hebrew\n  ja: '\u30B5\u30FC\u30C1', // japanese\n  lv: 'Mekl\u0113t', // latvian\n  pt: 'Procurar', // portuguese\n  sr: '\u041F\u0440\u0435\u0442\u0440\u0430\u0433\u0430', // serbian\n  zh: '\u641C\u7D22', // chinese-simplified\n  cs: 'Vyhled\u00E1v\u00E1n\u00ED', // czech\n  hu: 'Keres\u00E9s', // hungarian\n  ka: '\u10EB\u10D8\u10D4\u10D1\u10D0', //  georgian\n  nb: 'S\u00F8ke', // norwegian\n  sk: 'Vyh\u013Ead\u00E1vanie', // slovak\n  th: '\u0E04\u0E49\u0E19\u0E2B\u0E32', // thai\n  fi: 'Hae', // finnish\n  is: 'Leita', // icelandic\n  ko: '\uC218\uC0C9', // korean\n  pl: 'Szukaj', // polish\n  sl: 'Iskanje', // slovenian\n  fa: '\u062C\u0633\u062A\u062C\u0648', // persian(aka farsi)\n  ru: '\u041F\u043E\u0438\u0441\u043A' // russian\n};\n\nexport default { placeholder };\n", "import { LngLat, LngLatLike } from '@mapbox/search-js-core';\n\nimport { HTMLScopedElement } from './HTMLScopedElement';\n\nimport {\n  bindElements,\n  createElementFromString,\n  getElementSize\n} from '../utils/dom';\nimport {\n  Anchor,\n  MapStyleMode,\n  MarkerController,\n  MAX_IMAGE_DIM\n} from '../utils/minimap';\nimport { getStaticBaseUrl } from '../utils/map';\n\nimport {\n  AUTOFILL_SKU_TOKEN_PREFIX,\n  STATIC_BASE_URL_SATELLITE\n} from '../constants';\nimport { getIcon, getImage, getThemeCSS, Theme } from '../theme';\n\nimport style from '../style.css';\nimport logo from '../icons/mapboxgl-ctrl-logo.svg';\nimport { deepEquals } from '../utils';\nimport { sendFeedback } from '../utils/contribute';\n\nimport { config } from '../config';\n\n// TODO: Scale by device pixel ratio?\nconst ZOOM = 16;\n\nconst TEMPLATE = createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MapboxAddressMinimap\" aria-hidden=\"true\">\n    <div class=\"MinimapImageContainer\">\n      <img class=\"MinimapImage\" draggable=\"false\"></img>\n      <div class=\"MinimapInnerFrame\">\n        <div class=\"MinimapMarker\"></div>\n        <div class=\"MinimapAttribution\">\n          <div class=\"MinimapAttributionLogo\">\n            <a target=\"_blank\" rel=\"noopener nofollow\" href=\"https://www.mapbox.com/\" aria-label=\"Mapbox logo\">\n              ${logo}\n            </a>\n          </div>\n          <div class=\"MinimapAttributionText\">\n            <a target=\"_blank\" href='https://www.mapbox.com/about/maps/'>\u00A9 Mapbox</a><a target=\"_blank\" href='http://www.openstreetmap.org/copyright'>\u00A9 OpenStreetMap</a>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n`);\n\nconst STYLE_TOGGLE_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <button type=\"button\" class=\"MinimapStyleToggle\"></button>\n</template>\n`);\n\nconst FOOTER_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MinimapFooter\">Adjust the marker on the map if it doesn't precisely match your location. This helps improve address data quality.</div>\n</template>\n`);\n\nconst ADJUST_PIN_TEXT = 'Adjust pin';\nconst SAVE_TEXT = 'Save';\nconst CANCEL_TEXT = 'Cancel';\n\nconst EDIT_BUTTONS_TEMPLATE =\n  createElementFromString<HTMLTemplateElement>(/* html */ `\n<template>\n  <div class=\"MinimapEditButtons\">\n    <div class=\"Button ButtonPrimary MinimapButtonAdjust\">${ADJUST_PIN_TEXT}</div>\n    <div class=\"Button ButtonPrimary MinimapButtonSave\" aria-hidden=\"true\">${SAVE_TEXT}</div>\n    <div class=\"Button MinimapButtonCancel\" aria-hidden=\"true\">${CANCEL_TEXT}</div>\n  </div>\n</template>\n`);\n\ntype Binding = {\n  MapboxAddressMinimap: HTMLElement;\n  ImageContainer: HTMLElement;\n  Image: HTMLImageElement;\n  Marker: HTMLElement;\n  MapStyleToggle?: HTMLElement;\n  EditButtons?: HTMLElement;\n  ButtonAdjust?: HTMLButtonElement;\n  ButtonSave?: HTMLButtonElement;\n  ButtonCancel?: HTMLButtonElement;\n};\n\n/**\n * `MapboxAddressMinimap`, also available as the element `<mapbox-address-minimap>`,\n * is a component that displays a marker for confirmation purposes.\n *\n * Optionally, this marker is editable. When editable, the marker can be moved\n * around the map and the updated location is sent back to the Mapbox Contribute\n * workflow.\n *\n * The goal of `MapboxAddressMinimap` is to reduce delivery or geolocation error in shipping and\n * local dispatching contexts.\n *\n * `MapboxAddressMinimap` expands to fill its container, and is hidden unless\n * {@link MapboxAddressMinimap#feature} is truthy. Setting {@link MapboxAddressMinimap#feature}\n * to `null` hides the component.\n *\n * @class MapboxAddressMinimap\n * @example\n * ```typescript\n * const minimap = new MapboxAddressMinimap();\n * containerElement.appendChild(minimap);\n * minimap.feature = {\n *   type: 'Feature',\n *   geometry: {\n *     type: 'Point',\n *     coordinates: [-122.4194, 37.7749]\n *   },\n *   properties: {}\n * };\n * ```\n */\nexport class MapboxAddressMinimap extends HTMLScopedElement {\n  static observedAttributes: string[] = [\n    'access-token',\n    'can-adjust-marker',\n    'keep-marker-centered',\n    'marker-anchor',\n    'satellite-toggle'\n  ];\n\n  #canAdjustMarkerInternal = false;\n\n  /** @section {Markers} */\n\n  /**\n   * If `true`, the marker can be moved around the map. Defaults to `false`.\n   *\n   * When editable, the marker can be moved around the map and the updated\n   * location can be referenced from the {@link MapboxAddressMinimap#onSaveMarkerLocation} callback.\n   *\n   * @name canAdjustMarker\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {boolean}\n   */\n  get canAdjustMarker(): boolean {\n    return this.#canAdjustMarkerInternal;\n  }\n  set canAdjustMarker(val: boolean) {\n    this.#canAdjustMarkerInternal = val;\n    val ? this.#addMarkerEditControls() : this.#removeMarkerEditControls();\n  }\n  /**\n   * If `true`, the map when panned moves around the marker, keeping the marker\n   * centered. Defaults to `false`.\n   *\n   * @name keepMarkerCentered\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {boolean}\n   */\n  keepMarkerCentered = false;\n  /**\n   * The anchor of the marker, relative to center of the expanded size. Defaults to `'bottom'`.\n   *\n   * @name markerAnchor\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {Anchor}\n   */\n  markerAnchor: Anchor = 'bottom';\n  /**\n   * A client-defined callback that is triggered when the \"Save\" button is clicked in the editing interface,\n   * and gives access to the adjusted marker coordinate.\n   *\n   * @name onSaveMarkerLocation\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {function}\n   */\n  onSaveMarkerLocation: (coordinate: [number, number]) => void;\n\n  #isAdjustMarkerEditing = false;\n\n  #imageLoaded = false;\n\n  #feature: GeoJSON.Feature<GeoJSON.Point>;\n  #url = '';\n\n  #width: number;\n  #height: number;\n\n  #binding: Binding;\n\n  #markerController: MarkerController;\n\n  #accessToken: string;\n\n  /** @section {Input data} */\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * If not explicitly set on the component, this will reference the value in the global config object.\n   *\n   * @name accessToken\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @example\n   * ```typescript\n   * minimap.accessToken = 'pk.my-mapbox-access-token';\n   * ```\n   */\n  get accessToken(): string {\n    return this.#accessToken || config.accessToken;\n  }\n  set accessToken(newToken: string) {\n    this.#accessToken = newToken;\n  }\n\n  /**\n   * A [GeoJSON](https://docs.mapbox.com/help/glossary/geojson/) Feature representing\n   * a [Point](https://geojson.org/geojson-spec.html#point) geometry.\n   *\n   * The minimap is hidden unless\n   * {@link MapboxAddressMinimap#feature} is truthy. Setting {@link MapboxAddressMinimap#feature}\n   * to `null` hides the component.\n   *\n   * @name feature\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {Feature}\n   */\n  get feature(): GeoJSON.Feature<GeoJSON.Point> {\n    return this.#feature;\n  }\n  set feature(feature: GeoJSON.Feature<GeoJSON.Point>) {\n    this.#feature = feature;\n\n    if (!feature) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  get template(): HTMLTemplateElement {\n    return TEMPLATE;\n  }\n\n  get templateStyle(): string {\n    return style;\n  }\n\n  get templateUserStyle(): string {\n    return getThemeCSS('.MapboxAddressMinimap', this.theme);\n  }\n\n  #themeInternal: Theme = {};\n  #satelliteToggleInternal = false;\n\n  /** @section {Appearance} */\n\n  /**\n   * If `true`, the map will have an image toggle between Map and Satellite styles.\n   *\n   * @name satelliteToggle\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {boolean}\n   */\n  get satelliteToggle(): boolean {\n    return this.#satelliteToggleInternal;\n  }\n  set satelliteToggle(val: boolean) {\n    this.#satelliteToggleInternal = val;\n    val ? this.#addSatelliteToggle() : this.#removeSatelliteToggle();\n  }\n\n  /**\n   * The {@link Theme} to use for styling the editing interface.\n   *\n   * @name theme\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {Theme}\n   * @example\n   * ```typescript\n   * autofill.theme = {\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * };\n   * ```\n   */\n  get theme(): Theme {\n    return this.#themeInternal;\n  }\n  set theme(theme: Theme) {\n    this.#themeInternal = theme;\n\n    if (!this.#binding || !theme) {\n      return;\n    }\n\n    this.updateTemplateUserStyle(getThemeCSS('.MapboxAddressMinimap', theme));\n\n    const { Marker, MapStyleToggle } = this.#binding;\n    Marker.innerHTML = getIcon('marker', theme);\n    if (MapStyleToggle) {\n      MapStyleToggle.style.backgroundImage = this.#getToggleBackgroundImageUrl(\n        this.mapStyleMode === 'default' ? 'satellite' : 'default'\n      );\n    }\n  }\n\n  #mapStyleMode: MapStyleMode = 'default';\n\n  #adjustBtnText;\n  /**\n   * Custom adjust button text appearing on the map.\n   * If not provided, the default text will be used.\n   *\n   * @name adjustBtnText\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {string}\n   */\n  get adjustBtnText(): string {\n    return this.#adjustBtnText || ADJUST_PIN_TEXT;\n  }\n  set adjustBtnText(val: string) {\n    this.#adjustBtnText = val;\n    const adjustBtn = this.querySelector('.MinimapButtonAdjust');\n    adjustBtn.textContent = val || ADJUST_PIN_TEXT;\n  }\n\n  #saveBtnText;\n  /**\n   * Custom save button text appearing on the map, when marker adjustment is enabled.\n   * If not provided, the default text will be used.\n   *\n   * @name saveBtnText\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {string}\n   */\n  get saveBtnText(): string {\n    return this.#saveBtnText || SAVE_TEXT;\n  }\n  set saveBtnText(val: string) {\n    this.#saveBtnText = val;\n    const saveBtn = this.querySelector('.MinimapButtonSave');\n    saveBtn.textContent = val || SAVE_TEXT;\n  }\n\n  #cancelBtnText;\n  /**\n   * Custom cancel button text appearing on the map, when marker adjustment is enabled.\n   * If not provided, the default text will be used.\n   *\n   * @name cancelBtnText\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {string}\n   */\n  get cancelBtnText(): string {\n    return this.#cancelBtnText || CANCEL_TEXT;\n  }\n  set cancelBtnText(val: string) {\n    this.#cancelBtnText = val;\n    const cancelBtn = this.querySelector('.MinimapButtonCancel');\n    cancelBtn.textContent = val || CANCEL_TEXT;\n  }\n\n  /**\n   * The map style to use, either `'default'` or `'satellite'`. The default map\n   * style is configurable with {@link MapboxAddressMinimap#defaultMapStyle}.\n   *\n   * @name mapStyleMode\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {'default' | 'satellite'}\n   */\n  get mapStyleMode(): MapStyleMode {\n    return this.#mapStyleMode;\n  }\n  set mapStyleMode(styleMode: MapStyleMode) {\n    const prevStyleMode = this.#mapStyleMode;\n    if (prevStyleMode === styleMode) return;\n\n    this.#mapStyleMode = styleMode;\n    if (!this.#binding) {\n      return;\n    }\n\n    // Update toggle button background image\n    const { MapStyleToggle } = this.#binding;\n    if (!MapStyleToggle) {\n      return;\n    }\n\n    MapStyleToggle.style.backgroundImage =\n      this.#getToggleBackgroundImageUrl(prevStyleMode);\n    // Update title attribute\n    MapStyleToggle.setAttribute(\n      'title',\n      `Switch to ${prevStyleMode === 'satellite' ? 'Satellite' : 'Default'}`\n    );\n    this.#updateImageSrc();\n  }\n\n  #defaultMapStyle: [string, string] = ['mapbox', 'streets-v11'];\n\n  /**\n   * The map style to use for the default map style. Defaults to `['mapbox', 'streets-v11']`.\n   *\n   * @name defaultMapStyle\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {[string, string]}\n   */\n  get defaultMapStyle(): [string, string] {\n    return this.#defaultMapStyle;\n  }\n  set defaultMapStyle(style: [string, string]) {\n    this.#defaultMapStyle = style;\n    this.#updateImageSrc();\n  }\n\n  #footer: boolean | string;\n\n  /**\n   * Custom footer text appearing below the map, when marker adjustment is enabled.\n   * If `true` or left undefined, the default footer text will be used.\n   * If `false`, the footer will not be shown.\n   *\n   * @name footer\n   * @instance\n   * @memberof MapboxAddressMinimap\n   * @type {boolean | string}\n   */\n  get footer(): boolean | string {\n    return this.#footer;\n  }\n  set footer(val: boolean | string) {\n    this.#footer = val;\n    const footerEl = this.querySelector<HTMLDivElement>('.MinimapFooter');\n    if (footerEl) {\n      if (typeof val === 'string') {\n        footerEl.textContent = val;\n        footerEl.removeAttribute('aria-hidden');\n      } else if (!val) {\n        footerEl.setAttribute('aria-hidden', 'true');\n      } else {\n        footerEl.removeAttribute('aria-hidden');\n      }\n    }\n  }\n\n  /**\n   * @deprecated Use `container` instead.\n   */\n  #container: HTMLElement | null;\n\n  get container(): HTMLElement | null {\n    return this.#container;\n  }\n\n  set container(newContainer: HTMLElement | null) {\n    if (newContainer) {\n      newContainer.style.position = 'relative';\n      this.#container = newContainer;\n    }\n  }\n\n  /** @section {Methods} */\n\n  /**\n   * If {@link MapboxAddressMinimap#feature} is truthy, show the minimap.\n   */\n  show(): void {\n    if (!this.#feature) {\n      return;\n    }\n\n    const lngLat = this.#feature.geometry.coordinates;\n    this.#markerController.coordinate = lngLat as [number, number];\n\n    this.#url = this.#getImageUrl(lngLat as [number, number]);\n\n    // Update image.\n    const { MapboxAddressMinimap, Image } = this.#binding;\n    Image.src = this.#url;\n\n    MapboxAddressMinimap.removeAttribute('aria-hidden');\n  }\n\n  /**\n   * Hide the minimap.\n   */\n  hide(): void {\n    const { MapboxAddressMinimap } = this.#binding;\n    MapboxAddressMinimap.setAttribute('aria-hidden', 'true');\n  }\n\n  #toggleMarkerEditing = (): void => {\n    const { ImageContainer, ButtonAdjust, ButtonSave, ButtonCancel } =\n      this.#binding;\n    if (this.#isAdjustMarkerEditing) {\n      ImageContainer.classList.add(`${this.dataset.seed}--draggable`);\n      this.#markerController.isActive = true;\n      ButtonAdjust.setAttribute('aria-hidden', 'true');\n      ButtonSave.removeAttribute('aria-hidden');\n      ButtonCancel.removeAttribute('aria-hidden');\n    } else {\n      ImageContainer.classList.remove(`${this.dataset.seed}--draggable`);\n      this.#markerController.isActive = false;\n      ButtonAdjust.removeAttribute('aria-hidden');\n      ButtonSave.setAttribute('aria-hidden', 'true');\n      ButtonCancel.setAttribute('aria-hidden', 'true');\n    }\n  };\n\n  #handleStartMarkerEditing = (): void => {\n    this.#isAdjustMarkerEditing = true;\n    this.#toggleMarkerEditing();\n  };\n\n  #handleSaveMarkerEditing = (): void => {\n    // Send feedback to Contribute API if feature includes address info, and the marker location has changed\n    if (\n      this.feature.properties.full_address &&\n      !deepEquals(\n        this.feature.geometry.coordinates,\n        this.#markerController.coordinate\n      )\n    ) {\n      const [lng, lat] = this.#markerController.coordinate;\n      sendFeedback(this.accessToken, {\n        originalCoordinate: this.feature.geometry.coordinates as [\n          number,\n          number\n        ],\n        originalAddress: this.feature.properties.full_address,\n        changes: {\n          location: { longitude: lng, latitude: lat }\n        }\n      });\n    }\n    // Client-defined callback\n    if (this.onSaveMarkerLocation) {\n      this.onSaveMarkerLocation(this.#markerController.coordinate);\n    }\n    // Update component state\n    this.#isAdjustMarkerEditing = false;\n    this.#toggleMarkerEditing();\n  };\n\n  #handleCancelMarkerEditing = (): void => {\n    this.#markerController.reCenter();\n    this.#isAdjustMarkerEditing = false;\n    this.#toggleMarkerEditing();\n  };\n\n  #handleToggleMapStyle = (): void => {\n    this.mapStyleMode =\n      this.mapStyleMode === 'default' ? 'satellite' : 'default';\n  };\n\n  #handleImageLoad = (): void => {\n    if (!this.#imageLoaded) {\n      this.#markerController.reCenter();\n    }\n    this.#imageLoaded = true;\n    this.#markerController && this.#markerController.handleMinimapResize();\n  };\n\n  #handleImageError = (): void => {\n    this.#imageLoaded = false;\n  };\n\n  /**\n   * Get the Static Image API URL for a given coordinate.\n   * Attempts to get an image twice as large as the container to enable panning,\n   * while constraining to the static API size limits.\n   * @param lngLatLike - The coordinate representing the center of the image\n   * @returns\n   */\n  #getImageUrl = (lngLatLike: LngLatLike): string => {\n    // Return empty string if height or width is 0 to prevent 422 error\n    if (this.#width === 0 || this.#height === 0) return '';\n\n    const [username, styleId] = this.defaultMapStyle;\n    const defaultBaseUrl = getStaticBaseUrl(username, styleId);\n    const baseUrl =\n      this.mapStyleMode === 'default'\n        ? defaultBaseUrl\n        : STATIC_BASE_URL_SATELLITE;\n    const skuToken =\n      AUTOFILL_SKU_TOKEN_PREFIX + config.autofillSessionToken.toString();\n    let imgUrl =\n      baseUrl +\n      LngLat.convert(lngLatLike).toArray().join(',') +\n      ',' +\n      ZOOM +\n      ',0/' +\n      Math.min(this.#width * 2, MAX_IMAGE_DIM) +\n      'x' +\n      Math.min(this.#height * 2, MAX_IMAGE_DIM) +\n      '?access_token=' +\n      this.accessToken +\n      '&attribution=false' +\n      '&logo=false';\n    if (config.autofillSessionEnabled) {\n      imgUrl += `&sku=${skuToken}`;\n    }\n    return imgUrl;\n  };\n\n  #updateImageSrc = (): void => {\n    if (this.#feature) {\n      const lngLat = this.#feature.geometry.coordinates;\n      this.#url = this.#getImageUrl(lngLat as [number, number]);\n      const { Image } = this.#binding;\n      Image.src = this.#url;\n    }\n  };\n\n  #getToggleBackgroundImageUrl = (styleMode: MapStyleMode): string => {\n    return `url(\"${getImage(\n      styleMode === 'default' ? 'styleToggleDefault' : 'styleToggleSatellite',\n      this.theme\n    )}\")`;\n  };\n\n  #setSize = (): void => {\n    const { MapboxAddressMinimap, ImageContainer, Image } = this.#binding;\n    const { width, height } = getElementSize(this.container);\n    const [oldWidth, oldHeight] = [this.#width, this.#height];\n    this.#width = Math.min(width, MAX_IMAGE_DIM); // Constrain to Static Image API limit\n    this.#height = Math.min(height, MAX_IMAGE_DIM); // Constrain to Static Image API limit\n    MapboxAddressMinimap.style.setProperty('width', `${this.#width}px`);\n    MapboxAddressMinimap.style.setProperty('height', `${this.#height}px`);\n    ImageContainer.style.setProperty('height', `${this.#height}px`);\n    ImageContainer.style.setProperty('width', `${this.#width}px`);\n    const [imgWidth, imgHeight] = [Image.width, Image.height];\n\n    /**\n     * Conditionally update the <img> src URL.\n     * Only updates if ALL of the following conditions are met:\n     * 1. The Minimap is INCREASING in X or Y dimension\n     * 2. The Minimap dimension is greater than half the <img> dimension (we want to aim for twice the extents for panning)\n     * 3. The <img> dimension is smaller than the maximum per Static Image API (i.e. it still has room to be sized up)\n     */\n    if (\n      (this.#width > oldWidth &&\n        this.#width > imgWidth / 2 &&\n        imgWidth < MAX_IMAGE_DIM) ||\n      (this.#height > oldHeight &&\n        this.#height > imgHeight / 2 &&\n        imgHeight < MAX_IMAGE_DIM)\n    ) {\n      this.#updateImageSrc();\n    } else {\n      this.#markerController && this.#markerController.handleMinimapResize();\n    }\n  };\n\n  #addMarkerEditControls = (): void => {\n    // Footer\n    const existingFooter = this.querySelector('.MinimapFooter');\n    if (existingFooter) return;\n    const footerElement = this.prepareTemplate(FOOTER_TEMPLATE);\n    const minimapElement = this.querySelector('.MapboxAddressMinimap');\n    if (!minimapElement) return;\n    minimapElement.appendChild(footerElement);\n\n    // Edit buttons\n    const existingEditBtns = this.querySelector('.MinimapEditButtons');\n    if (existingEditBtns) return;\n    const editButtonsElement = this.prepareTemplate(EDIT_BUTTONS_TEMPLATE);\n    const innerFrame = this.querySelector('.MinimapInnerFrame');\n    innerFrame.appendChild(editButtonsElement);\n\n    // Add to or update object binding\n    this.#binding = {\n      ...this.#binding,\n      EditButtons: this.querySelector('.MinimapEditButtons'),\n      ButtonAdjust: this.querySelector('.MinimapButtonAdjust'),\n      ButtonSave: this.querySelector('.MinimapButtonSave'),\n      ButtonCancel: this.querySelector('.MinimapButtonCancel')\n    };\n\n    // Bind callbacks to button click events\n    const { ButtonAdjust, ButtonSave, ButtonCancel } = this.#binding;\n    ButtonAdjust.addEventListener('click', this.#handleStartMarkerEditing);\n    ButtonSave.addEventListener('click', this.#handleSaveMarkerEditing);\n    ButtonCancel.addEventListener('click', this.#handleCancelMarkerEditing);\n  };\n\n  #removeMarkerEditControls = (): void => {\n    if (!this.#binding) return;\n    const { EditButtons, ButtonAdjust, ButtonSave, ButtonCancel } =\n      this.#binding;\n\n    const existingFooter = this.querySelector('.MinimapFooter');\n    existingFooter?.remove();\n    EditButtons?.remove();\n    if (ButtonAdjust) {\n      ButtonAdjust.remove();\n      ButtonAdjust.removeEventListener('click', this.#handleStartMarkerEditing);\n    }\n    if (ButtonSave) {\n      ButtonSave.remove();\n      ButtonSave.removeEventListener('click', this.#handleSaveMarkerEditing);\n    }\n    if (ButtonCancel) {\n      ButtonCancel.remove();\n      ButtonCancel.removeEventListener(\n        'click',\n        this.#handleCancelMarkerEditing\n      );\n    }\n\n    delete this.#binding.EditButtons;\n    delete this.#binding.ButtonAdjust;\n    delete this.#binding.ButtonSave;\n    delete this.#binding.ButtonCancel;\n  };\n\n  #addSatelliteToggle = (): void => {\n    const existingToggle = this.querySelector('.MinimapStyleToggle');\n    if (existingToggle) return;\n\n    // Add element to DOM\n    const toggleElement = this.prepareTemplate(STYLE_TOGGLE_TEMPLATE);\n    const innerFrame = this.querySelector('.MinimapInnerFrame');\n    if (!innerFrame) return;\n    innerFrame.appendChild(toggleElement);\n\n    // Add to or update object binding\n    this.#binding.MapStyleToggle = toggleElement;\n\n    // Bind callback\n    toggleElement.addEventListener('click', this.#handleToggleMapStyle);\n    // Initialize background image\n    toggleElement.style.backgroundImage = this.#getToggleBackgroundImageUrl(\n      this.mapStyleMode === 'default' ? 'satellite' : 'default'\n    );\n    toggleElement.setAttribute(\n      'title',\n      `Switch to ${this.mapStyleMode === 'default' ? 'Satellite' : 'Default'}`\n    );\n  };\n\n  #removeSatelliteToggle = (): void => {\n    if (!this.#binding) return;\n    const { MapStyleToggle } = this.#binding;\n    if (!MapStyleToggle) return;\n\n    MapStyleToggle.remove();\n    MapStyleToggle.removeEventListener('click', this.#handleToggleMapStyle);\n\n    delete this.#binding.MapStyleToggle;\n  };\n\n  connectedCallback(): void {\n    super.connectedCallback();\n\n    this.#binding = bindElements<Binding>(this, {\n      MapboxAddressMinimap: '.MapboxAddressMinimap',\n      ImageContainer: '.MinimapImageContainer',\n      Image: '.MinimapImage',\n      Marker: '.MinimapMarker',\n      MapStyleToggle: '.MinimapStyleToggle',\n      EditButtons: '.MinimapEditButtons',\n      ButtonAdjust: '.MinimapButtonAdjust',\n      ButtonSave: '.MinimapButtonSave',\n      ButtonCancel: '.MinimapButtonCancel'\n    });\n\n    // Update toggle button background image.\n    this.mapStyleMode = this.#mapStyleMode;\n\n    // Initialize theme if not set before connectedCallback\n    this.theme = { ...this.theme };\n\n    // Append buttons and footer if adjustable\n    if (this.canAdjustMarker) {\n      this.#addMarkerEditControls();\n    }\n\n    // Append style toggle if enabled\n    if (this.satelliteToggle) {\n      this.#addSatelliteToggle();\n    }\n\n    // Calculate size and listen for changes\n    this.container = this.parentElement;\n    const resizeObserver = new ResizeObserver(this.#setSize);\n    resizeObserver.observe(this.container);\n    this.#setSize();\n\n    const { MapboxAddressMinimap, ImageContainer, Image, Marker } =\n      this.#binding;\n\n    // Initialize marker controller\n    this.#markerController = new MarkerController(\n      ImageContainer,\n      Image,\n      Marker,\n      this.keepMarkerCentered,\n      ZOOM,\n      this.markerAnchor\n    );\n    this.#markerController.reCenter();\n    Image.onload = this.#handleImageLoad;\n    Image.onerror = this.#handleImageError;\n\n    Image.src = this.#url;\n\n    if (this.#feature) MapboxAddressMinimap.removeAttribute('aria-hidden');\n    else MapboxAddressMinimap.setAttribute('aria-hidden', 'true');\n  }\n\n  attributeChangedCallback(\n    name: string,\n    oldValue: string,\n    newValue: string\n  ): void {\n    if (name === 'access-token') {\n      this.accessToken = newValue;\n    } else if (name === 'can-adjust-marker') {\n      this.canAdjustMarker = newValue === 'true';\n    } else if (name === 'keep-marker-centered') {\n      this.keepMarkerCentered = newValue === 'true';\n    } else if (name === 'marker-anchor') {\n      const newAnchor = newValue as Anchor;\n      this.markerAnchor = newAnchor;\n      this.#markerController && (this.#markerController.anchor = newAnchor);\n    } else if (name === 'satellite-toggle') {\n      this.satelliteToggle = newValue === 'true';\n    }\n  }\n}\n\ndeclare global {\n  interface Window {\n    MapboxAddressMinimap: typeof MapboxAddressMinimap;\n  }\n}\n\nwindow.MapboxAddressMinimap = MapboxAddressMinimap;\n\nif (!window.customElements.get('mapbox-address-minimap')) {\n  customElements.define('mapbox-address-minimap', MapboxAddressMinimap);\n}\n", "import SphericalMercator from '@mapbox/sphericalmercator';\nimport { deepEquals, round } from '.';\nimport { getElementSize } from './dom';\n\nexport type MapStyleMode = 'default' | 'satellite';\n\n/**\n * @typedef Anchor\n */\nexport type Anchor =\n  | 'center'\n  | 'top-left'\n  | 'top-right'\n  | 'bottom-left'\n  | 'bottom-right'\n  | 'top'\n  | 'bottom'\n  | 'left'\n  | 'right';\n\n// eslint-disable-next-line\n// @ts-ignore\nconst merc = new SphericalMercator({ size: 512, antimeridian: true });\n\nexport const MAX_IMAGE_DIM = 1280;\n\ninterface MarkerTransform {\n  /** X offset to correct for anchor position */\n  anchorX: number;\n  /** Y offset to correct for anchor position */\n  anchorY: number;\n  /** X offset from manual marker movement */\n  globalX: number;\n  /** Y offset from manual marker movement */\n  globalY: number;\n  correctionX: number;\n  correctionY: number;\n}\n\n/**\n * Get the [X,Y] pixel offset for a given SVG marker and anchor definition\n * @param marker - An SVG element used as the marker\n * @param anchor - The anchor point of the marker to put closest to the marked coordinate\n * @returns [X,Y] pixel coordinate\n */\nexport function getAnchorOffset(\n  marker: HTMLElement,\n  anchor: Anchor\n): [number, number] {\n  const { width, height } = getElementSize(marker, true);\n  switch (anchor) {\n    case 'center':\n      return [0, 0];\n    case 'top':\n      return [0, height / 2];\n    case 'bottom':\n      return [0, (-1 * height) / 2];\n    case 'left':\n      return [width / 2, 0];\n    case 'right':\n      return [(-1 * width) / 2, 0];\n    case 'top-left':\n      return [width / 2, height / 2];\n    case 'top-right':\n      return [(-1 * width) / 2, height / 2];\n    case 'bottom-left':\n      return [width / 2, (-1 * height) / 2];\n    case 'bottom-right':\n      return [(-1 * width) / 2, (-1 * height) / 2];\n  }\n}\n\n/**\n * Manages positioning of a static map image and marker relative to\n * pixel and geographical coordinates. Handles pointer events for\n * interactive/adjustable instances.\n */\nexport class MarkerController {\n  imgContainerElement: HTMLElement;\n  imgElement: HTMLImageElement;\n  markerElement: HTMLElement;\n  keepMarkerCentered: boolean;\n  zoom: number;\n\n  /** X-offset for the marker element to account for its positioning anchor */\n  anchorOffsetX: number;\n  /** Y-offset for the marker element to account for its positioning anchor */\n  anchorOffsetY: number;\n\n  /** Current X pixel of the pointer on the page */\n  curPointerXPos: number;\n  /** Current Y pixel of the pointer on the page */\n  curPointerYPos: number;\n  /** X-pixels deviation of marker position from the current map/feature center point */\n  markerDeltaX: number;\n  /** Y-pixels deviation of marker position from the current map/feature center point */\n  markerDeltaY: number;\n\n  /**\n   * Lng/lat of feature coordinate and initial image center represented as screen pixels.\n   * Value is fixed for a given original coordinate.\n   */\n  imgCenterPx: [number, number];\n  /**\n   * Lng/lat of adjusted image center as screen pixels.\n   * Value changes as the image is panned around in its container.\n   */\n  imgCenterAdjustedPx: [number, number];\n\n  /**\n   *\n   * @param imageContainer - The parent element of the <img>\n   * @param imageContainer - The <img> element\n   * @param marker - SVG Element used as the map marker\n   * @param keepMarkerCentered - If true, the marker will stay centered within the frame while the map moves behind it\n   * @param zoom - The zoom level of the static map, used to calculate between screen pixel and lng/lat\n   * @param anchor - The part of the marker that should be positioned closest to the coordinate\n   */\n  constructor(\n    imageContainer: HTMLElement,\n    imageElement: HTMLImageElement,\n    marker: HTMLElement,\n    keepMarkerCentered: boolean,\n    zoom: number,\n    anchor: Anchor\n  ) {\n    this.markerElement = marker;\n    this.imgContainerElement = imageContainer;\n    this.imgElement = imageElement;\n    this.keepMarkerCentered = keepMarkerCentered;\n    this.zoom = zoom;\n    this.anchor = anchor;\n\n    this.curPointerXPos = 0;\n    this.curPointerYPos = 0;\n    this.markerDeltaX = 0;\n    this.markerDeltaY = 0;\n\n    this.imgContainerElement.addEventListener(\n      'pointerdown',\n      this.#onPointerDownImage\n    );\n\n    if (!this.keepMarkerCentered) {\n      this.markerElement.addEventListener(\n        'pointerdown',\n        this.#onPointerDownMarker\n      );\n    }\n\n    // Listen for changes to anchor size\n    const resizeObserver = new ResizeObserver(this.#handleAnchorResize);\n    resizeObserver.observe(this.markerElement);\n  }\n\n  #anchor: Anchor;\n\n  get anchor(): Anchor {\n    return this.#anchor;\n  }\n\n  set anchor(newAnchor: Anchor) {\n    this.#anchor = newAnchor;\n    [this.anchorOffsetX, this.anchorOffsetY] = getAnchorOffset(\n      this.markerElement,\n      newAnchor\n    );\n    this.markerTransform = {\n      anchorX: this.anchorOffsetX,\n      anchorY: this.anchorOffsetY\n    };\n  }\n\n  #handleAnchorResize = (): void => {\n    [this.anchorOffsetX, this.anchorOffsetY] = getAnchorOffset(\n      this.markerElement,\n      this.anchor\n    );\n    this.markerTransform = {\n      anchorX: this.anchorOffsetX,\n      anchorY: this.anchorOffsetY\n    };\n  };\n\n  #markerTransform: MarkerTransform = {\n    anchorX: 0,\n    anchorY: 0,\n    globalX: 0,\n    globalY: 0,\n    correctionX: 0,\n    correctionY: 0\n  };\n\n  get markerTransform(): MarkerTransform {\n    return this.#markerTransform;\n  }\n\n  set markerTransform(val: Partial<MarkerTransform>) {\n    this.#markerTransform = {\n      ...this.#markerTransform,\n      ...val\n    };\n    this.#updateMarkerTransform();\n  }\n\n  #isActive = false;\n\n  /** True if the marker is currently in edit mode */\n  get isActive(): boolean {\n    return this.#isActive;\n  }\n\n  /** Set to true to enable editing of the marker */\n  set isActive(val: boolean) {\n    this.imgContainerElement.style.touchAction = val ? 'none' : '';\n    this.#isActive = val;\n  }\n\n  #originalCoordinate: [number, number];\n\n  /** Lng/lat of the current marker location */\n  get coordinate(): [number, number] {\n    const adjustedPx: [number, number] = this.keepMarkerCentered\n      ? this.imgCenterAdjustedPx\n      : [\n          this.imgCenterPx[0] - this.markerDeltaX,\n          this.imgCenterPx[1] + this.markerDeltaY\n        ];\n\n    // If the screen pixel hasn't changed, use the original coordinate so as not to incur any precision rounding during translation\n    if (deepEquals(adjustedPx, this.imgCenterPx)) {\n      return this.#originalCoordinate;\n    } else {\n      const lngLat = merc.ll(adjustedPx, this.zoom);\n      return [round(lngLat[0], 6), round(lngLat[1], 6)];\n    }\n  }\n\n  /** Set the lng/lat corresponding to the initial marker and image center location */\n  set coordinate(lngLat: [number, number]) {\n    this.#originalCoordinate = lngLat;\n    this.imgCenterPx = this.imgCenterAdjustedPx = merc.px(lngLat, this.zoom);\n  }\n\n  // Marker dragging event handlers\n  #onPointerDownMarker = (m: PointerEvent): void => {\n    if (!this.isActive) return;\n\n    m.preventDefault();\n    m.stopPropagation();\n\n    this.#updatePointerPosition(m);\n\n    window.addEventListener('pointermove', this.#onPointerMoveMarker);\n    window.addEventListener('pointerup', this.#onPointerUpMarker);\n  };\n\n  #onPointerUpMarker = (): void => {\n    window.removeEventListener('pointermove', this.#onPointerMoveMarker);\n    window.removeEventListener('pointerup', this.#onPointerUpMarker);\n  };\n\n  #onPointerMoveMarker = (m: PointerEvent): void => {\n    m.preventDefault();\n    m.stopPropagation();\n\n    // Calculate change in pointer position\n    const diffX = this.curPointerXPos - m.pageX;\n    const diffY = this.curPointerYPos - m.pageY;\n\n    // Update relative marker positioning\n    this.markerDeltaX += diffX;\n    this.markerDeltaY -= diffY;\n    // Clamp to image bounds\n    this.markerDeltaX = Math.max(\n      Math.min(this.imgElement.width / 2, this.markerDeltaX),\n      (this.imgElement.width / 2) * -1\n    );\n    this.markerDeltaY = Math.max(\n      Math.min(this.imgElement.height / 2, this.markerDeltaY),\n      (this.imgElement.height / 2) * -1\n    );\n\n    // Calculate X/Y transforms\n    const imageOffsetX = this.imgCenterPx[0] - this.imgCenterAdjustedPx[0];\n    const imageOffsetY = this.imgCenterPx[1] - this.imgCenterAdjustedPx[1];\n    const deltaX = this.markerDeltaX - imageOffsetX;\n    const deltaY = this.markerDeltaY + imageOffsetY;\n\n    this.markerTransform = { globalX: deltaX, globalY: deltaY };\n\n    // Update pointer position\n    this.#updatePointerPosition(m);\n  };\n\n  // Image dragging event handlers\n  #onPointerDownImage = (m: PointerEvent): void => {\n    if (!this.isActive) return;\n\n    m.preventDefault();\n    m.stopPropagation();\n\n    this.#updatePointerPosition(m);\n\n    window.addEventListener('pointermove', this.#onPointerMoveImage);\n    window.addEventListener('pointerup', this.#onPointerUpImage);\n  };\n\n  #onPointerUpImage = (): void => {\n    window.removeEventListener('pointermove', this.#onPointerMoveImage);\n    window.removeEventListener('pointerup', this.#onPointerUpImage);\n  };\n\n  #onPointerMoveImage = (m: PointerEvent): void => {\n    m.preventDefault();\n\n    // Calculate and constrain updated scroll position\n    let top = Math.round(\n      this.imgContainerElement.scrollTop + (this.curPointerYPos - m.pageY)\n    );\n    // Clamp to container bounds\n    top = Math.max(\n      Math.min(\n        this.imgElement.height - this.imgContainerElement.clientHeight,\n        top\n      ),\n      0\n    );\n    let left = Math.round(\n      this.imgContainerElement.scrollLeft + (this.curPointerXPos - m.pageX)\n    );\n    // Clamp to container bounds\n    left = Math.max(\n      Math.min(\n        this.imgElement.width - this.imgContainerElement.clientWidth,\n        left\n      ),\n      0\n    );\n    this.imgContainerElement.scrollTop = top;\n    this.imgContainerElement.scrollLeft = left;\n\n    // Update adjusted center location\n    const diffX = Math.round(\n      left - (this.imgElement.width - this.imgContainerElement.clientWidth) / 2\n    );\n    const diffY = Math.round(\n      (this.imgElement.height - this.imgContainerElement.clientHeight) / 2 - top\n    );\n    this.imgCenterAdjustedPx = [\n      this.imgCenterPx[0] + diffX,\n      this.imgCenterPx[1] - diffY\n    ];\n\n    if (!this.keepMarkerCentered) {\n      // Move marker in sync with image to maintain visual positioning on map\n      const deltaX = this.markerDeltaX + diffX;\n      const deltaY = this.markerDeltaY + diffY;\n      this.markerTransform = { globalX: deltaX, globalY: deltaY };\n    }\n\n    this.#updateMarkerCorrection(left, top);\n\n    // Update pointer position\n    this.#updatePointerPosition(m);\n  };\n\n  #updatePointerPosition = (m: PointerEvent): void => {\n    this.curPointerXPos = m.pageX;\n    this.curPointerYPos = m.pageY;\n  };\n\n  #updateMarkerTransform = (): void => {\n    const { anchorX, anchorY, globalX, globalY, correctionX, correctionY } =\n      this.#markerTransform;\n    const transformX = anchorX - globalX + correctionX;\n    const transformY = anchorY + globalY + correctionY;\n    this.markerElement.style.transform = `translate(calc(-50% + ${transformX}px), calc(-50% + ${transformY}px))`;\n  };\n\n  /** Re-center the marker on the map at its original location */\n  reCenter = (): void => {\n    // Set scroll values to center image in its container\n    const top =\n      (this.imgElement.height - this.imgContainerElement.clientHeight) / 2;\n    const left =\n      (this.imgElement.width - this.imgContainerElement.clientWidth) / 2;\n    this.imgContainerElement.scrollTop = top;\n    this.imgContainerElement.scrollLeft = left;\n\n    // Reset adjusted image center screen coordinate to match original\n    this.imgCenterAdjustedPx = this.imgCenterPx;\n\n    // Reset marker transform in case it was changed\n    this.markerDeltaX = this.markerDeltaY = 0;\n    this.markerTransform = {\n      globalX: 0,\n      globalY: 0,\n      correctionX: 0,\n      correctionY: 0\n    };\n  };\n\n  /**\n   * The x/y offset of the image from its center based on its scrolled position within its container.\n   */\n  get imgCenterOffset(): { x: number; y: number } {\n    return {\n      x: this.imgCenterPx[0] - this.imgCenterAdjustedPx[0],\n      y: this.imgCenterPx[1] - this.imgCenterAdjustedPx[1]\n    };\n  }\n\n  /** Update image scroll position when the Minimap has been resized */\n  handleMinimapResize = (): void => {\n    if (!this.imgElement.height || !this.imgElement.width) return;\n\n    const centerOffsetX = this.imgCenterOffset.x;\n    const centerOffsetY = this.imgCenterOffset.y;\n\n    const left =\n      this.imgElement.width / 2 -\n      centerOffsetX -\n      this.imgContainerElement.clientWidth / 2;\n    const top =\n      this.imgElement.height / 2 -\n      centerOffsetY -\n      this.imgContainerElement.clientHeight / 2;\n\n    this.imgContainerElement.scrollLeft = left;\n    this.imgContainerElement.scrollTop = top;\n\n    this.#updateMarkerCorrection(left, top);\n  };\n\n  /**\n   * Update marker X/Y transform corrections based on image scroll position\n   * @param scrollLeft - scrollLeft of image container\n   * @param scrollTop - scrollTop of image container\n   */\n  #updateMarkerCorrection = (scrollLeft: number, scrollTop: number): void => {\n    const centerOffsetX = this.imgCenterOffset.x;\n    const centerOffsetY = this.imgCenterOffset.y;\n\n    const { correctionX, correctionY } = this.markerTransform;\n\n    const corrections: Partial<MarkerTransform> = {};\n\n    // Update marker x-transform correction\n    if (scrollLeft / 2 < centerOffsetX * -1) {\n      const markerTranslateX = centerOffsetX * -1 - scrollLeft / 2;\n      corrections.correctionX = markerTranslateX * 2;\n    } else if (scrollLeft < 0) {\n      corrections.correctionX = scrollLeft;\n    } else if (correctionX !== 0) {\n      corrections.correctionX = 0;\n    }\n\n    // Update marker y-transform correction\n    if (scrollTop / 2 < centerOffsetY * -1) {\n      const markerTranslateY = centerOffsetY * -1 - scrollTop / 2;\n      corrections.correctionY = markerTranslateY * 2;\n    } else if (scrollTop < 0) {\n      corrections.correctionY = scrollTop;\n    } else if (correctionY !== 0) {\n      corrections.correctionY = 0;\n    }\n\n    this.markerTransform = corrections;\n  };\n}\n", "import {\n  AddressAutofillFeatureSuggestion,\n  AddressAutofillOptions,\n  AddressAutofillRetrieveResponse,\n  AddressAutofillSuggestion,\n  AddressAutofillSuggestionResponse,\n  Evented,\n  AddressAutofillCore,\n  SearchSession\n} from '@mapbox/search-js-core';\n\nimport { MapboxSearchListbox } from './components/MapboxSearchListbox';\nimport { MapboxHTMLEvent } from './MapboxHTMLEvent';\nimport { Theme } from './theme';\nimport { deepEquals } from './utils';\nimport {\n  distinctExactStreetResults,\n  fillFormWithFeature,\n  findAddressInputs,\n  toggleAutocompletion\n} from './utils/autofill';\nimport { tryConfirmBrowserAutofill } from './utils/confirmation';\n\nimport { config } from './config';\n\nimport { initDetectBrowserAutofill } from './utils/detect_browser_autofill';\nimport { AddressConfirmOptions } from './components/MapboxAddressConfirmation';\nimport { PopoverOptions } from './utils/popover';\nimport {\n  createAriaLiveElement,\n  suppressExtensionsAutocomplete\n} from './utils/aria';\nimport { handleStreetSelection } from './utils/autofill';\nimport { SEARCH_SERVICE } from './utils/services';\n\n/**\n * @class AddressAutofillInstance\n */\nexport class AddressAutofillInstance {\n  #input: HTMLInputElement;\n\n  get input(): HTMLInputElement {\n    return this.#input;\n  }\n\n  #collection: AddressAutofillCollectionType;\n  #session: SearchSession<\n    AddressAutofillOptions,\n    AddressAutofillSuggestion,\n    AddressAutofillSuggestionResponse,\n    AddressAutofillRetrieveResponse\n  >;\n\n  options: Partial<AddressAutofillOptions> = {};\n\n  retrieveFeature: AddressAutofillFeatureSuggestion = null;\n\n  listbox = new MapboxSearchListbox();\n\n  constructor(\n    collection: AddressAutofillCollectionType,\n    input: HTMLInputElement,\n    autofillRef: AddressAutofillCore\n  ) {\n    this.#input = input;\n    this.#collection = collection;\n    this.#session = new SearchSession<\n      AddressAutofillOptions,\n      AddressAutofillSuggestion,\n      AddressAutofillSuggestionResponse,\n      AddressAutofillRetrieveResponse\n    >(autofillRef);\n    this.#session.sessionToken = config.autofillSessionToken;\n\n    this.listbox.input = this.#input;\n    this.listbox.autofillHost = this;\n    this.listbox.searchService = SEARCH_SERVICE.AddressAutofill;\n\n    this.listbox.addEventListener('input', this.#onHandleInput);\n    this.listbox.addEventListener('select', this.#onHandleSelect);\n    this.listbox.addEventListener('blur', this.#onHandleBlur);\n    this.listbox.addEventListener('focus', this.#onHandleFocus);\n\n    this.#session.addEventListener('suggest', this.#handleSuggest);\n    this.#session.addEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.addEventListener('retrieve', this.#handleRetrieve);\n\n    document.body.appendChild(this.listbox);\n\n    if (input) {\n      input.insertAdjacentElement(\n        'beforebegin',\n        createAriaLiveElement(this.listbox.dataSeed)\n      );\n      suppressExtensionsAutocomplete(input);\n      this.#initialAutocompleteValue = input.autocomplete;\n    }\n  }\n\n  remove(): void {\n    this.listbox.remove();\n\n    this.listbox.removeEventListener('input', this.#onHandleInput);\n    this.listbox.removeEventListener('select', this.#onHandleSelect);\n    this.listbox.removeEventListener('blur', this.#onHandleBlur);\n    this.listbox.removeEventListener('focus', this.#onHandleFocus);\n\n    this.#session.removeEventListener('suggest', this.#handleSuggest);\n    this.#session.removeEventListener('suggesterror', this.#handleSuggestError);\n    this.#session.removeEventListener('retrieve', this.#handleRetrieve);\n  }\n\n  #initialAutocompleteValue: string;\n\n  #onHandleInput = (e: MapboxHTMLEvent<string>): void => {\n    const value = e.detail;\n\n    // if following flag set to true and search text is equal or less than 2 characters - enable browser autofill.\n    const enableBrowserAutocomplete =\n      this.#collection.browserAutofillEnabled === true && value?.length <= 2;\n\n    toggleAutocompletion(\n      this.#input,\n      this.#initialAutocompleteValue,\n      enableBrowserAutocomplete\n    );\n\n    if (value?.length <= 2) {\n      this.listbox.handleSuggest(null);\n      return;\n    }\n\n    this.#session.suggest(value, this.options);\n  };\n\n  #onHandleSelect = (e: MapboxHTMLEvent<AddressAutofillSuggestion>): void => {\n    const suggestion = e.detail;\n    if (e.detail.accuracy !== 'street') {\n      toggleAutocompletion(this.#input, this.#initialAutocompleteValue, true);\n      this.#session.retrieve(suggestion, this.options);\n    } else {\n      handleStreetSelection(\n        this.#input,\n        this.#initialAutocompleteValue,\n        suggestion\n      );\n    }\n  };\n\n  #onHandleBlur = (): void => {\n    toggleAutocompletion(this.#input, this.#initialAutocompleteValue, true);\n    // Abort any in-progress operations.\n    this.#session.abort();\n  };\n\n  #onHandleFocus = (): void => {\n    const enableBrowserAutocomplete =\n      this.#collection.browserAutofillEnabled === true &&\n      this.#input.value?.length <= 2;\n    toggleAutocompletion(\n      this.#input,\n      this.#initialAutocompleteValue,\n      enableBrowserAutocomplete\n    );\n  };\n\n  #handleSuggest = (result: AddressAutofillSuggestionResponse): void => {\n    const filteredSuggestions = result?.suggestions\n      ? distinctExactStreetResults(result.suggestions)\n      : null;\n    this.listbox.handleSuggest(filteredSuggestions);\n    // Manually bubble up the event.\n    const event = new MapboxHTMLEvent('suggest', result);\n    Object.defineProperty(event, 'target', { value: this.#input });\n    this.#collection.fire('suggest', event);\n  };\n\n  #handleSuggestError = (error: Error): void => {\n    this.listbox.handleError();\n    // Manually bubble up the event.\n    const event = new MapboxHTMLEvent('suggesterror', error);\n    Object.defineProperty(event, 'target', { value: this.#input });\n    this.#collection.fire('suggesterror', event);\n  };\n\n  #handleRetrieve = (result: AddressAutofillRetrieveResponse): void => {\n    const event = new MapboxHTMLEvent('retrieve', result);\n    // Manually bubble up the event.\n    Object.defineProperty(event, 'target', { value: this.#input });\n    this.#collection.fire('retrieve', event);\n\n    this.retrieveFeature = result.features?.[0];\n\n    if (!this.#input) {\n      return;\n    }\n\n    const featureCollection = result;\n    if (\n      !featureCollection ||\n      !featureCollection.features ||\n      !featureCollection.features.length\n    ) {\n      return;\n    }\n\n    fillFormWithFeature(featureCollection.features[0], this.#input);\n  };\n\n  simulateRetrieve(feature: AddressAutofillFeatureSuggestion): void {\n    const input = this.#input;\n    if (input) {\n      input.dataset['mapboxSuccess'] = 'true';\n    }\n    this.listbox.hideResults();\n\n    const simResult: AddressAutofillRetrieveResponse = {\n      type: 'FeatureCollection',\n      features: [feature],\n      url: ''\n    };\n\n    this.#handleRetrieve(simResult);\n  }\n}\n\n/**\n * @typedef AddressAutofillCollectionOptions\n */\nexport interface AddressAutofillCollectionOptions {\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   */\n  accessToken?: string;\n  /**\n   * Options to pass to the underlying {@link AddressAutofillCore} interface.\n   */\n  options?: Partial<AddressAutofillOptions>;\n  /**\n   * The {@link Theme} to use for styling the autofill component.\n   */\n  theme?: Theme;\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   */\n  popoverOptions?: Partial<PopoverOptions>;\n  /**\n   * If true, forms autofilled by the browser will prompt the\n   * {@link confirmAddress} dialog for user confirmation.\n   * An {@link AddressConfirmOptions} object can also be passed\n   * to prompt {@link confirmAddress} with custom options.\n   * Defaults to false.\n   */\n  confirmOnBrowserAutofill?: boolean | AddressConfirmOptions;\n  /**\n   * Enables the browser's autocomplete popup to show during the first two typed characters while Mapbox results are suppressed. Defaults to false.\n   *\n   * **Note:** Due to varying specifications, efforts to suppress browser autocomplete behavior may not work on all browsers.\n   */\n  browserAutofillEnabled?: boolean;\n}\n\ninterface EventTypes<\n  AddressAutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse\n> {\n  /**\n   * Fired when the user is typing in the input and provides a list of suggestions.\n   *\n   * The underlying response from {@link AddressAutofillCore} is passed as the event's detail,\n   * while the responsible input is passed as the event's target.\n   *\n   * @event suggest\n   * @instance\n   * @memberof AddressAutofillCollection\n   * @type {AddressAutofillSuggestionResponse}\n   * @example\n   * ```typescript\n   * collection.addEventListener('suggest', (event) => {\n   *   const suggestions = event.detail.suggestions;\n   *   const inputEl = event.target;\n   *   // ...\n   * });\n   * ```\n   */\n  suggest: MapboxHTMLEvent<AddressAutofillSuggestionResponse>;\n  /**\n   * Fired when {@link AddressAutofillCore} has errored providing a list of suggestions.\n   *\n   * The underlying error is passed as the event's detail,\n   * while the responsible input is passed as the event's target.\n   *\n   * @event suggesterror\n   * @instance\n   * @memberof AddressAutofillCollection\n   * @type {Error}\n   * @example\n   * ```typescript\n   * collection.addEventListener('suggesterror', (event) => {\n   *   const error = event.detail;\n   *   const inputEl = event.target;\n   *   // ...\n   * });\n   * ```\n   */\n  suggesterror: MapboxHTMLEvent<Error>;\n  /**\n   * Fired when the user has selected a suggestion, before the form is autofilled.\n   *\n   * The underlying response from {@link AddressAutofillCore} is passed as the event's detail,\n   * while the responsible input is passed as the event's target.\n   *\n   * @event retrieve\n   * @instance\n   * @memberof AddressAutofillCollection\n   * @type {AddressAutofillRetrieveResponse}\n   * @example\n   * ```typescript\n   * autofill.addEventListener('retrieve', (event) => {\n   *   const featureCollection = event.detail;\n   *   const inputEl = event.target;\n   *   // ...\n   * });\n   * ```\n   */\n  retrieve: MapboxHTMLEvent<AddressAutofillRetrieveResponse>;\n}\n\nexport type AddressAutofillCollectionType = AddressAutofillCollection<\n  AddressAutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse\n>;\n\n/**\n * Underlying collection object class returned by the {@link autofill} function.\n *\n * @class AddressAutofillCollection\n */\nexport class AddressAutofillCollection<\n  AddressAutofillSuggestionResponse,\n  AddressAutofillRetrieveResponse\n> extends Evented<\n  EventTypes<AddressAutofillSuggestionResponse, AddressAutofillRetrieveResponse>\n> {\n  instances: AddressAutofillInstance[] = [];\n  #currentInputs: HTMLInputElement[];\n\n  #autofill = new AddressAutofillCore();\n\n  constructor({\n    accessToken,\n    options,\n    theme,\n    popoverOptions,\n    confirmOnBrowserAutofill,\n    browserAutofillEnabled\n  }: AddressAutofillCollectionOptions) {\n    super();\n\n    // Setup browser autofill detection\n    initDetectBrowserAutofill();\n    window.addEventListener('browserautofill', this.#handleBrowserAutofill);\n\n    config.autofillSessionEnabled = true;\n\n    this.accessToken = accessToken || config.accessToken;\n    options && (this.options = options);\n    theme && (this.theme = theme);\n    popoverOptions && (this.popoverOptions = popoverOptions);\n    confirmOnBrowserAutofill &&\n      (this.confirmOnBrowserAutofill = confirmOnBrowserAutofill);\n    browserAutofillEnabled &&\n      (this.browserAutofillEnabled = browserAutofillEnabled);\n    this.update();\n  }\n\n  /**\n   * The [Mapbox access token](https://docs.mapbox.com/help/glossary/access-token/) to use for all requests.\n   *\n   * @example\n   * ```typescript\n   * autofill.accessToken = 'pk.my-mapbox-access-token';\n   * ```\n   */\n  get accessToken(): string {\n    return this.#autofill.accessToken;\n  }\n  set accessToken(newToken: string) {\n    this.#autofill.accessToken = newToken;\n  }\n\n  #options: Partial<AddressAutofillOptions>;\n\n  /**\n   * Options to pass to the underlying {@link AddressAutofillCore} interface.\n   *\n   * @example\n   * ```typescript\n   * autofill.options = {\n   *  language: 'en',\n   *  country: 'US',\n   * };\n   * ```\n   */\n  get options(): Partial<AddressAutofillOptions> {\n    return this.#options;\n  }\n  set options(newOptions: Partial<AddressAutofillOptions>) {\n    this.#options = { ...this.#options, ...newOptions };\n    this.instances.forEach((instance) => {\n      instance.options = { ...instance.options, ...newOptions };\n    });\n  }\n\n  #theme: Theme;\n\n  /**\n   * The {@link Theme} to use for styling the autofill component.\n   *\n   * @example\n   * ```typescript\n   * autofill.theme = {\n   *   variables: {\n   *     colorPrimary: 'myBrandRed'\n   *   }\n   * };\n   * ```\n   */\n  get theme(): Theme {\n    return this.#theme;\n  }\n  set theme(newTheme: Theme) {\n    this.#theme = newTheme;\n    this.instances.forEach((instance) => {\n      instance.listbox.theme = newTheme;\n    });\n  }\n\n  #popoverOptions: Partial<PopoverOptions>;\n\n  /**\n   * The {@link PopoverOptions} to define popover positioning.\n   *\n   * @example\n   * ```typescript\n   * autofill.popoverOptions = {\n   *   placement: 'top-start',\n   *   flip: true,\n   *   offset: 5\n   * };\n   * ```\n   */\n  get popoverOptions(): Partial<PopoverOptions> {\n    return this.#popoverOptions;\n  }\n  set popoverOptions(newOptions: Partial<PopoverOptions>) {\n    this.#popoverOptions = newOptions;\n    this.instances.forEach((instance) => {\n      instance.listbox.popoverOptions = newOptions;\n    });\n  }\n\n  /**\n   * If true, forms autofilled by the browser will prompt the\n   * {@link confirmAddress} dialog for user confirmation.\n   * An {@link AddressConfirmOptions} object can also be passed\n   * to prompt {@link confirmAddress} with custom options.\n   * Defaults to false.\n   *\n   * @name confirmOnBrowserAutofill\n   * @instance\n   * @memberof AddressAutofillCollection\n   * @type {boolean | AddressConfirmOptions}\n   * @example\n   * ```typescript\n   * autofill.confirmOnBrowserAutofill = {\n   *   minimap: true,\n   *   skipConfirmModal: (feature) =>\n   *     ['exact', 'high'].includes(\n   *       feature.properties.match_code.confidence\n   *     )\n   * };\n   * ```\n   */\n  confirmOnBrowserAutofill: boolean | AddressConfirmOptions = false;\n\n  /**\n   * Enables the browser's autocomplete popup to show during the first two typed characters while Mapbox results are suppressed. Defaults to false.\n   *\n   * **Note:** Due to varying specifications, efforts to suppress browser autocomplete behavior may not work on all browsers.\n   *\n   * @name browserAutofillEnabled\n   * @instance\n   * @memberof AddressAutofillCollection\n   * @type {boolean}\n   * @example\n   * ```typescript\n   * autofill.browserAutofillEnabled = true;\n   * ```\n   */\n  browserAutofillEnabled?: boolean = false;\n\n  /** @section {Methods} */\n\n  /**\n   * Updates autofill collection based on the current DOM state.\n   * @example\n   * ```typescript\n   * collection.update();\n   * ```\n   */\n  update(): void {\n    // STEP 0: Remove and clean up any existing autofill instances\n    this.instances.forEach((instance) => {\n      instance.remove();\n    });\n    // STEP 1: Find the input element(s)\n    this.#currentInputs = findAddressInputs();\n    // STEP 2: Create a new autofill instance for each input\n    this.instances = [];\n    this.#currentInputs.forEach((input) => {\n      const autofillInstance = new AddressAutofillInstance(\n        this,\n        input,\n        this.#autofill\n      );\n      autofillInstance.options = this.options;\n      autofillInstance.listbox.theme = this.theme;\n      autofillInstance.listbox.popoverOptions = this.popoverOptions;\n      this.instances.push(autofillInstance);\n    });\n  }\n\n  // TODO: optimize this!\n  // Called when content changes.\n  #handleObserve = (): void => {\n    // TODO: add test to make sure this comparison works\n    if (!deepEquals(findAddressInputs(), this.#currentInputs)) {\n      this.update();\n    }\n  };\n\n  #observer = new MutationObserver(this.#handleObserve);\n\n  /**\n   * Listen for changes to the DOM, and update autofill instances when autofill-able inputs are added/removed.\n   *\n   * **IMPORTANT:** For performance reasons, it is recommended to carefully control\n   * when this is called and to call {@link AddressAutofillCollection#unobserve} when finished.\n   *\n   * @example\n   * ```typescript\n   * collection.observe();\n   * ```\n   */\n  observe(): void {\n    // Setup observer handler.\n    this.#observer.observe(document, {\n      subtree: true,\n      childList: true\n    });\n\n    this.#handleObserve();\n  }\n\n  /**\n   * Stop listening for changes to the DOM. This only has an effect if called\n   * after {@link AddressAutofillCollection#observe}.\n   *\n   * @example\n   * ```typescript\n   * collection.unobserve();\n   * ```\n   */\n  unobserve(): void {\n    this.#observer.disconnect();\n  }\n\n  /**\n   * Removes all autofill instances and listeners in the document.\n   *\n   * @example\n   * ```typescript\n   * collection.remove();\n   * ```\n   */\n  remove(): void {\n    this.instances.forEach((instance) => {\n      instance.remove();\n    });\n    this.unobserve();\n    window.removeEventListener('browserautofill', this.#handleBrowserAutofill);\n  }\n\n  #handleBrowserAutofill = async (e: CustomEvent): Promise<void> => {\n    // Hide listbox, if showing\n    this.instances.forEach((instance) => instance.listbox.blur());\n\n    // Address confirmation\n    for (const instance of this.instances) {\n      const input = instance.listbox.input;\n      await tryConfirmBrowserAutofill(\n        input,\n        e,\n        this.confirmOnBrowserAutofill,\n        this.accessToken\n      );\n    }\n  };\n}\n\n/**\n * Entry point for Mapbox Address Autofill, for use on standard HTML input elements.\n *\n * Compared to {@link MapboxAddressAutofill}, this function automatically attaches\n * to eligible [`<input>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text) elements in-place.\n *\n * You must have a [Mapbox access token](https://www.mapbox.com/help/create-api-access-token/).\n *\n * Eligible inputs must be a descendant of a [`<form>`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form) element, and the form\n * must have inputs with proper HTML `autocomplete` attributes. The input itself must be of autocomplete `\"street-address\"` or `\"address-line1\"\"`.\n *\n * If your application works with browser autofill, you may already have this functionality.\n * - [The HTML autocomplete attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete)\n * - [Autofill](https://web.dev/learn/forms/autofill/)\n *\n * @param optionsArg - {@link AddressAutofillCollectionOptions} Object defining options for Address Autofill search behavior and UI.\n * @example\n * <input type=\"text\" autocomplete=\"street-address\" />\n * <script>\n * mapboxsearch.autofill({\n *   accessToken: 'pk.my.token',\n *   options: { country: 'us' }\n * };\n * </script>\n * @example\n * ```typescript\n * const collection = autofill({\n *   accessToken: 'pk.my.token',\n *   options\n * })\n *\n * myClientSideRouter.on('route', () => collection.update());\n * ```\n */\nexport function autofill(\n  optionsArg: AddressAutofillCollectionOptions\n): AddressAutofillCollectionType {\n  return new AddressAutofillCollection(optionsArg);\n}\n"],
  "mappings": "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",
  "names": []
}
